[{"path":[]},{"path":"https://ffscrapr.ffverse.com/CODE_OF_CONDUCT.html","id":"our-pledge","dir":"","previous_headings":"","what":"Our Pledge","title":"Contributor Covenant Code of Conduct","text":"interest fostering open welcoming environment, contributors maintainers pledge making participation project community harassment-free experience everyone, regardless age, body size, disability, ethnicity, sex characteristics, gender identity expression, level experience, education, socio-economic status, nationality, personal appearance, race, religion, sexual identity orientation.","code":""},{"path":"https://ffscrapr.ffverse.com/CODE_OF_CONDUCT.html","id":"our-standards","dir":"","previous_headings":"","what":"Our Standards","title":"Contributor Covenant Code of Conduct","text":"Examples behavior contributes creating positive environment include: Using welcoming inclusive language respectful differing viewpoints experiences Gracefully accepting constructive criticism Focusing best community Showing empathy towards community members Examples unacceptable behavior participants include: use sexualized language imagery unwelcome sexual attention advances Trolling, insulting/derogatory comments, personal political attacks Public private harassment Publishing others’ private information, physical electronic address, without explicit permission conduct reasonably considered inappropriate professional setting","code":""},{"path":"https://ffscrapr.ffverse.com/CODE_OF_CONDUCT.html","id":"our-responsibilities","dir":"","previous_headings":"","what":"Our Responsibilities","title":"Contributor Covenant Code of Conduct","text":"Project maintainers responsible clarifying standards acceptable behavior expected take appropriate fair corrective action response instances unacceptable behavior. Project maintainers right responsibility remove, edit, reject comments, commits, code, wiki edits, issues, contributions aligned Code Conduct, ban temporarily permanently contributor behaviors deem inappropriate, threatening, offensive, harmful.","code":""},{"path":"https://ffscrapr.ffverse.com/CODE_OF_CONDUCT.html","id":"scope","dir":"","previous_headings":"","what":"Scope","title":"Contributor Covenant Code of Conduct","text":"Code Conduct applies within project spaces public spaces individual representing project community. Examples representing project community include using official project e-mail address, posting via official social media account, acting appointed representative online offline event. Representation project may defined clarified project maintainers.","code":""},{"path":"https://ffscrapr.ffverse.com/CODE_OF_CONDUCT.html","id":"enforcement","dir":"","previous_headings":"","what":"Enforcement","title":"Contributor Covenant Code of Conduct","text":"Instances abusive, harassing, otherwise unacceptable behavior may reported contacting project team hello@dynastyprocess.com. complaints reviewed investigated result response deemed necessary appropriate circumstances. project team obligated maintain confidentiality regard reporter incident. details specific enforcement policies may posted separately. Project maintainers follow enforce Code Conduct good faith may face temporary permanent repercussions determined members project’s leadership.","code":""},{"path":"https://ffscrapr.ffverse.com/CODE_OF_CONDUCT.html","id":"attribution","dir":"","previous_headings":"","what":"Attribution","title":"Contributor Covenant Code of Conduct","text":"Code Conduct adapted Contributor Covenant, version 1.4, available https://www.contributor-covenant.org/version/1/4/code--conduct.html answers common questions code conduct, see https://www.contributor-covenant.org/faq","code":""},{"path":"https://ffscrapr.ffverse.com/CONTRIBUTING.html","id":null,"dir":"","previous_headings":"","what":"Contributing","title":"Contributing","text":"Many hands make light work! ways can contribute project:","code":""},{"path":"https://ffscrapr.ffverse.com/CONTRIBUTING.html","id":"sponsor","dir":"","previous_headings":"","what":"Sponsor","title":"Contributing","text":"can sponsor project donating help server costs!","code":""},{"path":"https://ffscrapr.ffverse.com/CONTRIBUTING.html","id":"open-an-issue","dir":"","previous_headings":"","what":"Open an issue","title":"Contributing","text":"can open issue ’d like request specific function report bug/error.","code":""},{"path":"https://ffscrapr.ffverse.com/CONTRIBUTING.html","id":"fixing-typos","dir":"","previous_headings":"","what":"Fixing typos","title":"Contributing","text":"can fix typos, spelling mistakes, grammatical errors documentation directly using GitHub web interface, long changes made source file. generally means ’ll need edit roxygen2 comments .R, .Rd file. can find .R file generates .Rd reading comment first line.","code":""},{"path":"https://ffscrapr.ffverse.com/CONTRIBUTING.html","id":"bigger-changes","dir":"","previous_headings":"","what":"Bigger changes","title":"Contributing","text":"want make bigger change, ’s good idea first file issue make sure someone team agrees ’s needed. ’ve found bug, please file issue illustrates bug minimal reprex (also help write unit test, needed).","code":""},{"path":"https://ffscrapr.ffverse.com/CONTRIBUTING.html","id":"project-and-branch-strategy","dir":"","previous_headings":"","what":"Project and branch strategy","title":"Contributing","text":"project now uses GitHub Flow v1.4.7+, rather Git Flow per previous. Feature development package organized GitHub Projects, track towards minor version release. function/method tracked GitHub Issue, linked /closed Pull Requests. CRAN releases can found GitHub Releases page. main branch contains latest development version package, fully tested, linted, documented. Development branches (e.g. fleaflicker, espn) contain -progress code. get squash-merged onto main branch tested documented. Sub-branches development may created necessary experimental purposes.","code":""},{"path":"https://ffscrapr.ffverse.com/CONTRIBUTING.html","id":"pull-request-process","dir":"","previous_headings":"","what":"Pull request process","title":"Contributing","text":"Fork package clone onto computer. haven’t done , recommend using usethis::create_from_github(\"ffverse/ffscrapr\", fork = TRUE). Install development dependencies devtools::install_dev_deps(), make sure package passes R CMD check running devtools::check(). R CMD check doesn’t pass cleanly, ’s good idea ask help continuing. Create Git branch pull request (PR). recommend using usethis::pr_init(\"brief-description--change\"). Make changes, commit git, create PR running usethis::pr_push(), following prompts browser. title PR briefly describe change. body PR contain Fixes #issue-number. user-facing changes, add bullet top NEWS.md (.e. just first header). Follow style described https://style.tidyverse.org/news.html.","code":""},{"path":"https://ffscrapr.ffverse.com/CONTRIBUTING.html","id":"code-style","dir":"","previous_headings":"","what":"Code style","title":"Contributing","text":"New code follow tidyverse style guide. can use styler package apply styles, please don’t restyle code nothing PR. use roxygen2, Markdown syntax, documentation. use testthat unit tests. Contributions test cases included easier accept.","code":""},{"path":"https://ffscrapr.ffverse.com/CONTRIBUTING.html","id":"code-of-conduct","dir":"","previous_headings":"","what":"Code of Conduct","title":"Contributing","text":"Please note usethis project released Contributor Code Conduct. contributing project agree abide terms. contribution guidelines inspired guidelines {usethis}","code":""},{"path":"https://ffscrapr.ffverse.com/LICENSE.html","id":null,"dir":"","previous_headings":"","what":"MIT License","title":"MIT License","text":"Copyright (c) 2023 Tan Ho Permission hereby granted, free charge, person obtaining copy software associated documentation files (“Software”), deal Software without restriction, including without limitation rights use, copy, modify, merge, publish, distribute, sublicense, /sell copies Software, permit persons Software furnished , subject following conditions: copyright notice permission notice shall included copies substantial portions Software. SOFTWARE PROVIDED “”, WITHOUT WARRANTY KIND, EXPRESS IMPLIED, INCLUDING LIMITED WARRANTIES MERCHANTABILITY, FITNESS PARTICULAR PURPOSE NONINFRINGEMENT. EVENT SHALL AUTHORS COPYRIGHT HOLDERS LIABLE CLAIM, DAMAGES LIABILITY, WHETHER ACTION CONTRACT, TORT OTHERWISE, ARISING , CONNECTION SOFTWARE USE DEALINGS SOFTWARE.","code":""},{"path":"https://ffscrapr.ffverse.com/articles/espn_authentication.html","id":"instructions","dir":"Articles","previous_headings":"","what":"Instructions","title":"ESPN: Private Leagues","text":"Visit main league page (.e. https://fantasy.espn.com/football/team?leagueId=899513&seasonId=2020) Make sure logged . Open Developer Tools (Chrome/Firefox, right-click anywhere page select Inspect Element) Go Storage (Firefox) Application (Chrome) browse Cookies available fantasy.espn.com values SWID ESPN_S2 parameters used ffscrapr connect private league. can right-click copy values . convenient way handle project store environment variables. can run usethis::edit_r_environ() add user environment, adding lines look like: values truncated (security purposes) ESPN_S2 often 250 characters long SWID 38 characters long including curly brackets. adding lines .Renviron restarting R, can access espn_connect call using Sys.getenv per :","code":"TAN_ESPN_S2=\"AECt%2F12312Dwd5ktQSzfuG\" TAN_SWID=\"{1E6CC139-}\" conn <- espn_connect(   season = 2019,   league_id = 899513,   espn_s2 = Sys.getenv(\"TAN_ESPN_S2\"),   swid = Sys.getenv(\"TAN_SWID\") )"},{"path":"https://ffscrapr.ffverse.com/articles/espn_basics.html","id":"values","dir":"Articles","previous_headings":"","what":"Values","title":"ESPN: Basics","text":"Cool! Let’s pull additional context adding DynastyProcess player values. Let’s team summaries now! , ’ve got team summary values! like applying context, let’s turn percentages - helps normalise league environment. Armed value summary like , can see team strengths weaknesses pretty quickly, figure might interested positional surpluses might surplus position want look .","code":"player_values <- dp_values(\"values-players.csv\")  # The values are stored by fantasypros ID since that's where the data comes from.  # To join it to our rosters, we'll need playerID mappings.  player_ids <- dp_playerids() %>%    select(espn_id,fantasypros_id) %>%    filter(!is.na(espn_id),!is.na(fantasypros_id))  # We'll be joining it onto rosters, so we can trim down the values dataframe # to just IDs, age, and values  player_values <- player_values %>%    left_join(player_ids, by = c(\"fp_id\" = \"fantasypros_id\")) %>%    select(espn_id,age,ecr_2qb,ecr_pos,value_2qb)  # we can join the roster's player_ids on the values' espn_id, with a bit of a type conversion first sucioboys_values <- sucioboys_rosters %>%    mutate(player_id = as.character(player_id)) %>%    left_join(player_values, by = c(\"player_id\"=\"espn_id\")) %>%    arrange(franchise_id,desc(value_2qb))  head(sucioboys_values) #> # A tibble: 6 × 14 #>   franchise_id franchise_name player_id player_name     team  pos   eligible_pos #>          <int> <chr>          <chr>     <chr>           <chr> <chr> <list>       #> 1            1 The Early GGod 4040715   Jalen Hurts     PHI   QB    <chr [5]>    #> 2            1 The Early GGod 4241479   Tua Tagovailoa  MIA   QB    <chr [5]>    #> 3            1 The Early GGod 4242335   Jonathan Taylor IND   RB    <chr [7]>    #> 4            1 The Early GGod 4239993   Tee Higgins     CIN   WR    <chr [8]>    #> 5            1 The Early GGod 3046779   Jared Goff      DET   QB    <chr [4]>    #> 6            1 The Early GGod 4241372   Marquise Brown  BAL   WR    <chr [7]>    #> # ℹ 7 more variables: status <chr>, acquisition_type <chr>, #> #   acquisition_date <dttm>, age <dbl>, ecr_2qb <dbl>, ecr_pos <dbl>, #> #   value_2qb <int> value_summary <- sucioboys_values %>%    group_by(franchise_id,franchise_name,pos) %>%    summarise(total_value = sum(value_2qb,na.rm = TRUE)) %>%   ungroup() %>%    group_by(franchise_id,franchise_name) %>%    mutate(team_value = sum(total_value)) %>%    ungroup() %>%    pivot_wider(names_from = pos, values_from = total_value) %>%    arrange(desc(team_value)) %>%    select(franchise_id,franchise_name,team_value,QB,RB,WR,TE)  value_summary #> # A tibble: 10 × 7 #>    franchise_id franchise_name               team_value    QB    RB    WR    TE #>           <int> <chr>                             <int> <int> <int> <int> <int> #>  1            5 \"The Juggernaut\"                  31373  9041  7889 11645  2798 #>  2            1 \"The Early GGod\"                  30207 19367  5110  5611   119 #>  3            6 \"OBJ's Personal Porta Potty\"      26092 17342  3441  1518  3791 #>  4            7 \"Tony El Tigre\"                   25681 18717  4617  1062  1285 #>  5            2 \"Coom  Dumpster\"                  23380  6392    11 16113   864 #>  6            8 \"Big Coomers\"                     21063  8703   617 11671    72 #>  7            9 \"RAFI CUNADO\"                     19258  1417  2477 14721   643 #>  8            3 \"PAKI STANS\"                      16631  2253  6900  2658  4820 #>  9            4 \"I'm Also Sad \"                   12077     3  4583  7309   182 #> 10           10 \"Austin 🐐Drew Lock🐐\"             8840  2110     0  6727     3 value_summary_pct <- value_summary %>%    mutate_at(c(\"team_value\",\"QB\",\"RB\",\"WR\",\"TE\"),~.x/sum(.x)) %>%    mutate_at(c(\"team_value\",\"QB\",\"RB\",\"WR\",\"TE\"),round, 3)  value_summary_pct #> # A tibble: 10 × 7 #>    franchise_id franchise_name               team_value    QB    RB    WR    TE #>           <int> <chr>                             <dbl> <dbl> <dbl> <dbl> <dbl> #>  1            5 \"The Juggernaut\"                  0.146 0.106 0.221 0.147 0.192 #>  2            1 \"The Early GGod\"                  0.141 0.227 0.143 0.071 0.008 #>  3            6 \"OBJ's Personal Porta Potty\"      0.122 0.203 0.097 0.019 0.26  #>  4            7 \"Tony El Tigre\"                   0.12  0.219 0.13  0.013 0.088 #>  5            2 \"Coom  Dumpster\"                  0.109 0.075 0     0.204 0.059 #>  6            8 \"Big Coomers\"                     0.098 0.102 0.017 0.148 0.005 #>  7            9 \"RAFI CUNADO\"                     0.09  0.017 0.069 0.186 0.044 #>  8            3 \"PAKI STANS\"                      0.077 0.026 0.194 0.034 0.331 #>  9            4 \"I'm Also Sad \"                   0.056 0     0.129 0.092 0.012 #> 10           10 \"Austin 🐐Drew Lock🐐\"            0.041 0.025 0     0.085 0"},{"path":"https://ffscrapr.ffverse.com/articles/espn_basics.html","id":"age","dir":"Articles","previous_headings":"","what":"Age","title":"ESPN: Basics","text":"Another question might ask: average age given team? like looking average age position, weighted dynasty value. helps give better idea age team - including might looking offload older veteran!","code":"age_summary <- sucioboys_values %>%    filter(pos %in% c(\"QB\",\"RB\",\"WR\",\"TE\")) %>%    group_by(franchise_id,pos) %>%    mutate(position_value = sum(value_2qb,na.rm=TRUE)) %>%    ungroup() %>%    mutate(weighted_age = age*value_2qb/position_value,          weighted_age = round(weighted_age, 1)) %>%    group_by(franchise_id,franchise_name,pos) %>%    summarise(count = n(),             age = sum(weighted_age,na.rm = TRUE)) %>%    pivot_wider(names_from = pos,               values_from = c(age,count))  age_summary #> # A tibble: 10 × 10 #> # Groups:   franchise_id, franchise_name [10] #>    franchise_id franchise_name     age_QB age_RB age_TE age_WR count_QB count_RB #>           <int> <chr>               <dbl>  <dbl>  <dbl>  <dbl>    <int>    <int> #>  1            1 \"The Early GGod\"     26     25     27.8   25.9        4        6 #>  2            2 \"Coom  Dumpster\"     30.2   28.5   28.9   26.7        4        7 #>  3            3 \"PAKI STANS\"         28.2   27.5   26.5   27.7        3        6 #>  4            4 \"I'm Also Sad \"      36.1   26.5   31.2   30.1        2        5 #>  5            5 \"The Juggernaut\"     26.9   27     34.2   27.1        3        8 #>  6            6 \"OBJ's Personal P…   27.5   26.7   28.3   27.2        3        6 #>  7            7 \"Tony El Tigre\"      27.2   27.1   30.3   27.1        3        5 #>  8            8 \"Big Coomers\"        25.7   31.6   30.9   28.1        3        7 #>  9            9 \"RAFI CUNADO\"        35.7   28     29.2   25.8        3        5 #> 10           10 \"Austin 🐐Drew Lo…   35.1    0     23.3   27.5        3        5 #> # ℹ 2 more variables: count_TE <int>, count_WR <int>"},{"path":"https://ffscrapr.ffverse.com/articles/espn_basics.html","id":"next-steps","dir":"Articles","previous_headings":"","what":"Next steps","title":"ESPN: Basics","text":"vignette, ’ve used functions: ff_connect, ff_league, ff_rosters, dp_values. Now ’ve gotten far, check possibilities?","code":""},{"path":"https://ffscrapr.ffverse.com/articles/espn_getendpoint.html","id":"espn-api---an-adventure-into-uncharted-territory","dir":"Articles","previous_headings":"","what":"ESPN API - An Adventure Into Uncharted Territory","title":"ESPN: Get Endpoint","text":"Accessing ESPN Fantasy API bit adventure undocumented abyss. vignette give bit rundown use espn_getendpoint lower-level espn_getendpoint_raw, talk x-fantasy-filter, detail known view parameters helpful.","code":"library(ffscrapr) library(httr) library(jsonlite) library(glue)"},{"path":"https://ffscrapr.ffverse.com/articles/espn_getendpoint.html","id":"known-endpoints","dir":"Articles","previous_headings":"","what":"Known Endpoints","title":"ESPN: Get Endpoint","text":"ESPN Fantasy API typically accessed two endpoints: ’s non-exhaustive list view endpoints know : mTeam mMatchup mRoster mSettings mBoxscore mMatchupScore kona_player_info player_wl mSchedule mScoreboard Please note calling various combinations views can often return different results calling separately. good way stumble endpoints load Developer Tools browser, go Network tab, interact fantasy.espn.com site see API requests main page making. Alternatively, can consult source code API packages (including languages) might give bit better idea ’s possible!","code":"https://fantasy.espn.com/apis/v3/games/ffl/seasons/{season}/segments/0/leagues/{league_id} # for 2018 onward https://fantasy.espn.com/apis/v3/games/ffl/leagueHistory/{league_id}?seasonId={season} # for 2017 or earlier"},{"path":"https://ffscrapr.ffverse.com/articles/espn_getendpoint.html","id":"using-espn_getendpoint","dir":"Articles","previous_headings":"","what":"Using espn_getendpoint","title":"ESPN: Get Endpoint","text":"ESPN’s API mostly structured making requests different views main league endpoint. example, https://fantasy.espn.com/apis/v3/games/ffl/seasons/2020/segments/0/leagues/899513?view=mDraftDetail pull draft details 2020 league ID 899513. espn_getendpoint helps facilitate request allowing instead write: automatically pass league ID, season, authentication cookies (used) conn object place request. can also use lower-level equivalent, espn_getendpoint_raw, build URL conn object still uses conn object pass along authentication cookies: equivalent requests. One reason use “raw” version able pass multiple view parameters view=mDraftDetail&view=mSettings query, possible main endpoint function accepts one option view http query.","code":"conn <- espn_connect(season = 2020, league_id = 899513)  draft_details <- espn_getendpoint(conn, view = \"mDraftDetail\")  draft_details #> <ESPN - GET - Success: (200) OK> #> QUERY: <https://fantasy.espn.com/apis/v3/games/ffl/seasons/2020/segments/0/leagues/899513?view=mDraftDetail> #> List of 8 #>  $ draftDetail    :List of 4 #>  $ gameId         : int 1 #>  $ id             : int 899513 #>  $ scoringPeriodId: int 18 #>  $ seasonId       : int 2020 #>  $ segmentId      : int 0 #>  $ settings       :List of 1 #>  $ status         :List of 21 draft_details_raw <- espn_getendpoint_raw(   conn,   \"https://fantasy.espn.com/apis/v3/games/ffl/seasons/2020/segments/0/leagues/899513?view=mDraftDetail\")  draft_details_raw #> <ESPN - GET - Success: (200) OK> #> QUERY: <https://fantasy.espn.com/apis/v3/games/ffl/seasons/2020/segments/0/leagues/899513?view=mDraftDetail> #> List of 8 #>  $ draftDetail    :List of 4 #>  $ gameId         : int 1 #>  $ id             : int 899513 #>  $ scoringPeriodId: int 18 #>  $ seasonId       : int 2020 #>  $ segmentId      : int 0 #>  $ settings       :List of 1 #>  $ status         :List of 21"},{"path":"https://ffscrapr.ffverse.com/articles/espn_getendpoint.html","id":"x-fantasy-filter","dir":"Articles","previous_headings":"","what":"X-Fantasy-Filter","title":"ESPN: Get Endpoint","text":"Many endpoints also affected JSON header, X-Fantasy-Filter, can filter/sort/limit (remove limits) API response. example build valid JSON x-fantasy-filter, sourced code ff_playerscores: JSON limits total responses 5, filters “statIDs” returned just ones prefixed “00”, sorts whole thing percent owned, descending. ’m exactly clear options x-fantasy-filter , can use emulate ’s happening request fantasy.espn.com. espn_getendpoint espn_getendpoint_raw functions can accept x-fantasy-filters. espn_getendpoint x_fantasy_filterargument takes JSON object created , espn_getendpoint_raw requires object converted HTTP header first. Examples :","code":"xff <- list(players = list(   limit = 5,   sortPercOwned =      list(sortAsc = FALSE,          sortPriority = 1),   filterStatsForTopScoringPeriodIDs =      list(value = 2,          additionalValue = c(paste0(\"00\", conn$season)))   )) %>%   jsonlite::toJSON(auto_unbox = TRUE)  xff #> {\"players\":{\"limit\":5,\"sortPercOwned\":{\"sortAsc\":false,\"sortPriority\":1},\"filterStatsForTopScoringPeriodIDs\":{\"value\":2,\"additionalValue\":\"002020\"}}} player_scores <- espn_getendpoint(conn, view = \"kona_player_info\", x_fantasy_filter = xff)  player_scores_2 <- espn_getendpoint_raw(   conn,   \"https://fantasy.espn.com/apis/v3/games/ffl/seasons/2020/segments/0/leagues/899513?view=kona_player_info\",   httr::add_headers(`X-Fantasy-Filter` = xff))"},{"path":"https://ffscrapr.ffverse.com/articles/espn_getendpoint.html","id":"other-espn-api-resources","dir":"Articles","previous_headings":"","what":"Other ESPN API resources","title":"ESPN: Get Endpoint","text":"Kiernan Nichols’s fflr R package R package available CRAN built specifically ESPN API access. writing (2021-03-03) supports public leagues, style differences light-weight/lower-dependency package. Many API endpoints researched languages might able draw inspiration ’s possible checking : Christian Wendt’s espn-api Python package incredibly helpful discovering known documented API endpoints. Mike Kreiser’s ESPN-Fantasy-Football-API well-documented JS client. Steven Morse also several great blog posts using API, mostly accessed via Python.","code":""},{"path":"https://ffscrapr.ffverse.com/articles/ffscrapr_caching.html","id":"caching-its-responsible-web-etiquette","dir":"Articles","previous_headings":"","what":"Caching: It’s Responsible Web Etiquette!","title":"ffscrapr: Managing Cache","text":"One many packages inspired ffscrapr Dmytro Perepolkin’s polite package, sets pillars responsible web etiquette, including introducing , taking slowly, never asking twice thing. ffscrapr gives convenient routes support : can set user_agent string connection help identify API platform (MFL actually gives higher rate limit register API Client!) can set rate_limit options help manage load API (comply restrictions APIs set ) Behind scenes, ffscrapr saving results expensive (.e. slow, data-heavy) stable (.e. likely change rapidly) queries ) can return things faster b) minimize server load. vignette explains helps manage caching.","code":""},{"path":"https://ffscrapr.ffverse.com/articles/ffscrapr_caching.html","id":"what-is-being-cached-how-long-is-it-being-cached-for","dir":"Articles","previous_headings":"","what":"What is being cached? How long is it being cached for?","title":"ffscrapr: Managing Cache","text":"ffscrapr’s core functions often loop , stable endpoints help return data function - things like “player names/positions/teams”, “franchise IDs/names”, “league scoring rules” used frequently. ffscrapr incorporates memoise package help functionality, (writing) saves results functions: mfl_players(), sleeper_players(), fleaflicker_players() - functions stored 7 days ff_franchises(), ff_scoring(), ff_league() - functions stored 24 hours ff_standings(), ff_playerscores(), ff_starters(), ff_schedule() , ff_userleagues() - functions stored one hour dp_playerids() dp_values() - functions stored 24 hours can find updated list cached functions zzz.R source code page.","code":""},{"path":"https://ffscrapr.ffverse.com/articles/ffscrapr_caching.html","id":"where-is-it-being-cached","dir":"Articles","previous_headings":"","what":"Where is it being cached?","title":"ffscrapr: Managing Cache","text":"default, ffscrapr save results function call (.e. function + arguments) memory. like cache stored local filesystem, can adjust behaviour adding following line (project) .Rprofile, adding library/load package. instruct ffscrapr store cache machine, dictated typical cache location operating system. can see running following line code:","code":"options(ffscrapr.cache = \"filesystem\") rappdirs::user_cache_dir(\"ffscrapr\")"},{"path":"https://ffscrapr.ffverse.com/articles/ffscrapr_caching.html","id":"how-can-i-clear-the-cache","dir":"Articles","previous_headings":"","what":"How can I clear the cache?","title":"ffscrapr: Managing Cache","text":"can use following function clear cache (whether memory filesystem):","code":".ffscrapr_clear_cache()"},{"path":"https://ffscrapr.ffverse.com/articles/fleaflicker_basics.html","id":"values","dir":"Articles","previous_headings":"","what":"Values","title":"Fleaflicker: Basics","text":"Cool! Let’s pull additional context adding DynastyProcess player values. Let’s team summaries now! , ’ve got team summary values! like applying context, let’s turn percentages - helps normalise league environment. Armed value summary like , can see team strengths weaknesses pretty quickly, figure might interested positional surpluses might surplus position want look .","code":"player_values <- dp_values(\"values-players.csv\")  # The values are stored by fantasypros ID since that's where the data comes from.  # To join it to our rosters, we'll need playerID mappings.  player_ids <- dp_playerids() %>%    select(sportradar_id,fantasypros_id) %>%    filter(!is.na(sportradar_id),!is.na(fantasypros_id))  # We'll be joining it onto rosters, so we can trim down the values dataframe # to just IDs, age, and values  player_values <- player_values %>%    left_join(player_ids, by = c(\"fp_id\" = \"fantasypros_id\")) %>%    select(sportradar_id,age,ecr_2qb,ecr_pos,value_2qb)  # ff_rosters() will return the sportradar_id, which we can then match to our player values!  aaa_values <- aaa_rosters %>%    left_join(player_values, by = c(\"sportradar_id\"=\"sportradar_id\")) %>%    arrange(franchise_id,desc(value_2qb))  head(aaa_values) #> # A tibble: 6 × 11 #>   franchise_id franchise_name player_id player_name    pos   team  sportradar_id #>          <int> <chr>              <int> <chr>          <chr> <chr> <chr>         #> 1      1578553 Running Bear       16250 Ja'Marr Chase  WR    CIN   fa99e984-d63… #> 2      1578553 Running Bear       12159 Dak Prescott   QB    DAL   86197778-8d4… #> 3      1578553 Running Bear       15531 Brandon Aiyuk  WR    SF    c90471cc-fa6… #> 4      1578553 Running Bear       12926 Chris Godwin   WR    TB    baa61bb5-f8d… #> 5      1578553 Running Bear       16552 Khalil Herbert RB    CHI   02af99e0-3c8… #> 6      1578553 Running Bear       14736 Devin Singlet… RB    HOU   a961b0d4-5d7… #> # ℹ 4 more variables: age <dbl>, ecr_2qb <dbl>, ecr_pos <dbl>, value_2qb <int> value_summary <- aaa_values %>%    group_by(franchise_id,franchise_name,pos) %>%    summarise(total_value = sum(value_2qb,na.rm = TRUE)) %>%   ungroup() %>%    group_by(franchise_id,franchise_name) %>%    mutate(team_value = sum(total_value)) %>%    ungroup() %>%    pivot_wider(names_from = pos, values_from = total_value) %>%    arrange(desc(team_value)) %>%    select(franchise_id,franchise_name,team_value,QB,RB,WR,TE)  value_summary #> # A tibble: 12 × 7 #>    franchise_id franchise_name        team_value    QB    RB    WR    TE #>           <int> <chr>                      <int> <int> <int> <int> <int> #>  1      1581722 syd12nyjets's Team         44863 19449  3083 22260    71 #>  2      1581719 Jmuthers's Team            37355  9881 10151 11267  6056 #>  3      1581803 ZachFarni's Team           30026  7048  5096 17718   164 #>  4      1581721 Mjenkyns2004's Team        28058 12496  5628  9508   426 #>  5      1581988 The DK Crew                26267 13954  7683  4496   134 #>  6      1581720 brosene's Team             23041 11281  5516  1599  4645 #>  7      1578553 Running Bear               21771  5998   698 15002    73 #>  8      1582416 Ray Jay Team               16853   903  1130 10890  3930 #>  9      1581718 Officially Rebuilding      13491  2362   858  8757  1514 #> 10      1581726 SCJaguars's Team           13039 11225   789  1017     8 #> 11      1582423 The Verblanders            12439  6890  2178  3350    21 #> 12      1581753 fede_mndz's Team           11846   164  4596  6356   730 value_summary_pct <- value_summary %>%    mutate_at(c(\"team_value\",\"QB\",\"RB\",\"WR\",\"TE\"),~.x/sum(.x)) %>%    mutate_at(c(\"team_value\",\"QB\",\"RB\",\"WR\",\"TE\"),round, 3)  value_summary_pct #> # A tibble: 12 × 7 #>    franchise_id franchise_name        team_value    QB    RB    WR    TE #>           <int> <chr>                      <dbl> <dbl> <dbl> <dbl> <dbl> #>  1      1581722 syd12nyjets's Team         0.161 0.191 0.065 0.198 0.004 #>  2      1581719 Jmuthers's Team            0.134 0.097 0.214 0.1   0.341 #>  3      1581803 ZachFarni's Team           0.108 0.069 0.107 0.158 0.009 #>  4      1581721 Mjenkyns2004's Team        0.101 0.123 0.119 0.085 0.024 #>  5      1581988 The DK Crew                0.094 0.137 0.162 0.04  0.008 #>  6      1581720 brosene's Team             0.083 0.111 0.116 0.014 0.261 #>  7      1578553 Running Bear               0.078 0.059 0.015 0.134 0.004 #>  8      1582416 Ray Jay Team               0.06  0.009 0.024 0.097 0.221 #>  9      1581718 Officially Rebuilding      0.048 0.023 0.018 0.078 0.085 #> 10      1581726 SCJaguars's Team           0.047 0.11  0.017 0.009 0     #> 11      1582423 The Verblanders            0.045 0.068 0.046 0.03  0.001 #> 12      1581753 fede_mndz's Team           0.042 0.002 0.097 0.057 0.041"},{"path":"https://ffscrapr.ffverse.com/articles/fleaflicker_basics.html","id":"age","dir":"Articles","previous_headings":"","what":"Age","title":"Fleaflicker: Basics","text":"Another question might ask: average age given team? like looking average age position, weighted dynasty value. helps give better idea age team - including might looking offload older veteran!","code":"age_summary <- aaa_values %>%    filter(pos %in% c(\"QB\",\"RB\",\"WR\",\"TE\")) %>%    group_by(franchise_id,pos) %>%    mutate(position_value = sum(value_2qb,na.rm=TRUE)) %>%    ungroup() %>%    mutate(weighted_age = age*value_2qb/position_value,          weighted_age = round(weighted_age, 1)) %>%    group_by(franchise_id,franchise_name,pos) %>%    summarise(count = n(),             age = sum(weighted_age,na.rm = TRUE)) %>%    pivot_wider(names_from = pos,               values_from = c(age,count))  age_summary #> # A tibble: 12 × 10 #> # Groups:   franchise_id, franchise_name [12] #>    franchise_id franchise_name     age_QB age_RB age_TE age_WR count_QB count_RB #>           <int> <chr>               <dbl>  <dbl>  <dbl>  <dbl>    <int>    <int> #>  1      1578553 Running Bear         30.2   25.9   27.9   24.7        5        6 #>  2      1581718 Officially Rebuil…   34.1   30.5   23.3   26.3        4       13 #>  3      1581719 Jmuthers's Team      27.5   27.3   27.1   25.7        5        7 #>  4      1581720 brosene's Team       27.3   26.7   27.7   27.7        6       17 #>  5      1581721 Mjenkyns2004's Te…   28.1   24.9   27.4   29.3        6        8 #>  6      1581722 syd12nyjets's Team   25.9   27.5   31     24.7        5        8 #>  7      1581726 SCJaguars's Team     24.5   25.2   29.5   25          5        6 #>  8      1581753 fede_mndz's Team     25.2   26.5   24.9   28.3        5       12 #>  9      1581803 ZachFarni's Team     25.9   24.8   28.4   25.8        4        8 #> 10      1581988 The DK Crew          26.6   25     27.3   27.1        4        8 #> 11      1582416 Ray Jay Team         33.3   29.9   32.8   28.5        5        5 #> 12      1582423 The Verblanders      26.8   28.6   25.6   29.9        3        8 #> # ℹ 2 more variables: count_TE <int>, count_WR <int>"},{"path":"https://ffscrapr.ffverse.com/articles/fleaflicker_basics.html","id":"next-steps","dir":"Articles","previous_headings":"","what":"Next steps","title":"Fleaflicker: Basics","text":"vignette, ’ve used functions: ff_connect, ff_league, ff_rosters, dp_values. Now ’ve gotten far, check possibilities?","code":""},{"path":"https://ffscrapr.ffverse.com/articles/fleaflicker_getendpoint.html","id":"creating-custom-fleaflicker-api-calls","dir":"Articles","previous_headings":"","what":"Creating custom Fleaflicker API calls","title":"Fleaflicker: Get Endpoint","text":"Fleaflicker API fairly extensive. something ’d like access ’s beyond current scope ffscrapr, can use lower-level “fleaflicker_getendpoint” function create GET request access data, still using authentication rate-limiting features ’ve already created. example can call one endpoints - case, let’s zoom Fetch League Scoreboard endpoint, used inside different ffscrapr functions summarised ways. ’ll start opening page, https://www.fleaflicker.com/api-docs/index.html#operation--FetchLeagueScoreboard-get, documentation page particular endpoint. , can see Fleaflicker’s documentation says endpoint parameters : fleaflicker_getendpoint function already base url encoded, ’ll need pass endpoint without /, pass HTTP parameters arguments function (case sensitive!) Along parsed content, function also returns query response sent server. helpful debugging, can turn content dataframe careful application tidyverse. , ’ll able feed IDs FetchLeagueBoxscore endpoint https://www.fleaflicker.com/api-docs/index.html#operation--FetchLeagueScoreboard-get fantasy_game_id - ’ll able get player-level points actual stat data fantasy game! , can keep unravelling - including “viewingActualPoints” “viewingActualStats” columns!","code":"library(ffscrapr) library(dplyr) library(purrr) library(glue) GET /FetchLeagueScoreboard  Parameters:  - sport: string NFL, MLB, NBA, NHL NFL (in query)  - league_id: integer (int32) (in query)  - season: integer (int32) (in query)  - scoring_period: integer (int32) (in query) sport <- \"NFL\" league_id <- 206154 season <- 2020 week <- 5  response_scoreboard <- fleaflicker_getendpoint(\"FetchLeagueScoreboard\",                                                sport = sport,                                                 league_id = league_id,                                                 season = season,                                                 scoring_period = week) #> Using request.R from \"ffscrapr\"  str(response_scoreboard, max.level = 1) #> List of 3 #>  $ content :List of 3 #>  $ query   : chr \"https://www.fleaflicker.com/api/FetchLeagueScoreboard?sport=NFL&league_id=206154&season=2020&scoring_period=5\" #>  $ response:List of 9 #>   ..- attr(*, \"class\")= chr \"response\" #>  - attr(*, \"class\")= chr \"fleaflicker_api\" df_scoreboard <- response_scoreboard %>%    purrr::pluck(\"content\",\"games\") %>%    tibble::tibble() %>%    tidyr::unnest_wider(1) %>%    dplyr::mutate_at(c(\"away\",\"home\"),purrr::map_chr,purrr::pluck,\"name\") %>%    dplyr::mutate_at(c(\"homeScore\",\"awayScore\"),purrr::map_dbl,purrr::pluck,\"score\",\"value\")  head(df_scoreboard) #> # A tibble: 6 × 8 #>   id       away     home  awayScore homeScore homeResult awayResult isFinalScore #>   <chr>    <chr>    <chr>     <dbl>     <dbl> <chr>      <chr>      <lgl>        #> 1 46301923 Winterf… Top …      207.      162. LOSE       WIN        TRUE         #> 2 46301919 Goldenr… Wint…      145.      157. WIN        LOSE       TRUE         #> 3 46301921 Wintert… Clut…      153.      192. WIN        LOSE       TRUE         #> 4 46301922 Manitob… Bame…      182.      183. WIN        LOSE       TRUE         #> 5 46301920 Springf… Shan…      176.      129. LOSE       WIN        TRUE         #> 6 46301926 Boomtow… Phil…      199.      200. WIN        LOSE       TRUE # same variables as previous endpoint call! onegame_lineups <- fleaflicker_getendpoint(   \"FetchLeagueBoxscore\",   sport = sport,    league_id = league_id,    # example for one call, but you can call this in a map or loop!    fantasy_game_id = df_scoreboard$id[[1]],    scoring_period = week) %>%    purrr::pluck('content','lineups') %>%    tibble::tibble() %>%    tidyr::unnest_wider(1) %>%    tidyr::unnest_longer('slots') %>%    tidyr::unnest_wider('slots') %>%    tidyr::pivot_longer(c(\"home\",\"away\"),names_to = \"franchise\",values_to = \"player\") %>%    tidyr::unnest_wider('player')  str(onegame_lineups,max.level = 2) #> tibble [98 × 15] (S3: tbl_df/tbl/data.frame) #>  $ group               : chr [1:98] \"START\" \"START\" \"START\" \"START\" ... #>  $ position            :List of 98 #>  $ positionColor       :List of 98 #>  $ franchise           : chr [1:98] \"home\" \"away\" \"home\" \"away\" ... #>  $ proPlayer           :List of 98 #>  $ requestedGames      :List of 98 #>  $ viewingActualPoints :List of 98 #>  $ viewingActualStats  :List of 98 #>  $ requestedGamesPeriod:List of 98 #>  $ viewingFormat       : chr [1:98] \"TOTAL\" \"TOTAL\" \"TOTAL\" \"TOTAL\" ... #>  $ viewingRange        :List of 98 #>  $ owner               :List of 98 #>  $ displayGroup        : chr [1:98] \"PASSER\" \"PASSER\" \"RUSHER\" \"RUSHER\" ... #>  $ rankDraft           :List of 98 #>  $ lastX               :List of 98"},{"path":"https://ffscrapr.ffverse.com/articles/mfl_basics.html","id":"values","dir":"Articles","previous_headings":"","what":"Values","title":"MFL: Basics","text":"Cool! Let’s pull additional context adding DynastyProcess player values. Let’s team summaries now! , ’ve got team summary values! like applying context, let’s turn percentages. Armed value summary like , can see team strengths weaknesses pretty quickly, figure might interested positional surpluses might surplus position want look .","code":"player_values <- dp_values(\"values-players.csv\")  # The values are stored by fantasypros ID since that's where the data comes from.  # To join it to our rosters, we'll need playerID mappings.  player_ids <- dp_playerids() %>%    select(mfl_id,fantasypros_id)  player_values <- player_values %>%    left_join(player_ids, by = c(\"fp_id\" = \"fantasypros_id\")) %>%    select(mfl_id,ecr_1qb,ecr_pos,value_1qb)  # Drilling down to just 1QB values and IDs, we'll be joining it onto rosters and don't need the extra stuff  ssb_values <- ssb_rosters %>%    left_join(player_values, by = c(\"player_id\"=\"mfl_id\")) %>%    arrange(franchise_id,desc(value_1qb))  head(ssb_values) #> # A tibble: 6 × 14 #>   franchise_id franchise_name player_id player_name    pos   team    age drafted #>   <chr>        <chr>          <chr>     <chr>          <chr> <chr> <dbl> <chr>   #> 1 0001         Team Pikachu   14835     Higgins, Tee   WR    CIN    25.1 Trade   #> 2 0001         Team Pikachu   14777     Burrow, Joe    QB    CIN    27.2 1.14    #> 3 0001         Team Pikachu   14779     Herbert, Just… QB    LAC    26   2.11    #> 4 0001         Team Pikachu   14085     Pollard, Tony  RB    DAL    26.9 13.04   #> 5 0001         Team Pikachu   13189     Engram, Evan   TE    NYG    29.5 3.04    #> 6 0001         Team Pikachu   13139     Williams, Jam… RB    GBP    28.9 15.04   #> # ℹ 6 more variables: roster_status <chr>, draft_year <int>, draft_round <chr>, #> #   ecr_1qb <dbl>, ecr_pos <dbl>, value_1qb <int> value_summary <- ssb_values %>%    group_by(franchise_id,franchise_name,pos) %>%    summarise(total_value = sum(value_1qb,na.rm = TRUE)) %>%   ungroup() %>%    group_by(franchise_id,franchise_name) %>%    mutate(team_value = sum(total_value)) %>%    ungroup() %>%    pivot_wider(names_from = pos, values_from = total_value) %>%    arrange(desc(team_value))  value_summary #> # A tibble: 14 × 7 #>    franchise_id franchise_name     team_value    QB    RB    TE    WR #>    <chr>        <chr>                   <int> <int> <int> <int> <int> #>  1 0006         Team King Dedede        29320  6382   679    82 22177 #>  2 0010         Team Yoshi              23903  5386  3962  1622 12933 #>  3 0011         Team Diddy Kong         20264     7  5300  5329  9628 #>  4 0004         Team Ice Climbers       20084   107 11355  1067  7555 #>  5 0003         Team Donkey Kong        17092  2410  4691  4034  5957 #>  6 0005         Team Dr. Mario          16299     2   265  4702 11330 #>  7 0001         Team Pikachu            16290  7460  3334   690  4806 #>  8 0002         Team Simon Belmont      11238   394  3923     5  6916 #>  9 0012         Team Mewtwo             10605    98  6884  1302  2321 #> 10 0009         Team Link                9984   694   875   806  7609 #> 11 0007         Team Kirby               9772  6973  1660    70  1069 #> 12 0013         Team Ness                8900    12  4546    45  4297 #> 13 0008         Team Bowser              3981  3842    12     2   125 #> 14 0014         Team Luigi               3183   296    56    90  2741 value_summary_pct <- value_summary %>%    mutate_at(c(\"team_value\",\"QB\",\"RB\",\"WR\",\"TE\"),~.x/sum(.x)) %>%    mutate_at(c(\"team_value\",\"QB\",\"RB\",\"WR\",\"TE\"),round, 3)  value_summary_pct #> # A tibble: 14 × 7 #>    franchise_id franchise_name     team_value    QB    RB    TE    WR #>    <chr>        <chr>                   <dbl> <dbl> <dbl> <dbl> <dbl> #>  1 0006         Team King Dedede        0.146 0.187 0.014 0.004 0.223 #>  2 0010         Team Yoshi              0.119 0.158 0.083 0.082 0.13  #>  3 0011         Team Diddy Kong         0.101 0     0.111 0.269 0.097 #>  4 0004         Team Ice Climbers       0.1   0.003 0.239 0.054 0.076 #>  5 0003         Team Donkey Kong        0.085 0.071 0.099 0.203 0.06  #>  6 0005         Team Dr. Mario          0.081 0     0.006 0.237 0.114 #>  7 0001         Team Pikachu            0.081 0.219 0.07  0.035 0.048 #>  8 0002         Team Simon Belmont      0.056 0.012 0.083 0     0.07  #>  9 0012         Team Mewtwo             0.053 0.003 0.145 0.066 0.023 #> 10 0009         Team Link               0.05  0.02  0.018 0.041 0.077 #> 11 0007         Team Kirby              0.049 0.205 0.035 0.004 0.011 #> 12 0013         Team Ness               0.044 0     0.096 0.002 0.043 #> 13 0008         Team Bowser             0.02  0.113 0     0     0.001 #> 14 0014         Team Luigi              0.016 0.009 0.001 0.005 0.028"},{"path":"https://ffscrapr.ffverse.com/articles/mfl_basics.html","id":"age","dir":"Articles","previous_headings":"","what":"Age","title":"MFL: Basics","text":"Another question might ask: average age given team? like looking average age position, weighted dynasty value. helps give better idea age team!","code":"age_summary <- ssb_values %>%    group_by(franchise_id,pos) %>%    mutate(position_value = sum(value_1qb,na.rm=TRUE)) %>%    ungroup() %>%    mutate(weighted_age = age*value_1qb/position_value) %>%    group_by(franchise_id,franchise_name,pos) %>%    summarise(count = n(),             age = sum(weighted_age,na.rm = TRUE)) %>%    pivot_wider(names_from = pos,               values_from = c(age,count))  age_summary #> # A tibble: 14 × 10 #> # Groups:   franchise_id, franchise_name [14] #>    franchise_id franchise_name     age_QB age_RB age_TE age_WR count_QB count_RB #>    <chr>        <chr>               <dbl>  <dbl>  <dbl>  <dbl>    <int>    <int> #>  1 0001         Team Pikachu         26.6   26.9   29.5   25.2        4        8 #>  2 0002         Team Simon Belmont   25.4   27.4   27.4   26.7        8       11 #>  3 0003         Team Donkey Kong     26.9   26.1   34.3   29.3        4        8 #>  4 0004         Team Ice Climbers    32.7   28.0   29.2   26.6        5        9 #>  5 0005         Team Dr. Mario       29.6   25.7   28.5   27.0        2        7 #>  6 0006         Team King Dedede     28.5   28.8   29.3   27.2        3       10 #>  7 0007         Team Kirby           25.8   28.0   28.8   32.4        4        9 #>  8 0008         Team Bowser          27.2   28.6   36.9   28.8        3        9 #>  9 0009         Team Link            30.9   31.7   29.0   30.5        3       11 #> 10 0010         Team Yoshi           28.0   25.1   30.5   28.7        2        6 #> 11 0011         Team Diddy Kong      34.5   29.1   26.7   24.9        4       12 #> 12 0012         Team Mewtwo          35.8   25.2   26.0   26.3        4        7 #> 13 0013         Team Ness            32.5   27.0   26.9   26.4        5        9 #> 14 0014         Team Luigi           35.3   28.4   28.5   30.6        3        7 #> # ℹ 2 more variables: count_TE <int>, count_WR <int>"},{"path":"https://ffscrapr.ffverse.com/articles/mfl_basics.html","id":"next-steps","dir":"Articles","previous_headings":"","what":"Next steps","title":"MFL: Basics","text":"vignette, ’ve used three functions: ff_connect, ff_league, ff_rosters. Now ’ve gotten far, check possibilities?","code":""},{"path":"https://ffscrapr.ffverse.com/articles/mfl_getendpoint.html","id":"creating-custom-mfl-api-calls","dir":"Articles","previous_headings":"","what":"Creating custom MFL API calls","title":"MFL: Get Endpoint","text":"MFL API extensive. something ’d like access beyond current scope ffscrapr, can use lower-level “mfl_getendpoint” function create GET request access data, still using authentication rate-limiting features ’ve already created. example can call one endpoints - case, let’s try searching SFBX leagues leagueSearch endpoint. ’ll start opening page, https://api.myfantasyleague.com/2020/api_info?STATE=test&CCAT=export&TYPE=leagueSearch, “test” page particular endpoint. , can see parameter required “SEARCH”. need connection object pass mfl_getendpoint function, although example don’t need give much since endpoint doesn’t need leagueID username/password APIKEY. parameters mfl_getendpoint function conn, endpoint, optional parameters required API. function automatically insert league_id, API key, /authentication cookies connection object, request JSON - need add parameters. safest assume everything case-sensitive: endpoint must match case displayed MFL (“leagueSearch”) SEARCH argument name must provided upper-case. function returns list query sent, response received, content parsed - helps debug result function later, inspecting query sent response received. like extract content purrr::pluck convert tibble unnest content , can use base R subsetting magrittr::extract2 purpose.","code":"library(ffscrapr) conn <- mfl_connect(season = 2020)  conn #> <MFL connection 2020_> #> List of 5 #>  $ platform   : chr \"MFL\" #>  $ season     : num 2020 #>  $ league_id  : chr(0)  #>  $ APIKEY     : NULL #>  $ auth_cookie: NULL #>  - attr(*, \"class\")= chr \"mfl_conn\" sfb_search <- mfl_getendpoint(conn,endpoint = \"leagueSearch\", SEARCH = \"sfbx conference\") #> Using request.R from \"ffscrapr\"  str(sfb_search, max.level = 1) #> List of 3 #>  $ content :List of 3 #>  $ query   : chr \"https://api.myfantasyleague.com/2020/export?TYPE=leagueSearch&SEARCH=sfbx%20conference&JSON=1\" #>  $ response:List of 9 #>   ..- attr(*, \"class\")= chr \"response\" #>  - attr(*, \"class\")= chr \"mfl_api\" search_results <- sfb_search %>%    purrr::pluck(\"content\",\"leagues\",\"league\") %>%    tibble::tibble() %>%    tidyr::unnest_wider(1)  head(search_results) #> # A tibble: 6 × 4 #>   id    name                year  homeURL                                        #>   <chr> <chr>               <chr> <chr>                                          #> 1 13411 #SFBX Conference 12 2020  https//www43.myfantasyleague.com/2020/home/13… #> 2 16428 #SFBX Conference 6  2020  https//www43.myfantasyleague.com/2020/home/16… #> 3 17910 #SFBX Conference 11 2020  https//www43.myfantasyleague.com/2020/home/17… #> 4 26453 #SFBX Conference 8  2020  https//www43.myfantasyleague.com/2020/home/26… #> 5 27495 #SFBX Conference 2  2020  https//www43.myfantasyleague.com/2020/home/27… #> 6 31492 #SFBX Conference 14 2020  https//www43.myfantasyleague.com/2020/home/31…"},{"path":"https://ffscrapr.ffverse.com/articles/mfl_getendpoint.html","id":"another-example-trade-bait","dir":"Articles","previous_headings":"","what":"Another Example: Trade Bait","title":"MFL: Get Endpoint","text":"’s another example, time trade bait endpoint: https://api.myfantasyleague.com/2020/api_info?STATE=test&CCAT=export&TYPE=tradeBait","code":"fog <- mfl_connect(season = 2019, league_id = 12608)  fog_tradebait <- mfl_getendpoint(fog, \"tradeBait\", INCLUDE_DRAFT_PICKS = 1) %>%    purrr::pluck(\"content\",\"tradeBaits\",\"tradeBait\") %>%    tibble::tibble() %>%    tidyr::unnest_wider(1) %>%    tidyr::separate_rows(\"willGiveUp\",sep = \",\") %>%    dplyr::left_join(     ff_franchises(fog) %>% dplyr::select(\"franchise_id\",\"franchise_name\"),     by = c(\"franchise_id\")   ) %>%    dplyr::left_join(     mfl_players(fog) %>% dplyr::select(\"player_id\",\"player_name\",\"pos\",\"age\",\"team\"),     by = c(\"willGiveUp\" = \"player_id\")   )  head(fog_tradebait) #> # A tibble: 6 × 9 #>   timestamp  willGiveUp franchise_id inExchangeFor    franchise_name player_name #>   <chr>      <chr>      <chr>        <chr>            <chr>          <chr>       #> 1 1574520555 7394       0001         \"anyone need a … @JohnBoschFF   Rivers, Ph… #> 2 1574520555 13128      0001         \"anyone need a … @JohnBoschFF   Cook, Dalv… #> 3 1580535809 13319      0003         \"\"               The Accountant Jones, Aar… #> 4 1580535809 13139      0003         \"\"               The Accountant Williams, … #> 5 1580535809 11675      0003         \"\"               The Accountant Adams, Dav… #> 6 1580572165 12171      0004         \"\"               Kevin Cutillo  Johnson, D… #> # ℹ 3 more variables: pos <chr>, age <dbl>, team <chr>"},{"path":"https://ffscrapr.ffverse.com/articles/sleeper_basics.html","id":"values","dir":"Articles","previous_headings":"","what":"Values","title":"Sleeper: Basics","text":"Cool! Let’s pull additional context adding DynastyProcess player values. Let’s team summaries now! , ’ve got team summary values! like applying context, let’s turn percentages - helps normalise league environment. Armed value summary like , can see team strengths weaknesses pretty quickly, figure might interested positional surpluses might surplus position want look .","code":"player_values <- dp_values(\"values-players.csv\")  # The values are stored by fantasypros ID since that's where the data comes from.  # To join it to our rosters, we'll need playerID mappings.  player_ids <- dp_playerids() %>%    select(sleeper_id,fantasypros_id)  player_values <- player_values %>%    left_join(player_ids, by = c(\"fp_id\" = \"fantasypros_id\")) %>%    select(sleeper_id,ecr_1qb,ecr_pos,value_1qb)  # Drilling down to just 1QB values and IDs, we'll be joining it onto rosters and don't need the extra stuff  jml_values <- jml_rosters %>%    left_join(player_values, by = c(\"player_id\"=\"sleeper_id\")) %>%    arrange(franchise_id,desc(value_1qb))  head(jml_values) #> # A tibble: 6 × 10 #>   franchise_id franchise_name player_id player_name    pos   team    age ecr_1qb #>   <chr>        <chr>          <chr>     <chr>          <chr> <chr> <dbl>   <dbl> #> 1 1            Fake News      4866      Saquon Barkley RB    NYG    27.1    38.2 #> 2 1            Fake News      4037      Chris Godwin   WR    TB     28      78.2 #> 3 1            Fake News      5022      Dallas Goedert TE    PHI    29.2    98.3 #> 4 1            Fake News      4199      Aaron Jones    RB    GB     29.3   105.  #> 5 1            Fake News      6826      Cole Kmet      TE    CHI    25     108.  #> 6 1            Fake News      4137      James Conner   RB    ARI    28.8   117.  #> # ℹ 2 more variables: ecr_pos <dbl>, value_1qb <int> value_summary <- jml_values %>%    group_by(franchise_id,franchise_name,pos) %>%    summarise(total_value = sum(value_1qb,na.rm = TRUE)) %>%   ungroup() %>%    group_by(franchise_id,franchise_name) %>%    mutate(team_value = sum(total_value)) %>%    ungroup() %>%    pivot_wider(names_from = pos, values_from = total_value) %>%    arrange(desc(team_value))  value_summary #> # A tibble: 12 × 8 #>    franchise_id franchise_name    team_value    QB    RB    TE    WR    FB #>    <chr>        <chr>                  <int> <int> <int> <int> <int> <int> #>  1 3            solarpool              30124 11618 14046   730  3730    NA #>  2 11           Permian Panthers       26277  1651  4242  3967 16417    NA #>  3 8            Hocka Flocka           22756   394  3254  5326 13782    NA #>  4 5            Barbarians             21665  5701  8345   369  7250    NA #>  5 2            KingGabe               19155    15  3903     3 15234    NA #>  6 6            sox05syd               18152  7459  2633  2099  5961    NA #>  7 4            The FANTom Menace      17535  1821   226    52 15436    NA #>  8 12           jaydk                  14907  1843  4049  4780  4235    NA #>  9 1            Fake News              11130   549  6013  1961  2607    NA #> 10 9            ZPMiller97              9815  3846  2170    83  3716    NA #> 11 7            Flipadelphia05          7403   298    21   520  6564    NA #> 12 10           JMLarkin                5167     4    17    17  5129     0 value_summary_pct <- value_summary %>%    mutate_at(c(\"team_value\",\"QB\",\"RB\",\"WR\",\"TE\"),~.x/sum(.x)) %>%    mutate_at(c(\"team_value\",\"QB\",\"RB\",\"WR\",\"TE\"),round, 3)  value_summary_pct #> # A tibble: 12 × 8 #>    franchise_id franchise_name    team_value    QB    RB    TE    WR    FB #>    <chr>        <chr>                  <dbl> <dbl> <dbl> <dbl> <dbl> <int> #>  1 3            solarpool              0.148 0.33  0.287 0.037 0.037    NA #>  2 11           Permian Panthers       0.129 0.047 0.087 0.199 0.164    NA #>  3 8            Hocka Flocka           0.112 0.011 0.067 0.268 0.138    NA #>  4 5            Barbarians             0.106 0.162 0.171 0.019 0.072    NA #>  5 2            KingGabe               0.094 0     0.08  0     0.152    NA #>  6 6            sox05syd               0.089 0.212 0.054 0.105 0.06     NA #>  7 4            The FANTom Menace      0.086 0.052 0.005 0.003 0.154    NA #>  8 12           jaydk                  0.073 0.052 0.083 0.24  0.042    NA #>  9 1            Fake News              0.055 0.016 0.123 0.099 0.026    NA #> 10 9            ZPMiller97             0.048 0.109 0.044 0.004 0.037    NA #> 11 7            Flipadelphia05         0.036 0.008 0     0.026 0.066    NA #> 12 10           JMLarkin               0.025 0     0     0.001 0.051     0"},{"path":"https://ffscrapr.ffverse.com/articles/sleeper_basics.html","id":"age","dir":"Articles","previous_headings":"","what":"Age","title":"Sleeper: Basics","text":"Another question might ask: average age given team? like looking average age position, weighted dynasty value. helps give better idea age team - including might looking offload older veteran!","code":"age_summary <- jml_values %>%    group_by(franchise_id,pos) %>%    mutate(position_value = sum(value_1qb,na.rm=TRUE)) %>%    ungroup() %>%    mutate(weighted_age = age*value_1qb/position_value,          weighted_age = round(weighted_age, 1)) %>%    group_by(franchise_id,franchise_name,pos) %>%    summarise(count = n(),             age = sum(weighted_age,na.rm = TRUE)) %>%    pivot_wider(names_from = pos,               values_from = c(age,count))  age_summary #> # A tibble: 12 × 12 #> # Groups:   franchise_id, franchise_name [12] #>    franchise_id franchise_name    age_QB age_RB age_TE age_WR age_FB count_QB #>    <chr>        <chr>              <dbl>  <dbl>  <dbl>  <dbl>  <dbl>    <int> #>  1 1            Fake News           29.8   27.7   27.5   29       NA        3 #>  2 10           JMLarkin            33.8   29.8   29.6   26.2      0        3 #>  3 11           Permian Panthers    27     26.1   34.3   26.6     NA        4 #>  4 12           jaydk               26.5   27     28.5   31.2     NA        4 #>  5 2            KingGabe            27.6   25.1   27.7   24.9     NA        5 #>  6 3            solarpool           27.2   28.3   29.3   31.1     NA        5 #>  7 4            The FANTom Menace   30.2   28.2   27.3   29.3     NA        5 #>  8 5            Barbarians          27.6   26     31.6   28       NA        2 #>  9 6            sox05syd            26.7   26.7   29.8   26.6     NA        3 #> 10 7            Flipadelphia05      35.4   28.3   27.7   30.1     NA        2 #> 11 8            Hocka Flocka        32.2   28.1   26.7   25.5     NA        3 #> 12 9            ZPMiller97          27.2   27.2   29.3   27.8     NA        3 #> # ℹ 4 more variables: count_RB <int>, count_TE <int>, count_WR <int>, #> #   count_FB <int>"},{"path":"https://ffscrapr.ffverse.com/articles/sleeper_basics.html","id":"next-steps","dir":"Articles","previous_headings":"","what":"Next steps","title":"Sleeper: Basics","text":"vignette, ’ve used ~three functions: ff_connect, ff_league, ff_rosters. Now ’ve gotten far, check possibilities?","code":""},{"path":"https://ffscrapr.ffverse.com/articles/sleeper_getendpoint.html","id":"creating-custom-sleeper-api-calls","dir":"Articles","previous_headings":"","what":"Creating custom Sleeper API calls","title":"Sleeper: Get Endpoint","text":"Sleeper API pretty extensive. something ’d like access ’s beyond current scope ffscrapr, can use lower-level “sleeper_getendpoint” function create GET request access data, still using authentication rate-limiting features ’ve already created. example can call one endpoints - case, let’s pull Sleeper’s trending players data! ’ll start opening page, https://docs.sleeper.com/#trending-players, documentation page particular endpoint. , can see Sleeper’s documentation says endpoint : https://api.sleeper.app/v1/players/<sport>/trending/<type>?lookback_hours=<hours>&limit=<int> first glance, can see takes two parameters within endpoint call (sport type) can adjust query HTTP parameters lookback_hours limit. sleeper_getendpoint function already https://api.sleeper.app/v1/ part encoded, ’ll need pass remaining part URL endpoint, pass HTTP parameters arguments function (case sensitive!) can use glue package parameterise , although can also use base R’s paste function just easily. Along parsed content, function also returns query response sent server. helpful debugging, can turn content dataframe careful application tidyverse. isn’t helpful without knowing players , let’s pull players endpoint well - one convenient function! - means something us now! writing (2020-11-10), Kalen Ballage added player. Haven’t bitten ?","code":"library(ffscrapr) library(dplyr) library(purrr) library(glue) type <- \"add\"  query <- glue::glue('players/nfl/trending/{type}')  query #> players/nfl/trending/add  response_trending <- sleeper_getendpoint(query,lookback_hours = 48, limit = 10) #> Using request.R from \"ffscrapr\"  str(response_trending, max.level = 1) #> List of 3 #>  $ content :List of 10 #>  $ query   : chr \"https://api.sleeper.app/v1/players/nfl/trending/add?lookback_hours=48&limit=10\" #>  $ response:List of 9 #>   ..- attr(*, \"class\")= chr \"response\" #>  - attr(*, \"class\")= chr \"sleeper_api\" df_trending <- response_trending %>%    purrr::pluck(\"content\") %>%    dplyr::bind_rows()  head(df_trending) #> # A tibble: 6 × 2 #>   player_id  count #>   <chr>      <int> #> 1 6820      521768 #> 2 2161      374758 #> 3 7045      235794 #> 4 3164      205688 #> 5 GB        203645 #> 6 HOU       154698 players <- sleeper_players() %>%    select(player_id, player_name, pos, team, age)  trending <- df_trending %>%    left_join(players, by = \"player_id\")  trending #> # A tibble: 10 × 6 #>    player_id  count player_name           pos   team    age #>    <chr>      <int> <chr>                 <chr> <chr> <dbl> #>  1 6820      521768 Clyde Edwards-Helaire RB    KC     24.9 #>  2 2161      374758 Jerick McKinnon       RB    KC     31.8 #>  3 7045      235794 Joshua Kelley         RB    LAC    26.3 #>  4 3164      205688 Ezekiel Elliott       RB    NE     28.6 #>  5 GB        203645 NA                    DEF   GB     NA   #>  6 HOU       154698 NA                    DEF   HOU    NA   #>  7 10235     140729 Roschon Johnson       RB    CHI    23.1 #>  8 9487      137447 Parker Washington     WR    JAX    22   #>  9 NO        132410 NA                    DEF   NO     NA   #> 10 4089      108768 Gerald Everett        TE    LAC    29.7"},{"path":"https://ffscrapr.ffverse.com/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Tan Ho. Author, maintainer. Tony ElHabr. Contributor. Joe Sydlowski. Contributor.","code":""},{"path":"https://ffscrapr.ffverse.com/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Ho T (2024). ffscrapr: API Client Fantasy Football League Platforms. R package version 1.4.8.17, https://github.com/ffverse/ffscrapr, https://ffscrapr.ffverse.com.","code":"@Manual{,   title = {ffscrapr: API Client for Fantasy Football League Platforms},   author = {Tan Ho},   year = {2024},   note = {R package version 1.4.8.17, https://github.com/ffverse/ffscrapr},   url = {https://ffscrapr.ffverse.com}, }"},{"path":"https://ffscrapr.ffverse.com/index.html","id":"ffscrapr-","dir":"","previous_headings":"","what":"ffscrapr • an R package for Fantasy Football APIs","title":"ffscrapr • an R package for Fantasy Football APIs","text":"R Client Fantasy Football League APIs Helps access various Fantasy Football APIs (currently MFL, Sleeper, Fleaflicker, ESPN - perhaps eventually Yahoo others) handling authentication/rate-limiting/caching, forming appropriate calls, returning tidy dataframes can easily connected data sources.","code":""},{"path":"https://ffscrapr.ffverse.com/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"ffscrapr • an R package for Fantasy Football APIs","text":"Install stable version package CRAN: Install development version either r-universe GitHub:","code":"install.packages(\"ffscrapr\") install.packages(\"ffscrapr\", repos = c(\"https://ffverse.r-universe.dev\", getOption(\"repos\")))  # pak is recommended, see https://github.com/r-lib/pak pak::pak(\"ffverse/ffscrapr\")  # can also use remotes remotes::install_github(\"ffverse/ffscrapr\")"},{"path":"https://ffscrapr.ffverse.com/index.html","id":"usage","dir":"","previous_headings":"","what":"Usage","title":"ffscrapr • an R package for Fantasy Football APIs","text":"ffscrapr functions start connection object created ff_connect(), stores connection, authentication, user-defined parameters. object used functions help return correct data. Platform-specific guides getting started ffscrapr : MyFantasyLeague Sleeper Fleaflicker ESPN also advanced guides custom API calls Articles section, well guides optimizing ffscrapr’s performance.","code":"library(ffscrapr) ssb <- ff_connect(platform = \"mfl\", league_id = \"54040\", season = 2020)  # Get a summary of league settings ff_league(ssb) %>% str() #> tibble [1 × 17] (S3: tbl_df/tbl/data.frame) #>  $ league_id        : chr \"54040\" #>  $ league_name      : chr \"The Super Smash Bros Dynasty League\" #>  $ season           : int 2020 #>  $ league_type      : chr NA #>  $ franchise_count  : num 14 #>  $ qb_type          : chr \"1QB\" #>  $ idp              : logi FALSE #>  $ scoring_flags    : chr \"0.5_ppr, TEPrem, PP1D\" #>  $ best_ball        : logi FALSE #>  $ salary_cap       : logi FALSE #>  $ player_copies    : num 1 #>  $ years_active     : chr \"2018-2021\" #>  $ qb_count         : chr \"1\" #>  $ roster_size      : num 33 #>  $ league_depth     : num 462 #>  $ draft_type       : chr \" email draft\" #>  $ draft_player_pool: chr \"Both\"  # Get rosters ff_rosters(ssb) #> # A tibble: 417 × 11 #>   franchise_id franchise_name player_id player_name     pos   team    age #>   <chr>        <chr>          <chr>     <chr>           <chr> <chr> <dbl> #> 1 0001         Team Pikachu   13189     Engram, Evan    TE    NYG    28.4 #> 2 0001         Team Pikachu   11680     Landry, Jarvis  WR    CLE    30.2 #> 3 0001         Team Pikachu   13645     Smith, Tre'Quan WR    NOS    27.1 #> 4 0001         Team Pikachu   12110     Brate, Cameron  TE    TBB    31.6 #> 5 0001         Team Pikachu   13168     Reynolds, Josh  WR    LAR    28   #> # … with 412 more rows, and 4 more variables: roster_status <chr>, #> #   drafted <chr>, draft_year <chr>, draft_round <chr> #> # ℹ Use `print(n = ...)` to see more rows, and `colnames()` to see all variable names  # Get transactions ff_transactions(ssb) #> # A tibble: 1,145 × 12 #>   timestamp           type  type_desc   franchise_id franchise_name #>   <dttm>              <chr> <chr>       <chr>        <chr>          #> 1 2021-02-12 14:32:39 TRADE traded_away 0008         Team Bowser    #> 2 2021-02-12 14:32:39 TRADE traded_for  0008         Team Bowser    #> 3 2021-02-12 14:32:39 TRADE traded_for  0008         Team Bowser    #> 4 2021-02-12 14:32:39 TRADE traded_for  0008         Team Bowser    #> 5 2021-02-12 14:32:39 TRADE traded_for  0008         Team Bowser    #> # … with 1,140 more rows, and 7 more variables: player_id <chr>, #> #   player_name <chr>, pos <chr>, team <chr>, bbid_spent <dbl>, #> #   trade_partner <chr>, comments <chr> #> # ℹ Use `print(n = ...)` to see more rows, and `colnames()` to see all variable names"},{"path":"https://ffscrapr.ffverse.com/index.html","id":"support","dir":"","previous_headings":"","what":"Support","title":"ffscrapr • an R package for Fantasy Football APIs","text":"best places get help package : nflverse discord (package well anything R/NFL related) opening issue","code":""},{"path":"https://ffscrapr.ffverse.com/index.html","id":"contributing","dir":"","previous_headings":"","what":"Contributing","title":"ffscrapr • an R package for Fantasy Football APIs","text":"Many hands make light work! ways can contribute project: can open issue ’d like request specific data report bug/error. can sponsor project donations! ’d like contribute code, please check contribution guidelines.","code":""},{"path":"https://ffscrapr.ffverse.com/index.html","id":"terms-of-use","dir":"","previous_headings":"","what":"Terms of Use","title":"ffscrapr • an R package for Fantasy Football APIs","text":"R code package released open source MIT license. APIs data accessed package belong respective owners, governed terms use.","code":""},{"path":"https://ffscrapr.ffverse.com/reference/clear_cache.html","id":null,"dir":"Reference","previous_headings":"","what":"Empty Function Cache — clear_cache","title":"Empty Function Cache — clear_cache","text":"function reset cache ffscrapr cached functions, well nflreadr's cached functions.","code":""},{"path":"https://ffscrapr.ffverse.com/reference/clear_cache.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Empty Function Cache — clear_cache","text":"","code":"clear_cache()"},{"path":"https://ffscrapr.ffverse.com/reference/dot-add_allplay.html","id":null,"dir":"Reference","previous_headings":"","what":"Add allplay from a standardised schedule output — .add_allplay","title":"Add allplay from a standardised schedule output — .add_allplay","text":"Add allplay standardised schedule output","code":""},{"path":"https://ffscrapr.ffverse.com/reference/dot-add_allplay.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Add allplay from a standardised schedule output — .add_allplay","text":"","code":".add_allplay(schedule)"},{"path":"https://ffscrapr.ffverse.com/reference/dot-add_allplay.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Add allplay from a standardised schedule output — .add_allplay","text":"schedule output ff_schedule","code":""},{"path":"https://ffscrapr.ffverse.com/reference/dot-as_date.html","id":null,"dir":"Reference","previous_headings":"","what":"date utils — .as_date","title":"date utils — .as_date","text":"date utils","code":""},{"path":"https://ffscrapr.ffverse.com/reference/dot-as_date.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"date utils — .as_date","text":"","code":".as_date(x)"},{"path":"https://ffscrapr.ffverse.com/reference/dot-as_datetime.html","id":null,"dir":"Reference","previous_headings":"","what":"date utils — .as_datetime","title":"date utils — .as_datetime","text":"date utils","code":""},{"path":"https://ffscrapr.ffverse.com/reference/dot-as_datetime.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"date utils — .as_datetime","text":"","code":".as_datetime(x)"},{"path":"https://ffscrapr.ffverse.com/reference/dot-espn_activity_map.html","id":null,"dir":"Reference","previous_headings":"","what":"ESPN Activity/Transaction Mapping — .espn_activity_map","title":"ESPN Activity/Transaction Mapping — .espn_activity_map","text":"ESPN Activity/Transaction Mapping","code":""},{"path":"https://ffscrapr.ffverse.com/reference/dot-espn_activity_map.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"ESPN Activity/Transaction Mapping — .espn_activity_map","text":"","code":".espn_activity_map()"},{"path":[]},{"path":"https://ffscrapr.ffverse.com/reference/dot-espn_lineupslot_map.html","id":null,"dir":"Reference","previous_headings":"","what":"ESPN Lineup Slot map — .espn_lineupslot_map","title":"ESPN Lineup Slot map — .espn_lineupslot_map","text":"starting lineup specifically - primary positions accessible via .espn_pos_map","code":""},{"path":"https://ffscrapr.ffverse.com/reference/dot-espn_lineupslot_map.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"ESPN Lineup Slot map — .espn_lineupslot_map","text":"","code":".espn_lineupslot_map()"},{"path":[]},{"path":"https://ffscrapr.ffverse.com/reference/dot-espn_pos_map.html","id":null,"dir":"Reference","previous_headings":"","what":"ESPN Primary Position map — .espn_pos_map","title":"ESPN Primary Position map — .espn_pos_map","text":"Decoded hand - IDP ESPN league please open GitHub issue pass along league info can expand .","code":""},{"path":"https://ffscrapr.ffverse.com/reference/dot-espn_pos_map.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"ESPN Primary Position map — .espn_pos_map","text":"","code":".espn_pos_map()"},{"path":"https://ffscrapr.ffverse.com/reference/dot-espn_stat_map.html","id":null,"dir":"Reference","previous_headings":"","what":"ESPN Stat ID map — .espn_stat_map","title":"ESPN Stat ID map — .espn_stat_map","text":"ESPN Stat ID map","code":""},{"path":"https://ffscrapr.ffverse.com/reference/dot-espn_stat_map.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"ESPN Stat ID map — .espn_stat_map","text":"","code":".espn_stat_map()"},{"path":[]},{"path":"https://ffscrapr.ffverse.com/reference/dot-espn_team_map.html","id":null,"dir":"Reference","previous_headings":"","what":"ESPN Team ID map — .espn_team_map","title":"ESPN Team ID map — .espn_team_map","text":"Opinionatedly conforming DynastyProcess standards, match MyFantasyLeague. Abbreviations consistently three letters.","code":""},{"path":"https://ffscrapr.ffverse.com/reference/dot-espn_team_map.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"ESPN Team ID map — .espn_team_map","text":"","code":".espn_team_map()"},{"path":[]},{"path":"https://ffscrapr.ffverse.com/reference/dot-fn_choose_season.html","id":null,"dir":"Reference","previous_headings":"","what":"Choose current season — .fn_choose_season","title":"Choose current season — .fn_choose_season","text":"helper function return current year March later, otherwise assume previous year","code":""},{"path":"https://ffscrapr.ffverse.com/reference/dot-fn_choose_season.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Choose current season — .fn_choose_season","text":"","code":".fn_choose_season(date = NULL)"},{"path":"https://ffscrapr.ffverse.com/reference/dot-fn_drop_nulls.html","id":null,"dir":"Reference","previous_headings":"","what":"Drop nulls from a list/vector — .fn_drop_nulls","title":"Drop nulls from a list/vector — .fn_drop_nulls","text":"Drop nulls list/vector","code":""},{"path":"https://ffscrapr.ffverse.com/reference/dot-fn_drop_nulls.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Drop nulls from a list/vector — .fn_drop_nulls","text":"","code":".fn_drop_nulls(x)"},{"path":"https://ffscrapr.ffverse.com/reference/dot-fn_set_ratelimit.html","id":null,"dir":"Reference","previous_headings":"","what":"Set rate limit — .fn_set_ratelimit","title":"Set rate limit — .fn_set_ratelimit","text":"helper function creates new copy httr::GET function stores .ffscrapr_env hidden object","code":""},{"path":"https://ffscrapr.ffverse.com/reference/dot-fn_set_ratelimit.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Set rate limit — .fn_set_ratelimit","text":"","code":".fn_set_ratelimit(toggle = TRUE, platform, rate_number, rate_seconds)"},{"path":"https://ffscrapr.ffverse.com/reference/dot-fn_set_ratelimit.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Set rate limit — .fn_set_ratelimit","text":"toggle logical turn rate_limiting TRUE FALSE rate_number number calls per rate_seconds rate_seconds number seconds","code":""},{"path":"https://ffscrapr.ffverse.com/reference/dot-fn_set_useragent.html","id":null,"dir":"Reference","previous_headings":"","what":"Set user agent — .fn_set_useragent","title":"Set user agent — .fn_set_useragent","text":"Self-identifying mostly polite, although MFL program give verified clients bandwidth! See: https://www03.myfantasyleague.com/2020/csetup?C=APICLI","code":""},{"path":"https://ffscrapr.ffverse.com/reference/dot-fn_set_useragent.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Set user agent — .fn_set_useragent","text":"","code":".fn_set_useragent(user_agent)"},{"path":"https://ffscrapr.ffverse.com/reference/dot-mfl_logincookie.html","id":null,"dir":"Reference","previous_headings":"","what":"Get MFL Login Cookie — .mfl_logincookie","title":"Get MFL Login Cookie — .mfl_logincookie","text":"Gets login cookie MFL based user_name/password Docs: https://api.myfantasyleague.com/2020/api_info#login_info","code":""},{"path":"https://ffscrapr.ffverse.com/reference/dot-mfl_logincookie.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get MFL Login Cookie — .mfl_logincookie","text":"","code":".mfl_logincookie(user_name, password, season)"},{"path":"https://ffscrapr.ffverse.com/reference/dot-mfl_logincookie.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get MFL Login Cookie — .mfl_logincookie","text":"user_name MFL user_name (string) password MFL password (string) season Season","code":""},{"path":"https://ffscrapr.ffverse.com/reference/dot-mfl_logincookie.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get MFL Login Cookie — .mfl_logincookie","text":"login cookie, included parameter httr GET request","code":""},{"path":"https://ffscrapr.ffverse.com/reference/dot-retry_get.html","id":null,"dir":"Reference","previous_headings":"","what":"Create RETRY version of GET — .retry_get","title":"Create RETRY version of GET — .retry_get","text":"wrapper httr retries httr::GET function based best-practice heuristics","code":""},{"path":"https://ffscrapr.ffverse.com/reference/dot-retry_get.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create RETRY version of GET — .retry_get","text":"","code":".retry_get(...)"},{"path":"https://ffscrapr.ffverse.com/reference/dot-retry_get.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create RETRY version of GET — .retry_get","text":"... arguments passed httr::GET","code":""},{"path":"https://ffscrapr.ffverse.com/reference/dot-retry_post.html","id":null,"dir":"Reference","previous_headings":"","what":"Create RETRY version of POST — .retry_post","title":"Create RETRY version of POST — .retry_post","text":"wrapper httr retries httr::POST function based best-practice heuristics.","code":""},{"path":"https://ffscrapr.ffverse.com/reference/dot-retry_post.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create RETRY version of POST — .retry_post","text":"","code":".retry_post(...)"},{"path":"https://ffscrapr.ffverse.com/reference/dot-retry_post.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create RETRY version of POST — .retry_post","text":"... arguments passed httr::POST","code":""},{"path":"https://ffscrapr.ffverse.com/reference/dot-sleeper_matchup.html","id":null,"dir":"Reference","previous_headings":"","what":"Individual sleeper matchup — .sleeper_matchup","title":"Individual sleeper matchup — .sleeper_matchup","text":"Individual sleeper matchup","code":""},{"path":"https://ffscrapr.ffverse.com/reference/dot-sleeper_matchup.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Individual sleeper matchup — .sleeper_matchup","text":"","code":".sleeper_matchup(week, conn, last_scored_week)"},{"path":"https://ffscrapr.ffverse.com/reference/dot-sleeper_userid.html","id":null,"dir":"Reference","previous_headings":"","what":"Get Sleeper User ID — .sleeper_userid","title":"Get Sleeper User ID — .sleeper_userid","text":"Docs: https://docs.sleeper.com","code":""},{"path":"https://ffscrapr.ffverse.com/reference/dot-sleeper_userid.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get Sleeper User ID — .sleeper_userid","text":"","code":".sleeper_userid(user_name)"},{"path":"https://ffscrapr.ffverse.com/reference/dot-sleeper_userid.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get Sleeper User ID — .sleeper_userid","text":"user_name Sleeper username","code":""},{"path":"https://ffscrapr.ffverse.com/reference/dot-sleeper_userid.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get Sleeper User ID — .sleeper_userid","text":"sleeper userID","code":""},{"path":"https://ffscrapr.ffverse.com/reference/dp_clean_html.html","id":null,"dir":"Reference","previous_headings":"","what":"Remove HTML from string — dp_clean_html","title":"Remove HTML from string — dp_clean_html","text":"Applies regex clean html tags strings. useful platforms MFL interpret HTML franchise name fields.","code":""},{"path":"https://ffscrapr.ffverse.com/reference/dp_clean_html.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Remove HTML from string — dp_clean_html","text":"","code":"dp_clean_html(names)"},{"path":"https://ffscrapr.ffverse.com/reference/dp_clean_html.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Remove HTML from string — dp_clean_html","text":"names character (character vector)","code":""},{"path":"https://ffscrapr.ffverse.com/reference/dp_clean_html.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Remove HTML from string — dp_clean_html","text":"character vector cleaned strings","code":""},{"path":"https://ffscrapr.ffverse.com/reference/dp_clean_html.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Remove HTML from string — dp_clean_html","text":"","code":"c(   \"<b><font color= Cyan>Kevin OBrien (@kevinobrienff) <\/FONT><\/B>\",   \"<em><font color= Purple> Other fun names<\/font><\/em>\" ) %>% dp_clean_html() #> [1] \"Kevin OBrien (@kevinobrienff)\" \"Other fun names\""},{"path":"https://ffscrapr.ffverse.com/reference/dp_clean_names.html","id":null,"dir":"Reference","previous_headings":"","what":"Clean Player Names — dp_clean_names","title":"Clean Player Names — dp_clean_names","text":"Applies name-cleaning heuristics facilitate joins. heuristics may include: removing periods apostrophes removing common suffixes, Jr, Sr, II, III, IV converting lowercase using ffscrapr::dp_name_mapping common name substitutions, Mitch Trubisky Mitchell Trubisky","code":""},{"path":"https://ffscrapr.ffverse.com/reference/dp_clean_names.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Clean Player Names — dp_clean_names","text":"","code":"dp_clean_names(...)  dp_cleannames(...)"},{"path":"https://ffscrapr.ffverse.com/reference/dp_clean_names.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Clean Player Names — dp_clean_names","text":"... Arguments passed nflreadr::clean_player_names player_name character vector player names lowercase defaults FALSE - TRUE, converts lowercase convert_lastfirst defaults TRUE - converts names \"Last, First\" \"First Last\" use_name_database uses internal name database common substitutions (Mitchell Trubisky Mitch Trubisky etc)","code":""},{"path":"https://ffscrapr.ffverse.com/reference/dp_clean_names.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Clean Player Names — dp_clean_names","text":"character vector cleaned names","code":""},{"path":"https://ffscrapr.ffverse.com/reference/dp_clean_names.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Clean Player Names — dp_clean_names","text":"Equivalent operation done ffscrapr::dp_clean_names() uses player name database.","code":""},{"path":[]},{"path":"https://ffscrapr.ffverse.com/reference/dp_clean_names.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Clean Player Names — dp_clean_names","text":"","code":"# \\donttest{  dp_cleannames(c(\"A.J. Green\", \"Odell Beckham Jr.\", \"Le'Veon Bell Sr.\")) #> Warning: `dp_clean_names()` was deprecated in ffscrapr 1.4.8. #> ℹ Please use `nflreadr::clean_player_names()` instead. #> [1] \"AJ Green\"      \"Odell Beckham\" \"LeVeon Bell\"    dp_cleannames(c(\"Trubisky, Mitch\", \"Atwell, Chatarius\", \"Elliott, Zeke\", \"Elijah Moore\"),   convert_lastfirst = TRUE,   use_name_database = TRUE ) #> [1] \"Mitchell Trubisky\" \"Tutu Atwell\"       \"Ezekiel Elliott\"   #> [4] \"Elijah Moore\"      # }"},{"path":"https://ffscrapr.ffverse.com/reference/dp_playerids.html","id":null,"dir":"Reference","previous_headings":"","what":"Import latest DynastyProcess player IDs — dp_playerids","title":"Import latest DynastyProcess player IDs — dp_playerids","text":"Fetches copy latest DynastyProcess player IDs csv","code":""},{"path":"https://ffscrapr.ffverse.com/reference/dp_playerids.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Import latest DynastyProcess player IDs — dp_playerids","text":"","code":"dp_playerids()"},{"path":"https://ffscrapr.ffverse.com/reference/dp_playerids.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Import latest DynastyProcess player IDs — dp_playerids","text":"tibble player IDs","code":""},{"path":[]},{"path":"https://ffscrapr.ffverse.com/reference/dp_playerids.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Import latest DynastyProcess player IDs — dp_playerids","text":"","code":"# \\donttest{ try( # try only shown here because sometimes CRAN checks are weird   dp_playerids() ) #> # A tibble: 11,409 × 35 #>    mfl_id sportradar_id  fantasypros_id gsis_id pff_id sleeper_id nfl_id espn_id #>    <chr>  <chr>          <chr>          <chr>   <chr>  <chr>      <chr>  <chr>   #>  1 15702  93147c90-09c8… 24740          00-003… NA     9230       NA     NA      #>  2 16148  38475bfa-9773… 22900          00-003… NA     9228       NA     NA      #>  3 16149  4c8a2f7e-f982… 22987          00-003… NA     9999       NA     NA      #>  4 16150  7e91086f-9ca4… 23071          00-003… NA     9758       NA     NA      #>  5 16151  25b10007-802d… 24332          00-003… NA     9998       NA     NA      #>  6 16152  5fc5b4a6-a583… 24347          00-003… NA     9229       NA     NA      #>  7 16153  a5cc5958-01f9… 23927          00-003… NA     10857      NA     NA      #>  8 16154  84ba4cc6-8740… 24073          00-003… NA     9231       NA     NA      #>  9 16155  a7ef9eec-dab5… 23121          00-003… NA     10233      NA     NA      #> 10 16156  70376919-8220… 24728          00-003… NA     10215      NA     NA      #> # ℹ 11,399 more rows #> # ℹ 27 more variables: yahoo_id <chr>, fleaflicker_id <chr>, cbs_id <chr>, #> #   pfr_id <chr>, cfbref_id <chr>, rotowire_id <chr>, rotoworld_id <chr>, #> #   ktc_id <chr>, stats_id <chr>, stats_global_id <chr>, fantasy_data_id <chr>, #> #   swish_id <chr>, name <chr>, merge_name <chr>, position <chr>, team <chr>, #> #   birthdate <chr>, age <dbl>, draft_year <int>, draft_round <int>, #> #   draft_pick <int>, draft_ovr <int>, twitter_username <chr>, height <int>, … # }"},{"path":"https://ffscrapr.ffverse.com/reference/dp_values.html","id":null,"dir":"Reference","previous_headings":"","what":"Import latest DynastyProcess values — dp_values","title":"Import latest DynastyProcess values — dp_values","text":"Fetches copy latest DynastyProcess dynasty trade values sheets","code":""},{"path":"https://ffscrapr.ffverse.com/reference/dp_values.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Import latest DynastyProcess values — dp_values","text":"","code":"dp_values(file = c(\"values.csv\", \"values-players.csv\", \"values-picks.csv\"))"},{"path":"https://ffscrapr.ffverse.com/reference/dp_values.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Import latest DynastyProcess values — dp_values","text":"file one c(\"values.csv\",\"values-players.csv\",\"values-picks.csv\")","code":""},{"path":"https://ffscrapr.ffverse.com/reference/dp_values.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Import latest DynastyProcess values — dp_values","text":"tibble trade values DynastyProcess","code":""},{"path":[]},{"path":"https://ffscrapr.ffverse.com/reference/dp_values.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Import latest DynastyProcess values — dp_values","text":"","code":"# \\donttest{ try( # try only shown here because sometimes CRAN checks are weird   dp_values() ) #> # A tibble: 709 × 12 #>    player         pos   team    age draft_year ecr_1qb ecr_2qb ecr_pos value_1qb #>    <chr>          <chr> <chr> <dbl>      <int>   <dbl>   <dbl>   <dbl>     <int> #>  1 Justin Jeffer… WR    MIN    24.7       2020     1.3     5.3     1.2     10184 #>  2 CeeDee Lamb    WR    DAL    24.8       2020     2.9     7.9     2.7      9808 #>  3 Ja'Marr Chase  WR    CIN    23.9       2021     3       7.9     2.2      9785 #>  4 Bijan Robinson RB    ATL    22         2023     4.7    11.7     1.5      9402 #>  5 Amon-Ra St. B… WR    DET    24.3       2021     5.3    12.2     4.2      9270 #>  6 Breece Hall    RB    NYJ    22.7       2022     6.1    13.9     2        9098 #>  7 Christian McC… RB    SF     27.7       2017     8.3    17.6     3.4      8639 #>  8 Jahmyr Gibbs   RB    DET    21.9       2023     8.3    16.8     3.4      8639 #>  9 Marvin Harris… WR    FA     NA           NA     9.2    18.6     6.4      8459 #> 10 A.J. Brown     WR    PHI    26.6       2019    10.2    19.3     6        8262 #> # ℹ 699 more rows #> # ℹ 3 more variables: value_2qb <int>, scrape_date <chr>, fp_id <chr> # }"},{"path":"https://ffscrapr.ffverse.com/reference/espn_connect.html","id":null,"dir":"Reference","previous_headings":"","what":"Connect to ESPN League — espn_connect","title":"Connect to ESPN League — espn_connect","text":"function creates connection object stores parameters user ID available.","code":""},{"path":"https://ffscrapr.ffverse.com/reference/espn_connect.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Connect to ESPN League — espn_connect","text":"","code":"espn_connect(   season = NULL,   league_id = NULL,   swid = NULL,   espn_s2 = NULL,   user_agent = NULL,   rate_limit = TRUE,   rate_limit_number = NULL,   rate_limit_seconds = NULL,   ... )"},{"path":"https://ffscrapr.ffverse.com/reference/espn_connect.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Connect to ESPN League — espn_connect","text":"season Season access Fleaflicker - missing, guess based system date (current year March later, otherwise previous year) league_id League ID swid SWID parameter accessing private leagues - see vignette details espn_s2 ESPN_S2 parameter accessing private leagues - see vignette details user_agent User agent self-identify (optional) rate_limit TRUE default - turn rate limiting FALSE rate_limit_number number calls per rate_limit_seconds, suggested 1000 calls per 60 seconds rate_limit_seconds number seconds denominator rate_limit ... arguments (methods, R compat)","code":""},{"path":"https://ffscrapr.ffverse.com/reference/espn_connect.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Connect to ESPN League — espn_connect","text":"list stores ESPN connection objects","code":""},{"path":"https://ffscrapr.ffverse.com/reference/espn_connect.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Connect to ESPN League — espn_connect","text":"","code":"# \\donttest{ conn <- espn_connect(   season = 2018,   league_id = 1178049,   espn_s2 = Sys.getenv(\"TAN_ESPN_S2\"),   swid = Sys.getenv(\"TAN_SWID\") ) # }"},{"path":"https://ffscrapr.ffverse.com/reference/espn_getendpoint.html","id":null,"dir":"Reference","previous_headings":"","what":"GET ESPN fantasy league endpoint — espn_getendpoint","title":"GET ESPN fantasy league endpoint — espn_getendpoint","text":"function used call ESPN Fantasy API league-based endpoints.","code":""},{"path":"https://ffscrapr.ffverse.com/reference/espn_getendpoint.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"GET ESPN fantasy league endpoint — espn_getendpoint","text":"","code":"espn_getendpoint(conn, ..., x_fantasy_filter = NULL)"},{"path":"https://ffscrapr.ffverse.com/reference/espn_getendpoint.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"GET ESPN fantasy league endpoint — espn_getendpoint","text":"conn connection object created espn_connect ff_connect() ... Arguments passed \"argumentname = argument\" HTTP query parameter x_fantasy_filter JSON-encoded character string specifies filter data","code":""},{"path":"https://ffscrapr.ffverse.com/reference/espn_getendpoint.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"GET ESPN fantasy league endpoint — espn_getendpoint","text":"list object containing query, response, parsed content.","code":""},{"path":"https://ffscrapr.ffverse.com/reference/espn_getendpoint.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"GET ESPN fantasy league endpoint — espn_getendpoint","text":"ESPN Fantasy API undocumented used advanced users familiar API. chooses correct league endpoint based year (eg leagueHistory <2018), checks x_fantasy_filter valid JSON input, builds url optional query parameters, executes request authentication rate limiting. HTTP query parameters (.e. arguments ...) Case Sensitive. Please see vignette usage.","code":""},{"path":[]},{"path":"https://ffscrapr.ffverse.com/reference/espn_getendpoint_raw.html","id":null,"dir":"Reference","previous_headings":"","what":"GET ESPN endpoint (raw) — espn_getendpoint_raw","title":"GET ESPN endpoint (raw) — espn_getendpoint_raw","text":"function lower-level function powers API call: takes URL headers executes http request rate-limiting authentication. checks JSON return warnings/errors, parses json, returns espn_api object parsed content, raw response, actual query.","code":""},{"path":"https://ffscrapr.ffverse.com/reference/espn_getendpoint_raw.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"GET ESPN endpoint (raw) — espn_getendpoint_raw","text":"","code":"espn_getendpoint_raw(conn, url_query, ...)"},{"path":"https://ffscrapr.ffverse.com/reference/espn_getendpoint_raw.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"GET ESPN endpoint (raw) — espn_getendpoint_raw","text":"conn connection object created ff_connect equivalent - used authentication url_query fully-formed URL call ... headers httr request objects pass along","code":""},{"path":"https://ffscrapr.ffverse.com/reference/espn_getendpoint_raw.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"GET ESPN endpoint (raw) — espn_getendpoint_raw","text":"object class espn_api parsed content, request, response","code":""},{"path":[]},{"path":"https://ffscrapr.ffverse.com/reference/espn_players.html","id":null,"dir":"Reference","previous_headings":"","what":"ESPN players library — espn_players","title":"ESPN players library — espn_players","text":"cached table ESPN NFL players. store memory session! (via memoise zzz.R)","code":""},{"path":"https://ffscrapr.ffverse.com/reference/espn_players.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"ESPN players library — espn_players","text":"","code":"espn_players(conn = NULL, season = NULL)"},{"path":"https://ffscrapr.ffverse.com/reference/espn_players.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"ESPN players library — espn_players","text":"conn connection object created espn_connect ff_connect() season season fetch","code":""},{"path":"https://ffscrapr.ffverse.com/reference/espn_players.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"ESPN players library — espn_players","text":"dataframe containing ~2000+ active players ESPN database","code":""},{"path":"https://ffscrapr.ffverse.com/reference/espn_players.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"ESPN players library — espn_players","text":"","code":"# \\donttest{ try({ # try only shown here because sometimes CRAN checks are weird    conn <- espn_connect(season = 2020, league_id = 1178049)    espn_players(conn, season = 2020) }) # end try #> # A tibble: 2,656 × 5 #>    player_id player_name          pos   eligible_pos team  #>        <int> <chr>                <chr> <list>       <chr> #>  1   4029893 Antonio Gandy-Golden WR    <chr [8]>    WAS   #>  2   3915196 D'Andre Walker       DE    <chr [6]>    FA    #>  3   2588098 Tye Smith            CB    <chr [5]>    TEN   #>  4   3915190 Jayson Stanley       CB    <chr [5]>    SEA   #>  5   3915189 Roquan Smith         LB    <chr [4]>    CHI   #>  6     15773 Darren Fells         TE    <chr [6]>    HOU   #>  7   3128774 Kalen Ballage        RB    <chr [6]>    LAC   #>  8     15782 Chris Banjo          S     <chr [5]>    ARI   #>  9   3915186 Chauncey Rivers      DE    <chr [6]>    BAL   #> 10     15785 Ezekiel Ansah        DE    <chr [6]>    SFO   #> # ℹ 2,646 more rows # }"},{"path":"https://ffscrapr.ffverse.com/reference/espn_potentialpoints.html","id":null,"dir":"Reference","previous_headings":"","what":"ESPN Potential Points — espn_potentialpoints","title":"ESPN Potential Points — espn_potentialpoints","text":"function calculates optimal starters given week, using lineup heuristics.","code":""},{"path":"https://ffscrapr.ffverse.com/reference/espn_potentialpoints.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"ESPN Potential Points — espn_potentialpoints","text":"","code":"espn_potentialpoints(conn, weeks = 1:17)"},{"path":"https://ffscrapr.ffverse.com/reference/espn_potentialpoints.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"ESPN Potential Points — espn_potentialpoints","text":"conn list object created ff_connect() weeks numeric vector determining weeks calculate","code":""},{"path":"https://ffscrapr.ffverse.com/reference/espn_potentialpoints.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"ESPN Potential Points — espn_potentialpoints","text":"tibble best lineup team whether started ","code":""},{"path":"https://ffscrapr.ffverse.com/reference/espn_potentialpoints.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"ESPN Potential Points — espn_potentialpoints","text":"","code":"# \\donttest{ try({ # try only shown here because sometimes CRAN checks are weird   conn <- espn_connect(season = 2021, league_id = 950665)   espn_potentialpoints(conn, weeks = 1) }) # end try #> # A tibble: 298 × 11 #>     week franchise_id franchise_name    franchise_score optimal_slot actual_slot #>    <int>        <int> <chr>                       <dbl> <chr>        <chr>       #>  1     1            1 Herberts are  T-…            100. QB           BE          #>  2     1            1 Herberts are  T-…            100. RB           BE          #>  3     1            1 Herberts are  T-…            100. RB           RB          #>  4     1            1 Herberts are  T-…            100. WR           BE          #>  5     1            1 Herberts are  T-…            100. WR           WR          #>  6     1            1 Herberts are  T-…            100. TE           TE          #>  7     1            1 Herberts are  T-…            100. RB/WR/TE     WR          #>  8     1            1 Herberts are  T-…            100. RB/WR/TE     RB/WR/TE    #>  9     1            1 Herberts are  T-…            100. OP           BE          #> 10     1            1 Herberts are  T-…            100. DST          DST         #> # ℹ 288 more rows #> # ℹ 5 more variables: player_score <dbl>, player_name <chr>, player_pos <chr>, #> #   team <chr>, player_id <int> # }"},{"path":"https://ffscrapr.ffverse.com/reference/ff_connect.html","id":null,"dir":"Reference","previous_headings":"","what":"Connect to a League — ff_connect","title":"Connect to a League — ff_connect","text":"function creates connection object stores parameters gets login-cookie available - passing arguments appropriate league-based handler.","code":""},{"path":"https://ffscrapr.ffverse.com/reference/ff_connect.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Connect to a League — ff_connect","text":"","code":"ff_connect(platform = \"mfl\", league_id = NULL, ...)"},{"path":"https://ffscrapr.ffverse.com/reference/ff_connect.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Connect to a League — ff_connect","text":"platform one MFL Sleeper (Fleaflicker, ESPN, Yahoo approximate priority order going forward) league_id league_id (currently assuming one league time) ... parameters passed connect function specific platform.","code":""},{"path":"https://ffscrapr.ffverse.com/reference/ff_connect.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Connect to a League — ff_connect","text":"connection object used ff_* functions","code":""},{"path":[]},{"path":"https://ffscrapr.ffverse.com/reference/ff_connect.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Connect to a League — ff_connect","text":"","code":"# \\donttest{ ff_connect(platform = \"mfl\", season = 2019, league_id = 54040, rate_limit = FALSE) #> <MFL connection 2019_54040> #> List of 5 #>  $ platform   : chr \"MFL\" #>  $ season     : num 2019 #>  $ league_id  : chr \"54040\" #>  $ APIKEY     : NULL #>  $ auth_cookie: NULL #>  - attr(*, \"class\")= chr \"mfl_conn\" # }"},{"path":"https://ffscrapr.ffverse.com/reference/ff_draft.html","id":null,"dir":"Reference","previous_headings":"","what":"Get Draft Results — ff_draft","title":"Get Draft Results — ff_draft","text":"function gets tidy dataframe draft results current year. Can handle MFL devy drafts startup drafts specifying custom_players argument","code":""},{"path":"https://ffscrapr.ffverse.com/reference/ff_draft.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get Draft Results — ff_draft","text":"","code":"ff_draft(conn, ...)  # S3 method for espn_conn ff_draft(conn, ...)  # S3 method for flea_conn ff_draft(conn, ...)  # S3 method for mfl_conn ff_draft(conn, custom_players = deprecated(), ...)  # S3 method for sleeper_conn ff_draft(conn, ...)"},{"path":"https://ffscrapr.ffverse.com/reference/ff_draft.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get Draft Results — ff_draft","text":"conn conn object created ff_connect() ... args methods custom_players - now returns custom players default","code":""},{"path":"https://ffscrapr.ffverse.com/reference/ff_draft.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get Draft Results — ff_draft","text":"tidy dataframe draft results","code":""},{"path":"https://ffscrapr.ffverse.com/reference/ff_draft.html","id":"methods-by-class-","dir":"Reference","previous_headings":"","what":"Methods (by class)","title":"Get Draft Results — ff_draft","text":"ff_draft(espn_conn): ESPN: returns current year's draft/auction, including details keepers ff_draft(flea_conn): Fleaflicker: returns table drafts current year ff_draft(mfl_conn): MFL: returns table drafts current year - can handle devy/startup-rookie-picks specifying custom_players (slower!) ff_draft(sleeper_conn): Sleeper: returns dataframe drafts draft selections, available.","code":""},{"path":"https://ffscrapr.ffverse.com/reference/ff_draft.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get Draft Results — ff_draft","text":"","code":"# \\donttest{ try({ # try only shown here because sometimes CRAN checks are weird   conn <- espn_connect(season = 2020, league_id = 899513)   ff_draft(conn) }) # end try #> # A tibble: 220 × 21 #>    round  pick overall franchise_id franchise_name       user_nickname player_id #>    <int> <int>   <int>        <int> <chr>                <chr>             <int> #>  1     1     1       1            9 \"RAFI CUNADO\"        Brandon11598    3120348 #>  2     1     2       2            5 \"The Juggernaut\"     longhorn0010    4047646 #>  3     1     3       3            1 \"The Early GGod\"     dachosenJuan…   2977644 #>  4     1     4       4            4 \"I'm Also Sad \"      Ciavalen5th     3121422 #>  5     1     5       5            8 \"Big Coomers\"        Zarkoa           -16033 #>  6     1     6       6            3 \"PAKI STANS\"         erodriguezk     3122840 #>  7     1     7       7            2 \"Coom  Dumpster\"     mfespinosaIV      16800 #>  8     1     8       8            6 \"OBJ's Personal Por… drake iz yoda     15683 #>  9     1     9       9           10 \"Austin 🐐Drew Lock… espn14856151      14880 #> 10     1    10      10            7 \"Tony El Tigre\"      anthon8821581   2573079 #> # ℹ 210 more rows #> # ℹ 14 more variables: player_name <chr>, pos <chr>, team <chr>, #> #   bid_amount <int>, nominating_team_id <int>, is_keeper <lgl>, #> #   can_keeper <lgl>, autodraft_type <int>, complete_date <dttm>, #> #   in_progress <lgl>, pick_id <int>, drafted <lgl>, lineupSlotId <int>, #> #   tradeLocked <lgl> # }  # \\donttest{ try({ # try only shown here because sometimes CRAN checks are weird   conn <- fleaflicker_connect(season = 2020, league_id = 206154)   ff_draft(conn) }) # end try #> # A tibble: 80 × 9 #>    round  pick overall franchise_id franchise_name   player_id player_name pos   #>    <int> <int>   <int>        <int> <chr>                <int> <chr>       <chr> #>  1     1     1       1      1373970 Bamenda Herd         15539 Clyde Edwa… RB    #>  2     1     2       2      1374252 Central City Cr…     15604 Jonathan T… RB    #>  3     1     3       3      1373991 Top City Terrors     15523 CeeDee Lamb WR    #>  4     1     4       4      1374315 Shanghai Commun…     15555 J.K. Dobbi… RB    #>  5     1     5       5      1374271 Clutch City Bal…     15601 D'Andre Sw… RB    #>  6     1     6       6      1374271 Clutch City Bal…     15563 Cam Akers   RB    #>  7     1     7       7      1373883 Manitoba Marmots     15540 Justin Jef… WR    #>  8     1     8       8      1373973 Red River Land …     15544 Jerry Jeudy WR    #>  9     1     9       9      1374271 Clutch City Bal…     15537 Chase Young EDR   #> 10     1    10      10      1373535 Winterthur Angr…     15620 Ke'Shawn V… RB    #> # ℹ 70 more rows #> # ℹ 1 more variable: team <chr> # }  # \\donttest{ try({ # try only shown here because sometimes CRAN checks are weird   ssb_conn <- ff_connect(platform = \"mfl\", league_id = 54040, season = 2020)   ff_draft(ssb_conn) }) # end try #> # A tibble: 90 × 11 #>    timestamp           round pick  overall franchise_id franchise_name player_id #>    <dttm>              <chr> <chr>   <int> <chr>        <chr>          <chr>     #>  1 2021-02-08 18:52:22 01    01          1 0014         Team Luigi     11244     #>  2 2021-02-08 19:20:07 01    02          2 0003         Team Donkey K… 14073     #>  3 2021-02-08 20:01:16 01    03          3 0008         Team Bowser    11678     #>  4 2021-02-08 20:01:30 02    01          4 0008         Team Bowser    13131     #>  5 2021-02-08 20:12:30 02    02          5 0003         Team Donkey K… 11671     #>  6 2021-02-09 02:55:39 02    03          6 0012         Team Mewtwo    13593     #>  7 2021-02-09 03:09:50 03    01          7 0014         Team Luigi     0829      #>  8 2021-02-09 03:12:44 03    02          8 0003         Team Donkey K… 11222     #>  9 2021-02-09 03:22:50 03    03          9 0008         Team Bowser    14208     #> 10 2021-02-09 03:23:01 04    01         10 0008         Team Bowser    13156     #> # ℹ 80 more rows #> # ℹ 4 more variables: player_name <chr>, pos <chr>, age <dbl>, team <chr> # }  # \\donttest{ try({ # try only shown here because sometimes CRAN checks are weird   jml_conn <- ff_connect(platform = \"sleeper\", league_id = \"522458773317046272\", season = 2020)   ff_draft(jml_conn) }) # end try #> # A tibble: 48 × 13 #>    draft_id          status type  season round  pick franchise_id franchise_name #>    <chr>             <chr>  <chr> <chr>  <int> <int>        <int> <chr>          #>  1 5224587733212405… compl… line… 2020       1     1            4 The FANTom Me… #>  2 5224587733212405… compl… line… 2020       1     2            5 Barbarians     #>  3 5224587733212405… compl… line… 2020       1     3           11 Permian Panth… #>  4 5224587733212405… compl… line… 2020       1     4            2 KingGabe       #>  5 5224587733212405… compl… line… 2020       1     5            8 Hocka Flocka   #>  6 5224587733212405… compl… line… 2020       1     6            2 KingGabe       #>  7 5224587733212405… compl… line… 2020       1     7            2 KingGabe       #>  8 5224587733212405… compl… line… 2020       1     8            2 KingGabe       #>  9 5224587733212405… compl… line… 2020       1     9            6 sox05syd       #> 10 5224587733212405… compl… line… 2020       1    10            9 ZPMiller97     #> # ℹ 38 more rows #> # ℹ 5 more variables: player_id <chr>, player_name <chr>, pos <chr>, age <dbl>, #> #   team <chr> # }"},{"path":"https://ffscrapr.ffverse.com/reference/ff_draftpicks.html","id":null,"dir":"Reference","previous_headings":"","what":"Get Draft Picks — ff_draftpicks","title":"Get Draft Picks — ff_draftpicks","text":"Returns draft picks (current future) belong specific franchise yet converted players (.e. selected.)","code":""},{"path":"https://ffscrapr.ffverse.com/reference/ff_draftpicks.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get Draft Picks — ff_draftpicks","text":"","code":"ff_draftpicks(conn, ...)  # S3 method for espn_conn ff_draftpicks(conn, ...)  # S3 method for flea_conn ff_draftpicks(conn, franchise_id = NULL, ...)  # S3 method for mfl_conn ff_draftpicks(conn, ...)  # S3 method for sleeper_conn ff_draftpicks(conn, ...)"},{"path":"https://ffscrapr.ffverse.com/reference/ff_draftpicks.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get Draft Picks — ff_draftpicks","text":"conn list object created ff_connect() ... arguments (currently unused) franchise_id list franchise IDs pull, NULL return franchise IDs","code":""},{"path":"https://ffscrapr.ffverse.com/reference/ff_draftpicks.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get Draft Picks — ff_draftpicks","text":"Returns dataframe current future draft picks franchise","code":""},{"path":"https://ffscrapr.ffverse.com/reference/ff_draftpicks.html","id":"methods-by-class-","dir":"Reference","previous_headings":"","what":"Methods (by class)","title":"Get Draft Picks — ff_draftpicks","text":"ff_draftpicks(espn_conn): ESPN: support future/draft pick trades - draft results, please use ff_draft. ff_draftpicks(flea_conn): Fleaflicker: retrieves current future draft picks, potentially specified team. ff_draftpicks(mfl_conn): MFL: returns current future picks ff_draftpicks(sleeper_conn): Sleeper: retrieves current future draft picks","code":""},{"path":"https://ffscrapr.ffverse.com/reference/ff_draftpicks.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get Draft Picks — ff_draftpicks","text":"","code":"# \\donttest{ try({ # try only shown here because sometimes CRAN checks are weird   conn <- espn_connect(     season = 2018,     league_id = 1178049,     espn_s2 = Sys.getenv(\"TAN_ESPN_S2\"),     swid = Sys.getenv(\"TAN_SWID\")   )    ff_draftpicks(conn) }) # end try #> Warning: ESPN does not support draft pick trades. For draft results, please use ff_draft() #> NULL # }  # \\donttest{ try({ # try only shown here because sometimes CRAN checks are weird   conn <- fleaflicker_connect(2020, 206154)   ff_draftpicks(conn, franchise_id = 1373475) }) # end try # }  # \\donttest{ try({ # try only shown here because sometimes CRAN checks are weird   dlf_conn <- mfl_connect(2020, league_id = 37920)   ff_draftpicks(conn = dlf_conn) }) # end try #> # A tibble: 80 × 5 #>    season franchise_id franchise_name round original_franchise_id #>     <dbl> <chr>        <chr>          <dbl> <chr>                 #>  1   2021 0001         @dibari22          1 0001                  #>  2   2021 0001         @dibari22          2 0001                  #>  3   2021 0001         @dibari22          3 0001                  #>  4   2021 0001         @dibari22          5 0001                  #>  5   2021 0001         @dibari22          2 0009                  #>  6   2021 0002         OPEN               1 0002                  #>  7   2021 0002         OPEN               2 0002                  #>  8   2021 0002         OPEN               3 0002                  #>  9   2021 0002         OPEN               4 0002                  #> 10   2021 0002         OPEN               5 0002                  #> # ℹ 70 more rows # }  # \\donttest{ try({ # try only shown here because sometimes CRAN checks are weird   jml_conn <- ff_connect(platform = \"sleeper\", league_id = \"522458773317046272\", season = 2020)   ff_draftpicks(jml_conn) }) # end try #> # A tibble: 144 × 5 #>    season franchise_id franchise_name round original_franchise_id #>    <chr>         <int> <chr>          <int>                 <int> #>  1 2021              1 Fake News          3                     1 #>  2 2021              1 Fake News          4                     1 #>  3 2022              1 Fake News          2                     1 #>  4 2022              1 Fake News          3                     1 #>  5 2022              1 Fake News          4                     1 #>  6 2023              1 Fake News          1                     1 #>  7 2023              1 Fake News          2                     1 #>  8 2023              1 Fake News          3                     1 #>  9 2023              1 Fake News          4                     1 #> 10 2021              2 KingGabe           1                     2 #> # ℹ 134 more rows # }"},{"path":"https://ffscrapr.ffverse.com/reference/ff_franchises.html","id":null,"dir":"Reference","previous_headings":"","what":"Get League Franchises — ff_franchises","title":"Get League Franchises — ff_franchises","text":"Return franchise-level data (including divisions, usernames, etc) - available data may vary slightly based platform.","code":""},{"path":"https://ffscrapr.ffverse.com/reference/ff_franchises.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get League Franchises — ff_franchises","text":"","code":"ff_franchises(conn)  # S3 method for espn_conn ff_franchises(conn)  # S3 method for flea_conn ff_franchises(conn)  # S3 method for mfl_conn ff_franchises(conn)  # S3 method for sleeper_conn ff_franchises(conn)"},{"path":"https://ffscrapr.ffverse.com/reference/ff_franchises.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get League Franchises — ff_franchises","text":"conn conn object created ff_connect()","code":""},{"path":"https://ffscrapr.ffverse.com/reference/ff_franchises.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get League Franchises — ff_franchises","text":"tidy dataframe franchises, complete IDs","code":""},{"path":"https://ffscrapr.ffverse.com/reference/ff_franchises.html","id":"methods-by-class-","dir":"Reference","previous_headings":"","what":"Methods (by class)","title":"Get League Franchises — ff_franchises","text":"ff_franchises(espn_conn): ESPN: returns franchise division information. ff_franchises(flea_conn): Fleaflicker: returns franchise division information. ff_franchises(mfl_conn): MFL: returns franchise division information. ff_franchises(sleeper_conn): Sleeper: retrieves list franchise information, including user IDs co-owner IDs.","code":""},{"path":"https://ffscrapr.ffverse.com/reference/ff_franchises.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get League Franchises — ff_franchises","text":"","code":"# \\donttest{ try({ # try only shown here because sometimes CRAN checks are weird    conn <- espn_connect(season = 2020, league_id = 1178049)    ff_franchises(conn) }) # end try #> # A tibble: 14 × 8 #>    franchise_id franchise_name       franchise_abbrev logo  waiver_order user_id #>           <int> <chr>                <chr>            <chr>        <int> <chr>   #>  1            1 Rushin' Collusion    RC               http…            3 {6CE35… #>  2            2 Gurleys Gone Wild    GGW              http…            6 {74ADB… #>  3            3 The Name's Mage      Mage             http…           12 {141C9… #>  4            4 dlp:: thoriyan       thor             http…            5 {1E6BB… #>  5            5 No Ultrasmurfs Allo… ALH              http…            9 {E88F5… #>  6            6 Dak Street Boys      DSB              http…           11 {441A5… #>  7            7 Kung-Fu Kenny        KDOT             http…           10 {C6050… #>  8            8 Sticky Simians       LEL              http…            4 {599F7… #>  9            9 The Wright Stuff     TWS              NA               8 {F831B… #> 10           10 Too Many Cooks       COOK             http…            7 {C9AE3… #> 11           11 Team Typhon          TYPH             http…           14 {070C0… #> 12           12 Homicidal Hicks      HH               http…            1 {CBF26… #> 13           13 Baby You Can Drive … POKE             http…           13 {A5DC8… #> 14           14 Boralus Booty        BB               http…            2 {1778D… #> # ℹ 2 more variables: user_name <chr>, user_nickname <chr> # }  # \\donttest{ try({ # try only shown here because sometimes CRAN checks are weird   conn <- fleaflicker_connect(season = 2020, league_id = 206154)   ff_franchises(conn) }) # end try #> # A tibble: 16 × 10 #>    division_id division_name franchise_id franchise_name          franchise_logo #>          <int> <chr>                <int> <chr>                   <chr>          #>  1      606681 JDL North          1371776 Winter Hill Black Sham… https://s3.am… #>  2      606681 JDL North          1373973 Red River Land Thunder  https://s3.am… #>  3      606681 JDL North          1373501 Midgard Gallows         https://s3.am… #>  4      606681 JDL North          1373991 Top City Terrors        https://s3.am… #>  5      606682 JDL East           1374255 Mushroom City Karts     https://s3.am… #>  6      606682 JDL East           1373475 Winterfell Dire Wolves  https://s3.am… #>  7      606682 JDL East           1373480 Goldenrod City Nightma… https://s3.am… #>  8      606682 JDL East           1374252 Central City Crusaders  https://s3.am… #>  9      606683 JDL South          1373970 Bamenda Herd            https://s3.am… #> 10      606683 JDL South          1374271 Clutch City Ballers     https://s3.am… #> 11      606683 JDL South          1374315 Shanghai Communists     NA             #> 12      606683 JDL South          1373993 Boomtown Sly Foxes      https://s3.am… #> 13      606684 JDL West           1373393 Philadelphia Fire       https://s3.am… #> 14      606684 JDL West           1373535 Winterthur Angry Ducks  https://s3.am… #> 15      606684 JDL West           1373883 Manitoba Marmots        NA             #> 16      606684 JDL West           1373988 Springfield Isotopes    https://s3.am… #> # ℹ 5 more variables: franchise_abbrev <chr>, user_id <int>, user_name <chr>, #> #   user_avatar <chr>, user_lastlogin <dttm> # }  # \\donttest{ try({ # try only shown here because sometimes CRAN checks are weird   ssb_conn <- ff_connect(platform = \"mfl\", league_id = 54040, season = 2020)   ff_franchises(ssb_conn) }) # end try #> # A tibble: 14 × 7 #>    franchise_id franchise_name abbrev bbidAvailableBalance icon  waiverSortOrder #>    <chr>        <chr>          <chr>  <chr>                <chr> <chr>           #>  1 0001         Team Pikachu   PIKA   159.00               http… 1               #>  2 0002         Team Simon Be… SIMN   99.00                http… 7               #>  3 0003         Team Donkey K… DK     50.00                http… 6               #>  4 0004         Team Ice Clim… ICE    0.00                 http… 5               #>  5 0005         Team Dr. Mario DRM    84.00                http… 4               #>  6 0006         Team King Ded… KDDD   87.00                http… 10              #>  7 0007         Team Kirby     KRBY   40.00                http… 8               #>  8 0008         Team Bowser    BWSR   0.00                 http… 9               #>  9 0009         Team Link      LINK   81.00                http… 13              #> 10 0010         Team Yoshi     YSHI   0.00                 http… 12              #> 11 0011         Team Diddy Ko… DDY    173.00               http… 11              #> 12 0012         Team Mewtwo    MEW2   0.00                 http… 3               #> 13 0013         Team Ness      NESS   0.00                 http… 2               #> 14 0014         Team Luigi     LUIG   0.00                 http… 14              #> # ℹ 1 more variable: logo <chr> # }  # \\donttest{ try({ # try only shown here because sometimes CRAN checks are weird   jml_conn <- ff_connect(platform = \"sleeper\", league_id = \"522458773317046272\", season = 2020)   ff_franchises(jml_conn) }) # end try #> # A tibble: 12 × 5 #>    franchise_id franchise_name    user_name      user_id            co_owners  #>           <int> <chr>             <chr>          <chr>              <list>     #>  1            1 Fake News         Jcurtis44      70729037081100288  <NULL>     #>  2            2 KingGabe          KingGabe       76686532077305856  <NULL>     #>  3            3 solarpool         solarpool      202892038360801280 <NULL>     #>  4            4 The FANTom Menace weeknee        202882046337490944 <NULL>     #>  5            5 Barbarians        ABitterHomer   386383436639973376 <NULL>     #>  6            6 sox05syd          sox05syd       409797051455393792 <NULL>     #>  7            7 Flipadelphia05    Flipadelphia05 386950378371207168 <NULL>     #>  8            8 Hocka Flocka      TwoFrames      386976568364306432 <NULL>     #>  9            9 ZPMiller97        ZPMiller97     386571720443764736 <NULL>     #> 10           10 JMLarkin          JMLarkin       387070108625039360 <NULL>     #> 11           11 Permian Panthers  theoracleETS   198540145396289536 <list [1]> #> 12           12 jaydk             jaydk          401485903224193024 <NULL>     # }"},{"path":"https://ffscrapr.ffverse.com/reference/ff_league.html","id":null,"dir":"Reference","previous_headings":"","what":"Get League Summary — ff_league","title":"Get League Summary — ff_league","text":"function returns tidy dataframe common league settings, including details like \"1QB\" \"2QB/SF\", scoring, best ball, team count, IDP etc. potentially useful summarising features multiple leagues.","code":""},{"path":"https://ffscrapr.ffverse.com/reference/ff_league.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get League Summary — ff_league","text":"","code":"ff_league(conn)  # S3 method for espn_conn ff_league(conn)  # S3 method for flea_conn ff_league(conn)  # S3 method for mfl_conn ff_league(conn)  # S3 method for sleeper_conn ff_league(conn)"},{"path":"https://ffscrapr.ffverse.com/reference/ff_league.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get League Summary — ff_league","text":"conn connection object created ff_connect()","code":""},{"path":"https://ffscrapr.ffverse.com/reference/ff_league.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get League Summary — ff_league","text":"one-row summary league's main features.","code":""},{"path":"https://ffscrapr.ffverse.com/reference/ff_league.html","id":"methods-by-class-","dir":"Reference","previous_headings":"","what":"Methods (by class)","title":"Get League Summary — ff_league","text":"ff_league(espn_conn): ESPN: returns summary league features. ff_league(flea_conn): Flea: returns summary league features. ff_league(mfl_conn): MFL: returns summary league features. ff_league(sleeper_conn): Sleeper: returns summary league features.","code":""},{"path":"https://ffscrapr.ffverse.com/reference/ff_league.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get League Summary — ff_league","text":"","code":"# \\donttest{ try({ # try only shown here because sometimes CRAN checks are weird    conn <- espn_connect(season = 2020, league_id = 899513)    ff_league(conn) }) # end try #> # A tibble: 1 × 16 #>   league_id league_name season league_type franchise_count qb_type idp   #>   <chr>     <chr>        <int> <chr>                 <int> <chr>   <lgl> #> 1 899513    Sucio Boys    2020 keeper                   10 2QB/SF  FALSE #> # ℹ 9 more variables: scoring_flags <chr>, best_ball <lgl>, salary_cap <lgl>, #> #   player_copies <dbl>, years_active <chr>, qb_count <chr>, roster_size <int>, #> #   league_depth <dbl>, keeper_count <int> # }  # \\donttest{ try({ # try only shown here because sometimes CRAN checks are weird   conn <- fleaflicker_connect(2020, 206154)   ff_league(conn) }) # end try #> # A tibble: 1 × 15 #>   league_id league_name         season league_type franchise_count qb_type idp   #>   <chr>     <chr>                <int> <chr>                 <dbl> <chr>   <lgl> #> 1 206154    Jackpot Dynasty Le…   2020 dynasty                  16 1QB     TRUE  #> # ℹ 8 more variables: scoring_flags <chr>, best_ball <lgl>, salary_cap <lgl>, #> #   player_copies <dbl>, qb_count <chr>, roster_size <int>, league_depth <dbl>, #> #   keeper_count <int> # }  # \\donttest{ try({ # try only shown here because sometimes CRAN checks are weird   ssb_conn <- ff_connect(platform = \"mfl\", league_id = 22627, season = 2021)   ff_league(ssb_conn) }) # end try #> # A tibble: 1 × 17 #>   league_id league_name         season league_type franchise_count qb_type idp   #>   <chr>     <chr>                <int> <chr>                 <dbl> <chr>   <lgl> #> 1 22627     Four-Eight Dynasty…   2021 dynasty                  12 2QB/SF  TRUE  #> # ℹ 10 more variables: scoring_flags <chr>, best_ball <lgl>, salary_cap <lgl>, #> #   player_copies <dbl>, years_active <chr>, qb_count <chr>, roster_size <dbl>, #> #   league_depth <dbl>, draft_type <chr>, draft_player_pool <chr> # }  # \\donttest{ try({ # try only shown here because sometimes CRAN checks are weird   jml_conn <- ff_connect(platform = \"sleeper\", league_id = \"522458773317046272\", season = 2020)   ff_league(jml_conn) }) # end try #> # A tibble: 1 × 16 #>   league_id         league_name season league_type franchise_count qb_type idp   #>   <chr>             <chr>        <int> <chr>                 <dbl> <chr>   <lgl> #> 1 5224587733170462… The JanMic…   2020 dynasty                  12 1QB     FALSE #> # ℹ 9 more variables: scoring_flags <chr>, best_ball <lgl>, salary_cap <lgl>, #> #   player_copies <dbl>, years_active <chr>, qb_count <chr>, roster_size <int>, #> #   league_depth <dbl>, prev_league_ids <chr> # }"},{"path":"https://ffscrapr.ffverse.com/reference/ff_playerscores.html","id":null,"dir":"Reference","previous_headings":"","what":"Get Player Scoring History — ff_playerscores","title":"Get Player Scoring History — ff_playerscores","text":"function returns tidy dataframe player scores based league rules. Unfortunately, Sleeper deprecated player stats endpoint supported/open API. Please see ff_scoringhistory() alternative reconstruction.","code":""},{"path":"https://ffscrapr.ffverse.com/reference/ff_playerscores.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get Player Scoring History — ff_playerscores","text":"","code":"ff_playerscores(conn, ...)  # S3 method for espn_conn ff_playerscores(conn, limit = 1000, ...)  # S3 method for flea_conn ff_playerscores(conn, page_limit = NULL, ...)  # S3 method for mfl_conn ff_playerscores(conn, season, week, ...)  # S3 method for sleeper_conn ff_playerscores(conn, ...)"},{"path":"https://ffscrapr.ffverse.com/reference/ff_playerscores.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get Player Scoring History — ff_playerscores","text":"conn list object created ff_connect() ... arguments (currently unused) limit numeric describing number players return - default 1000 page_limit numeric describing number pages return - default NULL returns available season season interest - generally recent 2-3 seasons available week numeric vector (ie 1:17) one YTD (year--date) AVG (average date)","code":""},{"path":"https://ffscrapr.ffverse.com/reference/ff_playerscores.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get Player Scoring History — ff_playerscores","text":"tibble historical player scoring","code":""},{"path":"https://ffscrapr.ffverse.com/reference/ff_playerscores.html","id":"methods-by-class-","dir":"Reference","previous_headings":"","what":"Methods (by class)","title":"Get Player Scoring History — ff_playerscores","text":"ff_playerscores(espn_conn): ESPN: returns total points season average per game, current previous season. ff_playerscores(flea_conn): Fleaflicker: returns season, season average, standard deviation ff_playerscores(mfl_conn): MFL: returns player fantasy scores week (actual stats) ff_playerscores(sleeper_conn): Sleeper: Deprecated open API endpoint player scores","code":""},{"path":[]},{"path":"https://ffscrapr.ffverse.com/reference/ff_playerscores.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get Player Scoring History — ff_playerscores","text":"","code":"# \\donttest{ try({ # try only shown here because sometimes CRAN checks are weird    conn <- espn_connect(season = 2020, league_id = 899513)    ff_playerscores(conn, limit = 5) }) # end try #> # A tibble: 5 × 8 #>   season player_id player_name     pos   score_total score_average franchise_id #>    <int>     <int> <chr>           <chr>       <dbl>         <dbl>        <int> #> 1   2020   3054850 Alvin Kamara    RB           337.          22.5            9 #> 2   2020   3043078 Derrick Henry   RB           324.          20.2            4 #> 3   2020     16800 Davante Adams   WR           301.          21.5            2 #> 4   2020     15795 DeAndre Hopkins WR           230.          14.4            4 #> 5   2020   2576925 Darren Waller   TE           225.          14.1            4 #> # ℹ 1 more variable: franchise_name <chr> # } # \\donttest{ try({ # try only shown here because sometimes CRAN checks are weird   conn <- fleaflicker_connect(2020, 312861)   ff_playerscores(conn, page_limit = 2) }) # end try #> # A tibble: 60 × 8 #>    player_id player_name     pos   team  games score_total score_avg score_sd #>        <int> <chr>           <chr> <chr> <dbl>       <dbl>     <dbl>    <dbl> #>  1     13761 Josh Allen      QB    BUF      16        550.      34.4    10.4  #>  2      3452 Aaron Rodgers   QB    NYJ      16        542.      33.8     8.49 #>  3     12894 Patrick Mahomes QB    KC       15        520.      34.6     9.95 #>  4      8598 Russell Wilson  QB    DEN      16        513.      32.1    10.8  #>  5     14664 Kyler Murray    QB    ARI      16        507.      31.7    11.9  #>  6     12919 Deshaun Watson  QB    CLE      16        503.      31.5     7.96 #>  7       309 Tom Brady       QB    FA       16        488.      30.5    12.2  #>  8      8514 Ryan Tannehill  QB    TEN      16        469.      29.3     9.76 #>  9     15516 Justin Herbert  QB    LAC      15        459.      30.6     9.67 #> 10      8625 Kirk Cousins    QB    MIN      16        446.      27.9     9.8  #> # ℹ 50 more rows # } # \\donttest{ try({ # try only shown here because sometimes CRAN checks are weird   sfb_conn <- mfl_connect(2020, league_id = 65443)   ff_playerscores(conn = sfb_conn, season = 2019, week = \"YTD\") }) # end try #> # A tibble: 589 × 8 #>    season week  player_id player_name          pos   team  points is_available #>     <dbl> <chr> <chr>     <chr>                <chr> <chr>  <dbl> <chr>        #>  1   2019 YTD   13593     Jackson, Lamar       QB    BAL     489. 1            #>  2   2019 YTD   13130     McCaffrey, Christian RB    CAR     447. 1            #>  3   2019 YTD   12652     Thomas, Michael      WR    NOS     338. 1            #>  4   2019 YTD   13113     Watson, Deshaun      QB    HOU     330. 1            #>  5   2019 YTD   11244     Kelce, Travis        TE    KCC     317. 1            #>  6   2019 YTD   10703     Wilson, Russell      QB    SEA     315. 1            #>  7   2019 YTD   12620     Prescott, Dak        QB    DAL     314. 1            #>  8   2019 YTD   13128     Cook, Dalvin         RB    MIN     313. 1            #>  9   2019 YTD   13319     Jones, Aaron         RB    GBP     312  1            #> 10   2019 YTD   12625     Elliott, Ezekiel     RB    DAL     309. 1            #> # ℹ 579 more rows # }"},{"path":"https://ffscrapr.ffverse.com/reference/ff_rosters.html","id":null,"dir":"Reference","previous_headings":"","what":"Get League Rosters — ff_rosters","title":"Get League Rosters — ff_rosters","text":"function returns tidy dataframe team rosters","code":""},{"path":"https://ffscrapr.ffverse.com/reference/ff_rosters.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get League Rosters — ff_rosters","text":"","code":"ff_rosters(conn, ...)  # S3 method for espn_conn ff_rosters(conn, week = NULL, ...)  # S3 method for flea_conn ff_rosters(conn, ..., week = NULL)  # S3 method for mfl_conn ff_rosters(conn, custom_players = deprecated(), week = NULL, ...)  # S3 method for sleeper_conn ff_rosters(conn, ...)"},{"path":"https://ffscrapr.ffverse.com/reference/ff_rosters.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get League Rosters — ff_rosters","text":"conn conn object created ff_connect() ... arguments passed methods (currently none) week numeric specifies week return custom_players \"\" - now returns custom players default","code":""},{"path":"https://ffscrapr.ffverse.com/reference/ff_rosters.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get League Rosters — ff_rosters","text":"tidy dataframe rosters, joined basic player information basic franchise information","code":""},{"path":"https://ffscrapr.ffverse.com/reference/ff_rosters.html","id":"methods-by-class-","dir":"Reference","previous_headings":"","what":"Methods (by class)","title":"Get League Rosters — ff_rosters","text":"ff_rosters(espn_conn): ESPN: Returns roster data. ff_rosters(flea_conn): Fleaflicker: Returns roster data (minus age right now) ff_rosters(mfl_conn): MFL: returns roster data ff_rosters(sleeper_conn): Sleeper: Returns roster data.","code":""},{"path":"https://ffscrapr.ffverse.com/reference/ff_rosters.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get League Rosters — ff_rosters","text":"","code":"# \\donttest{ try({ # try only shown here because sometimes CRAN checks are weird   conn <- espn_connect(season = 2020, league_id = 899513)   ff_league(conn) }) # end try #> # A tibble: 1 × 16 #>   league_id league_name season league_type franchise_count qb_type idp   #>   <chr>     <chr>        <int> <chr>                 <int> <chr>   <lgl> #> 1 899513    Sucio Boys    2020 keeper                   10 2QB/SF  FALSE #> # ℹ 9 more variables: scoring_flags <chr>, best_ball <lgl>, salary_cap <lgl>, #> #   player_copies <dbl>, years_active <chr>, qb_count <chr>, roster_size <int>, #> #   league_depth <dbl>, keeper_count <int> # } # \\donttest{ try({ # try only shown here because sometimes CRAN checks are weird   joe_conn <- ff_connect(platform = \"fleaflicker\", league_id = 312861, season = 2020)    ff_rosters(joe_conn) }) # end try #> # A tibble: 348 × 7 #>    franchise_id franchise_name player_id player_name   pos   team  sportradar_id #>           <int> <chr>              <int> <chr>         <chr> <chr> <chr>         #>  1      1578553 Running Bear       12159 Dak Prescott  QB    DAL   86197778-8d4… #>  2      1578553 Running Bear       16259 Trey Lance    QB    DAL   676a508c-c65… #>  3      1578553 Running Bear       14736 Devin Single… RB    HOU   a961b0d4-5d7… #>  4      1578553 Running Bear       13772 Rashaad Penny RB    PHI   2b119688-83b… #>  5      1578553 Running Bear       12017 Laquon Tread… WR    FA    2e0badcd-b78… #>  6      1578553 Running Bear       15531 Brandon Aiyuk WR    SF    c90471cc-fa6… #>  7      1578553 Running Bear       13788 Michael Gall… WR    DAL   9e174ff2-ca0… #>  8      1578553 Running Bear       15564 Van Jefferson WR    ATL   8e1285f7-6e4… #>  9      1578553 Running Bear       16250 Ja'Marr Chase WR    CIN   fa99e984-d63… #> 10      1578553 Running Bear       12972 Gerald Evere… TE    LAC   ebeceb00-57e… #> # ℹ 338 more rows # } # \\donttest{ try({ # try only shown here because sometimes CRAN checks are weird   ssb_conn <- ff_connect(platform = \"mfl\", league_id = 54040, season = 2020)   ff_rosters(ssb_conn) }) # end try #> # A tibble: 417 × 11 #>    franchise_id franchise_name player_id player_name           pos   team    age #>    <chr>        <chr>          <chr>     <chr>                 <chr> <chr> <dbl> #>  1 0001         Team Pikachu   13189     Engram, Evan          TE    NYG    29.5 #>  2 0001         Team Pikachu   11680     Landry, Jarvis        WR    CLE    31.3 #>  3 0001         Team Pikachu   13645     Smith, Tre'Quan       WR    NOS    28.2 #>  4 0001         Team Pikachu   12110     Brate, Cameron        TE    TBB    32.7 #>  5 0001         Team Pikachu   13168     Reynolds, Josh        WR    LAR    29.1 #>  6 0001         Team Pikachu   13793     Valdes-Scantling, Ma… WR    GBP    29.4 #>  7 0001         Team Pikachu   13377     Patrick, Tim          WR    DEN    30.3 #>  8 0001         Team Pikachu   13254     Shaheen, Adam         TE    MIA    30.2 #>  9 0001         Team Pikachu   14803     Edwards-Helaire, Cly… RB    KCC    24.9 #> 10 0001         Team Pikachu   14838     Shenault, Laviska     WR    JAC    25.4 #> # ℹ 407 more rows #> # ℹ 4 more variables: roster_status <chr>, drafted <chr>, draft_year <int>, #> #   draft_round <chr> # }  # \\donttest{ try({ # try only shown here because sometimes CRAN checks are weird   jml_conn <- ff_connect(platform = \"sleeper\", league_id = \"522458773317046272\", season = 2020)   ff_rosters(jml_conn) }) # end try #> # A tibble: 350 × 7 #>    franchise_id franchise_name player_id player_name     pos   team    age #>    <chr>        <chr>          <chr>     <chr>           <chr> <chr> <dbl> #>  1 1            Fake News      1110      T.Y. Hilton     WR    NA     34.3 #>  2 1            Fake News      1339      Zach Ertz       TE    WAS    33.3 #>  3 1            Fake News      1426      DeAndre Hopkins WR    TEN    31.8 #>  4 1            Fake News      1825      Jarvis Landry   WR    NA     31.3 #>  5 1            Fake News      2025      Albert Wilson   WR    NA     31.7 #>  6 1            Fake News      2197      Brandin Cooks   WR    DAL    30.5 #>  7 1            Fake News      2319      DeVante Parker  WR    NE     31.1 #>  8 1            Fake News      232       Frank Gore      RB    NA     40.8 #>  9 1            Fake News      2822      Adam Humphries  WR    NA     30.7 #> 10 1            Fake News      289       Drew Brees      QB    NA     45.1 #> # ℹ 340 more rows # }"},{"path":"https://ffscrapr.ffverse.com/reference/ff_schedule.html","id":null,"dir":"Reference","previous_headings":"","what":"Get Schedule — ff_schedule","title":"Get Schedule — ff_schedule","text":"function returns tidy dataframe one row every team every weekly matchup","code":""},{"path":"https://ffscrapr.ffverse.com/reference/ff_schedule.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get Schedule — ff_schedule","text":"","code":"ff_schedule(conn, ...)  # S3 method for espn_conn ff_schedule(conn, ...)  # S3 method for flea_conn ff_schedule(conn, week = 1:17, ...)  # S3 method for mfl_conn ff_schedule(conn, ...)  # S3 method for sleeper_conn ff_schedule(conn, ...)"},{"path":"https://ffscrapr.ffverse.com/reference/ff_schedule.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get Schedule — ff_schedule","text":"conn conn object created ff_connect() ... platforms week numeric numeric vector specifying weeks pull","code":""},{"path":"https://ffscrapr.ffverse.com/reference/ff_schedule.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get Schedule — ff_schedule","text":"tidy dataframe one row per game per franchise per week","code":""},{"path":"https://ffscrapr.ffverse.com/reference/ff_schedule.html","id":"methods-by-class-","dir":"Reference","previous_headings":"","what":"Methods (by class)","title":"Get Schedule — ff_schedule","text":"ff_schedule(espn_conn): ESPN: returns schedule data, one row every franchise every week. Completed games result data. ff_schedule(flea_conn): Flea: returns schedule data, one row every franchise every week. Completed games result data. ff_schedule(mfl_conn): MFL: returns schedule data, one row every franchise every week. Completed games result data. ff_schedule(sleeper_conn): Sleeper: returns schedule data","code":""},{"path":"https://ffscrapr.ffverse.com/reference/ff_schedule.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get Schedule — ff_schedule","text":"","code":"# \\donttest{ try({ # try only shown here because sometimes CRAN checks are weird   espn_conn <- espn_connect(season = 2020, league_id = 899513)   ff_schedule(espn_conn) }) # end try #> # A tibble: 140 × 6 #>     week franchise_id franchise_score result opponent_id opponent_score #>    <int>        <int>           <dbl> <chr>        <int>          <dbl> #>  1     1            1            102. L                4           130. #>  2     1            2            156. W                3           135. #>  3     1            3            135. L                2           156. #>  4     1            4            130. W                1           102. #>  5     1            5            133. W                7           131. #>  6     1            6            119. L                9           124. #>  7     1            7            131. L                5           133. #>  8     1            8            120. L               10           122. #>  9     1            9            124. W                6           119. #> 10     1           10            122. W                8           120. #> # ℹ 130 more rows # }  # \\donttest{ try({ # try only shown here because sometimes CRAN checks are weird   conn <- fleaflicker_connect(season = 2019, league_id = 206154)   ff_schedule(conn, week = 2:4) }) # end try #> # A tibble: 48 × 14 #>     week franchise_id franchise_name          franchise_score result opponent_id #>    <int>        <int> <chr>                             <dbl> <chr>        <int> #>  1     2      1373991 Top City Terrors                   226. WIN        1373393 #>  2     2      1373480 Goldenrod City Nightma…            161. LOSE       1373475 #>  3     2      1371776 Winter Hill Black Sham…            178. WIN        1373501 #>  4     2      1373993 Boomtown Sly Foxes                 167. WIN        1373970 #>  5     2      1373883 Manitoba Marmots                   201. WIN        1373973 #>  6     2      1373535 Winterthur Angry Ducks             147. LOSE       1373988 #>  7     2      1374252 Central City Crusaders             160. LOSE       1374255 #>  8     2      1374271 Clutch City Ballers                174. WIN        1374315 #>  9     2      1373393 Philadelphia Fire                  138. LOSE       1373991 #> 10     2      1373475 Winterfell Dire Wolves             300. WIN        1373480 #> # ℹ 38 more rows #> # ℹ 8 more variables: opponent_name <chr>, opponent_score <dbl>, game_id <chr>, #> #   isFinalScore <lgl>, isDivisional <lgl>, isPlayoffs <lgl>, #> #   isThirdPlaceGame <lgl>, isChampionshipGame <lgl> # }  # \\donttest{ try({ # try only shown here because sometimes CRAN checks are weird   ssb_conn <- ff_connect(platform = \"mfl\", league_id = 54040, season = 2020)   ff_schedule(ssb_conn) }) # end try #> # A tibble: 234 × 6 #>     week franchise_id franchise_score result opponent_id opponent_score #>    <dbl> <chr>                  <dbl> <chr>  <chr>                <dbl> #>  1     1 0001                    123. W      0002                  103. #>  2     1 0002                    103. L      0001                  123. #>  3     1 0003                    128. L      0004                  174. #>  4     1 0004                    174. W      0003                  128. #>  5     1 0005                    144. W      0011                  130. #>  6     1 0006                    173. W      0013                  125. #>  7     1 0007                    145. W      0010                  127. #>  8     1 0008                    185. W      0009                  176. #>  9     1 0009                    176. L      0008                  185. #> 10     1 0010                    127. L      0007                  145. #> # ℹ 224 more rows # }  # \\donttest{ try({ # try only shown here because sometimes CRAN checks are weird   jml_conn <- ff_connect(platform = \"sleeper\", league_id = \"522458773317046272\", season = 2020)   ff_schedule(jml_conn) }) # end try #> # A tibble: 192 × 6 #>     week franchise_id franchise_score opponent_id opponent_score result #>    <int>        <int>           <dbl>       <int>          <dbl> <chr>  #>  1     1            1            97.8          12          160.  L      #>  2     1            2            65.9           8           70.2 L      #>  3     1            3           103.           10           71   W      #>  4     1            4           133.            7          106.  W      #>  5     1            5            82.4           6           99.3 L      #>  6     1            6            99.3           5           82.4 W      #>  7     1            7           106.            4          133.  L      #>  8     1            8            70.2           2           65.9 W      #>  9     1            9            78.3          11          147   L      #> 10     1           10            71             3          103.  L      #> # ℹ 182 more rows # }"},{"path":"https://ffscrapr.ffverse.com/reference/ff_scoring.html","id":null,"dir":"Reference","previous_headings":"","what":"Get League Scoring Settings — ff_scoring","title":"Get League Scoring Settings — ff_scoring","text":"function returns dataframe detailed scoring settings league - broken event, points, (available) position.","code":""},{"path":"https://ffscrapr.ffverse.com/reference/ff_scoring.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get League Scoring Settings — ff_scoring","text":"","code":"ff_scoring(conn)  # S3 method for espn_conn ff_scoring(conn)  # S3 method for flea_conn ff_scoring(conn)  # S3 method for mfl_conn ff_scoring(conn)  # S3 method for sleeper_conn ff_scoring(conn)  # S3 method for template_conn ff_scoring(conn)"},{"path":"https://ffscrapr.ffverse.com/reference/ff_scoring.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get League Scoring Settings — ff_scoring","text":"conn conn object created ff_connect()","code":""},{"path":"https://ffscrapr.ffverse.com/reference/ff_scoring.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get League Scoring Settings — ff_scoring","text":"tibble league scoring rules position defined.","code":""},{"path":"https://ffscrapr.ffverse.com/reference/ff_scoring.html","id":"methods-by-class-","dir":"Reference","previous_headings":"","what":"Methods (by class)","title":"Get League Scoring Settings — ff_scoring","text":"ff_scoring(espn_conn): ESPN: returns scoring settings flat table, override positions scoring. ff_scoring(flea_conn): Fleaflicker: returns scoring settings flat table, one row per position per rule. ff_scoring(mfl_conn): MFL: returns scoring settings flat table, one row per position per rule. ff_scoring(sleeper_conn): Sleeper: returns scoring settings flat table, one row per position per rule. ff_scoring(template_conn): Template: returns MFL style scoring settings flat table, one row per position per rule.","code":""},{"path":[]},{"path":"https://ffscrapr.ffverse.com/reference/ff_scoring.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get League Scoring Settings — ff_scoring","text":"","code":"# \\donttest{ try({ # try only shown here because sometimes CRAN checks are weird   conn <- espn_connect(season = 2020, league_id = 899513)   ff_scoring(conn) }) # end try #> # A tibble: 627 × 4 #>    pos   points stat_id stat_name                     #>    <chr>  <dbl>   <int> <chr>                         #>  1 QB         0     133 defensive400To449YardsAllowed #>  2 RB         0     133 defensive400To449YardsAllowed #>  3 WR         0     133 defensive400To449YardsAllowed #>  4 TE         0     133 defensive400To449YardsAllowed #>  5 K          0     133 defensive400To449YardsAllowed #>  6 P          0     133 defensive400To449YardsAllowed #>  7 DT         0     133 defensive400To449YardsAllowed #>  8 DE         0     133 defensive400To449YardsAllowed #>  9 LB         0     133 defensive400To449YardsAllowed #> 10 CB         0     133 defensive400To449YardsAllowed #> # ℹ 617 more rows # }  # \\donttest{ try({ # try only shown here because sometimes CRAN checks are weird   joe_conn <- ff_connect(platform = \"fleaflicker\", league_id = 312861, season = 2020)   ff_scoring(joe_conn) }) # end try #> # A tibble: 72 × 7 #>    pos   event                   abbrev points label   desc             event_id #>    <chr> <chr>                   <chr>   <dbl> <chr>   <chr>               <int> #>  1 QB    Passing Yard            Yd       0.04 Passing 1 point for eve…        3 #>  2 RB    Passing Yard            Yd       0.04 Passing 1 point for eve…        3 #>  3 WR    Passing Yard            Yd       0.04 Passing 1 point for eve…        3 #>  4 TE    Passing Yard            Yd       0.04 Passing 1 point for eve…        3 #>  5 QB    Passing TD              TD       6    Passing 6 points for ev…        5 #>  6 RB    Passing TD              TD       6    Passing 6 points for ev…        5 #>  7 WR    Passing TD              TD       6    Passing 6 points for ev…        5 #>  8 TE    Passing TD              TD       6    Passing 6 points for ev…        5 #>  9 QB    2 Pt Conversion Passing 2PC      2    Passing 2 points for ev…        4 #> 10 RB    2 Pt Conversion Passing 2PC      2    Passing 2 points for ev…        4 #> # ℹ 62 more rows # }  # \\donttest{ try({ # try only shown here because sometimes CRAN checks are weird   ssb_conn <- ff_connect(platform = \"mfl\", league_id = 54040, season = 2020)   ff_scoring(ssb_conn) }) # end try #> # A tibble: 71 × 7 #>    pos   points range   event points_type short_desc            long_desc        #>    <chr>  <dbl> <chr>   <chr> <chr>       <chr>                 <chr>            #>  1 TE      0.25 0-99    CC    each        Receptions            This is the num… #>  2 TE      0.25 1-50    1R    each        Rushing First Downs   This is the num… #>  3 TE      0.25 1-50    1C    each        Receiving First Downs This is the num… #>  4 QB      6    0-10    #P    each        Number of Passing TDs This is the tot… #>  5 RB      6    0-10    #P    each        Number of Passing TDs This is the tot… #>  6 WR      6    0-10    #P    each        Number of Passing TDs This is the tot… #>  7 TE      6    0-10    #P    each        Number of Passing TDs This is the tot… #>  8 QB      0.04 -50-999 PY    each        Passing Yards         This is the tot… #>  9 RB      0.04 -50-999 PY    each        Passing Yards         This is the tot… #> 10 WR      0.04 -50-999 PY    each        Passing Yards         This is the tot… #> # ℹ 61 more rows # }  # \\donttest{ try({ # try only shown here because sometimes CRAN checks are weird   jml_conn <- ff_connect(platform = \"sleeper\", league_id = \"522458773317046272\", season = 2020)   ff_scoring(jml_conn) }) # end try #> # A tibble: 169 × 3 #>    pos   event          points #>    <chr> <chr>           <dbl> #>  1 QB    st_ff               1 #>  2 RB    st_ff               1 #>  3 WR    st_ff               1 #>  4 TE    st_ff               1 #>  5 DL    st_ff               1 #>  6 LB    st_ff               1 #>  7 DB    st_ff               1 #>  8 K     st_ff               1 #>  9 DEF   pts_allow_7_13      0 #> 10 DEF   def_st_ff           1 #> # ℹ 159 more rows # }  # \\donttest{ template_ppr <- ff_template(scoring_type = \"ppr\") ff_scoring(template_ppr) #> # A tibble: 228 × 7 #>    pos   points range event points_type short_desc              long_desc        #>    <chr>  <dbl> <chr> <chr> <chr>       <chr>                   <chr>            #>  1 TE         6 0-10  #C    each        Number of Receiving TDs This is the tot… #>  2 QB         6 0-10  #C    each        Number of Receiving TDs This is the tot… #>  3 RB         6 0-10  #C    each        Number of Receiving TDs This is the tot… #>  4 PK         6 0-10  #C    each        Number of Receiving TDs This is the tot… #>  5 WR         6 0-10  #C    each        Number of Receiving TDs This is the tot… #>  6 DT         6 0-10  #C    each        Number of Receiving TDs This is the tot… #>  7 DE         6 0-10  #C    each        Number of Receiving TDs This is the tot… #>  8 LB         6 0-10  #C    each        Number of Receiving TDs This is the tot… #>  9 CB         6 0-10  #C    each        Number of Receiving TDs This is the tot… #> 10 S          6 0-10  #C    each        Number of Receiving TDs This is the tot… #> # ℹ 218 more rows # }"},{"path":"https://ffscrapr.ffverse.com/reference/ff_scoringhistory.html","id":null,"dir":"Reference","previous_headings":"","what":"Get League-Specific Scoring History — ff_scoringhistory","title":"Get League-Specific Scoring History — ff_scoringhistory","text":"(Experimental!) function reads league's ff_scoring rules maps nflfastr week-level data. scoring rules league may nflfastr equivalents, common ones available!","code":""},{"path":"https://ffscrapr.ffverse.com/reference/ff_scoringhistory.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get League-Specific Scoring History — ff_scoringhistory","text":"","code":"ff_scoringhistory(conn, season, ...)  # S3 method for espn_conn ff_scoringhistory(conn, season = 1999:nflreadr::most_recent_season(), ...)  # S3 method for flea_conn ff_scoringhistory(conn, season = 1999:nflreadr::most_recent_season(), ...)  # S3 method for mfl_conn ff_scoringhistory(conn, season = 1999:nflreadr::most_recent_season(), ...)  # S3 method for sleeper_conn ff_scoringhistory(conn, season = 1999:nflreadr::most_recent_season(), ...)  # S3 method for template_conn ff_scoringhistory(conn, season = 1999:nflreadr::most_recent_season(), ...)"},{"path":"https://ffscrapr.ffverse.com/reference/ff_scoringhistory.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get League-Specific Scoring History — ff_scoringhistory","text":"conn conn object created ff_connect() season season numeric vector seasons (earliest available year 1999) ... arguments","code":""},{"path":"https://ffscrapr.ffverse.com/reference/ff_scoringhistory.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get League-Specific Scoring History — ff_scoringhistory","text":"tidy dataframe weekly fantasy scoring data, one row per player per week","code":""},{"path":"https://ffscrapr.ffverse.com/reference/ff_scoringhistory.html","id":"methods-by-class-","dir":"Reference","previous_headings":"","what":"Methods (by class)","title":"Get League-Specific Scoring History — ff_scoringhistory","text":"ff_scoringhistory(espn_conn): ESPN: returns scoring history flat table, one row per player per week. ff_scoringhistory(flea_conn): Fleaflicker: returns scoring history flat table, one row per player per week. ff_scoringhistory(mfl_conn): MFL: returns scoring history flat table, one row per player per week. ff_scoringhistory(sleeper_conn): Sleeper: returns scoring history flat table, one row per player per week. ff_scoringhistory(template_conn): template: returns scoring history flat table, one row per player per week.","code":""},{"path":[]},{"path":"https://ffscrapr.ffverse.com/reference/ff_scoringhistory.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get League-Specific Scoring History — ff_scoringhistory","text":"","code":"# \\donttest{ try({ # try only shown here because sometimes CRAN checks are weird   conn <- espn_connect(season = 2020, league_id = 899513)   ff_scoringhistory(conn, season = 2020) }) # end try #> # A tibble: 5,957 × 37 #>    season  week gsis_id    sportradar_id  espn_id player_name pos   team  points #>     <int> <int> <chr>      <chr>          <chr>   <chr>       <chr> <chr>  <dbl> #>  1   2020     1 00-0019596 41c44740-d0f6… 2330    Tom Brady   QB    TB     20.5  #>  2   2020     2 00-0019596 41c44740-d0f6… 2330    Tom Brady   QB    TB      8.68 #>  3   2020     3 00-0019596 41c44740-d0f6… 2330    Tom Brady   QB    TB     23.9  #>  4   2020     4 00-0019596 41c44740-d0f6… 2330    Tom Brady   QB    TB     32.5  #>  5   2020     5 00-0019596 41c44740-d0f6… 2330    Tom Brady   QB    TB     14.1  #>  6   2020     6 00-0019596 41c44740-d0f6… 2330    Tom Brady   QB    TB     14.6  #>  7   2020     7 00-0019596 41c44740-d0f6… 2330    Tom Brady   QB    TB     36.9  #>  8   2020     8 00-0019596 41c44740-d0f6… 2330    Tom Brady   QB    TB     19.1  #>  9   2020     9 00-0019596 41c44740-d0f6… 2330    Tom Brady   QB    TB      2.36 #> 10   2020    10 00-0019596 41c44740-d0f6… 2330    Tom Brady   QB    TB     31.8  #> # ℹ 5,947 more rows #> # ℹ 28 more variables: interceptions <dbl>, passing_2pt_conversions <dbl>, #> #   passing_tds <dbl>, passing_yards <dbl>, receiving_2pt_conversions <dbl>, #> #   receiving_fumbles_lost <dbl>, receiving_tds <dbl>, receiving_yards <dbl>, #> #   receptions <dbl>, rushing_2pt_conversions <dbl>, #> #   rushing_fumbles_lost <dbl>, rushing_tds <dbl>, rushing_yards <dbl>, #> #   sack_fumbles_lost <dbl>, special_teams_tds <dbl>, fg_made_0_19 <dbl>, … # }  # \\donttest{ try({ # try only shown here because sometimes CRAN checks are weird   conn <- fleaflicker_connect(2020, 312861)   ff_scoringhistory(conn, season = 2020) }) # end try #> # A tibble: 5,400 × 24 #>    season  week gsis_id    sportradar_id  fleaflicker_id player_name pos   team  #>     <int> <int> <chr>      <chr>          <chr>          <chr>       <chr> <chr> #>  1   2020     1 00-0019596 41c44740-d0f6… 309            Tom Brady   QB    TB    #>  2   2020     2 00-0019596 41c44740-d0f6… 309            Tom Brady   QB    TB    #>  3   2020     3 00-0019596 41c44740-d0f6… 309            Tom Brady   QB    TB    #>  4   2020     4 00-0019596 41c44740-d0f6… 309            Tom Brady   QB    TB    #>  5   2020     5 00-0019596 41c44740-d0f6… 309            Tom Brady   QB    TB    #>  6   2020     6 00-0019596 41c44740-d0f6… 309            Tom Brady   QB    TB    #>  7   2020     7 00-0019596 41c44740-d0f6… 309            Tom Brady   QB    TB    #>  8   2020     8 00-0019596 41c44740-d0f6… 309            Tom Brady   QB    TB    #>  9   2020     9 00-0019596 41c44740-d0f6… 309            Tom Brady   QB    TB    #> 10   2020    10 00-0019596 41c44740-d0f6… 309            Tom Brady   QB    TB    #> # ℹ 5,390 more rows #> # ℹ 16 more variables: points <dbl>, interceptions <dbl>, #> #   passing_2pt_conversions <dbl>, passing_first_downs <dbl>, #> #   passing_tds <dbl>, passing_yards <dbl>, receiving_2pt_conversions <dbl>, #> #   receiving_first_downs <dbl>, receiving_tds <dbl>, receiving_yards <dbl>, #> #   receptions <dbl>, rushing_2pt_conversions <dbl>, rushing_first_downs <dbl>, #> #   rushing_tds <dbl>, rushing_yards <dbl>, special_teams_tds <dbl> # }  # \\donttest{ try({ # try only shown here because sometimes CRAN checks are weird   ssb_conn <- ff_connect(platform = \"mfl\", league_id = 54040, season = 2020)   ff_scoringhistory(ssb_conn, season = 2020) }) # end try #> # A tibble: 5,400 × 26 #>    season  week gsis_id    sportradar_id   mfl_id player_name pos   team  points #>     <int> <int> <chr>      <chr>           <chr>  <chr>       <chr> <chr>  <dbl> #>  1   2020     1 00-0019596 41c44740-d0f6-… 5848   Tom Brady   QB    TB     21.5  #>  2   2020     2 00-0019596 41c44740-d0f6-… 5848   Tom Brady   QB    TB      8.68 #>  3   2020     3 00-0019596 41c44740-d0f6-… 5848   Tom Brady   QB    TB     29.9  #>  4   2020     4 00-0019596 41c44740-d0f6-… 5848   Tom Brady   QB    TB     40.5  #>  5   2020     5 00-0019596 41c44740-d0f6-… 5848   Tom Brady   QB    TB     16.6  #>  6   2020     6 00-0019596 41c44740-d0f6-… 5848   Tom Brady   QB    TB     18.6  #>  7   2020     7 00-0019596 41c44740-d0f6-… 5848   Tom Brady   QB    TB     45.4  #>  8   2020     8 00-0019596 41c44740-d0f6-… 5848   Tom Brady   QB    TB     23.1  #>  9   2020     9 00-0019596 41c44740-d0f6-… 5848   Tom Brady   QB    TB     -3.64 #> 10   2020    10 00-0019596 41c44740-d0f6-… 5848   Tom Brady   QB    TB     38.3  #> # ℹ 5,390 more rows #> # ℹ 17 more variables: interceptions <dbl>, passing_2pt_conversions <dbl>, #> #   passing_tds <dbl>, passing_yards <dbl>, receiving_2pt_conversions <dbl>, #> #   receiving_fumbles_lost <dbl>, receiving_tds <dbl>, receiving_yards <dbl>, #> #   receptions <dbl>, rushing_2pt_conversions <dbl>, rushing_first_downs <dbl>, #> #   rushing_fumbles_lost <dbl>, rushing_tds <dbl>, rushing_yards <dbl>, #> #   sack_fumbles_lost <dbl>, special_teams_tds <dbl>, … # }  # \\donttest{ try({ # try only shown here because sometimes CRAN checks are weird   conn <- ff_connect(platform = \"sleeper\", league_id = \"522458773317046272\", season = 2020)   ff_scoringhistory(conn, season = 2020) }) # end try #> # A tibble: 5,962 × 32 #>    season  week gsis_id  sportradar_id sleeper_id player_name pos   team  points #>     <int> <int> <chr>    <chr>         <chr>      <chr>       <chr> <chr>  <dbl> #>  1   2020     1 00-0019… 41c44740-d0f… 167        Tom Brady   QB    TB     20.5  #>  2   2020     2 00-0019… 41c44740-d0f… 167        Tom Brady   QB    TB      8.68 #>  3   2020     3 00-0019… 41c44740-d0f… 167        Tom Brady   QB    TB     23.9  #>  4   2020     4 00-0019… 41c44740-d0f… 167        Tom Brady   QB    TB     32.5  #>  5   2020     5 00-0019… 41c44740-d0f… 167        Tom Brady   QB    TB     14.1  #>  6   2020     6 00-0019… 41c44740-d0f… 167        Tom Brady   QB    TB     14.6  #>  7   2020     7 00-0019… 41c44740-d0f… 167        Tom Brady   QB    TB     36.9  #>  8   2020     8 00-0019… 41c44740-d0f… 167        Tom Brady   QB    TB     19.1  #>  9   2020     9 00-0019… 41c44740-d0f… 167        Tom Brady   QB    TB      2.36 #> 10   2020    10 00-0019… 41c44740-d0f… 167        Tom Brady   QB    TB     31.8  #> # ℹ 5,952 more rows #> # ℹ 23 more variables: interceptions <dbl>, passing_2pt_conversions <dbl>, #> #   passing_tds <dbl>, passing_yards <dbl>, receiving_2pt_conversions <dbl>, #> #   receiving_fumbles_lost <dbl>, receiving_tds <dbl>, receiving_yards <dbl>, #> #   receptions <dbl>, rushing_2pt_conversions <dbl>, #> #   rushing_fumbles_lost <dbl>, rushing_tds <dbl>, rushing_yards <dbl>, #> #   sack_fumbles_lost <dbl>, fg_made_0_19 <dbl>, fg_made_20_29 <dbl>, … # }  # \\donttest{ try({ # try only shown here because sometimes CRAN checks are weird   template_conn <- ff_template(scoring_type = \"sfb11\", roster_type = \"sfb11\")   ff_scoringhistory(template_conn, season = 2020) }) # end try #> # A tibble: 5,400 × 26 #>    season  week gsis_id    sportradar_id   mfl_id player_name pos   team  points #>     <int> <int> <chr>      <chr>           <chr>  <chr>       <chr> <chr>  <dbl> #>  1   2020     1 00-0019596 41c44740-d0f6-… 5848   Tom Brady   QB    TB     30.0  #>  2   2020     2 00-0019596 41c44740-d0f6-… 5848   Tom Brady   QB    TB     22.2  #>  3   2020     3 00-0019596 41c44740-d0f6-… 5848   Tom Brady   QB    TB     40.4  #>  4   2020     4 00-0019596 41c44740-d0f6-… 5848   Tom Brady   QB    TB     55.5  #>  5   2020     5 00-0019596 41c44740-d0f6-… 5848   Tom Brady   QB    TB     26.1  #>  6   2020     6 00-0019596 41c44740-d0f6-… 5848   Tom Brady   QB    TB     27.1  #>  7   2020     7 00-0019596 41c44740-d0f6-… 5848   Tom Brady   QB    TB     61.9  #>  8   2020     8 00-0019596 41c44740-d0f6-… 5848   Tom Brady   QB    TB     35.1  #>  9   2020     9 00-0019596 41c44740-d0f6-… 5848   Tom Brady   QB    TB      4.36 #> 10   2020    10 00-0019596 41c44740-d0f6-… 5848   Tom Brady   QB    TB     51.3  #> # ℹ 5,390 more rows #> # ℹ 17 more variables: completions <dbl>, interceptions <dbl>, #> #   passing_2pt_conversions <dbl>, passing_tds <dbl>, passing_yards <dbl>, #> #   receiving_2pt_conversions <dbl>, receiving_tds <dbl>, #> #   receiving_yards <dbl>, receptions <dbl>, rushing_2pt_conversions <dbl>, #> #   rushing_first_downs <dbl>, rushing_tds <dbl>, rushing_yards <dbl>, #> #   sacks <dbl>, special_teams_tds <dbl>, receiving_first_downs <dbl>, … # }"},{"path":"https://ffscrapr.ffverse.com/reference/ff_standings.html","id":null,"dir":"Reference","previous_headings":"","what":"Get Standings — ff_standings","title":"Get Standings — ff_standings","text":"function returns tidy dataframe season-long fantasy team stats, including H2H wins well points, potential points, -play.","code":""},{"path":"https://ffscrapr.ffverse.com/reference/ff_standings.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get Standings — ff_standings","text":"","code":"ff_standings(conn, ...)  # S3 method for espn_conn ff_standings(conn, ...)  # S3 method for flea_conn ff_standings(conn, include_allplay = TRUE, include_potentialpoints = TRUE, ...)  # S3 method for mfl_conn ff_standings(conn, ...)  # S3 method for sleeper_conn ff_standings(conn, ...)"},{"path":"https://ffscrapr.ffverse.com/reference/ff_standings.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get Standings — ff_standings","text":"conn conn object created ff_connect() ... arguments passed methods (currently none) include_allplay TRUE/FALSE - return -play win pct calculation? defaults TRUE include_potentialpoints TRUE/FALSE - return potential points calculation? defaults TRUE.","code":""},{"path":"https://ffscrapr.ffverse.com/reference/ff_standings.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get Standings — ff_standings","text":"tidy dataframe standings data","code":""},{"path":"https://ffscrapr.ffverse.com/reference/ff_standings.html","id":"methods-by-class-","dir":"Reference","previous_headings":"","what":"Methods (by class)","title":"Get Standings — ff_standings","text":"ff_standings(espn_conn): ESPN: returns standings points data. ff_standings(flea_conn): Fleaflicker: returns H2H/points/-play/best-ball data table. ff_standings(mfl_conn): MFL: returns H2H/points/-play/best-ball data table. ff_standings(sleeper_conn): Sleeper: returns standings points data manually calculates allplay results.","code":""},{"path":"https://ffscrapr.ffverse.com/reference/ff_standings.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get Standings — ff_standings","text":"","code":"# \\donttest{ try({ # try only shown here because sometimes CRAN checks are weird   espn_conn <- espn_connect(season = 2020, league_id = 899513)   ff_standings(espn_conn) }) # end try #> # A tibble: 10 × 12 #>    franchise_id franchise_name          league_rank h2h_wins h2h_losses h2h_ties #>           <int> <chr>                         <int>    <int>      <int>    <int> #>  1            1 \"The Early GGod\"                  7        3          9        0 #>  2            2 \"Coom  Dumpster\"                  3        7          5        0 #>  3            3 \"PAKI STANS\"                      6        4          8        0 #>  4            4 \"I'm Also Sad \"                   5        7          5        0 #>  5            5 \"The Juggernaut\"                  1        9          3        0 #>  6            6 \"OBJ's Personal Porta …           4        8          4        0 #>  7            7 \"Tony El Tigre\"                   9        5          7        0 #>  8            8 \"Big Coomers\"                     8        6          6        0 #>  9            9 \"RAFI CUNADO\"                     2        7          5        0 #> 10           10 \"Austin 🐐Drew Lock🐐\"           10        4          8        0 #> # ℹ 6 more variables: h2h_winpct <dbl>, points_for <dbl>, points_against <dbl>, #> #   allplay_wins <dbl>, allplay_losses <dbl>, allplay_winpct <dbl> # }  # \\donttest{ try({ # try only shown here because sometimes CRAN checks are weird   conn <- fleaflicker_connect(season = 2020, league_id = 206154)   x <- ff_standings(conn) }) # end try # }  # \\donttest{ try({ # try only shown here because sometimes CRAN checks are weird   ssb_conn <- ff_connect(platform = \"mfl\", league_id = 54040, season = 2020)   ff_standings(ssb_conn) }) # end try #> Warning: There was 1 warning in `mutate()`. #> ℹ In argument: `fname = .Primitive(\"as.double\")(fname)`. #> Caused by warning: #> ! NAs introduced by coercion #> # A tibble: 14 × 10 #>    franchise_id franchise_name     h2h_winpct h2h_wlt allplay_winpct points_for #>    <chr>        <chr>                   <dbl> <chr>            <dbl>      <dbl> #>  1 0009         Team Link               0.769 10-3-0           0.725      2063. #>  2 0010         Team Yoshi              0.692 9-4-0            0.65       1956. #>  3 0014         Team Luigi              0.769 10-3-0           0.72       2086. #>  4 0003         Team Donkey Kong        0.462 6-7-0            0.615      1937. #>  5 0006         Team King Dedede        0.615 8-5-0            0.68       2138. #>  6 0011         Team Diddy Kong         0.615 8-5-0            0.56       1927. #>  7 0008         Team Bowser             0.538 7-6-0            0.462      1820. #>  8 0007         Team Kirby              0.538 7-6-0            0.545      1829. #>  9 0002         Team Simon Belmont      0.462 6-7-0            0.328      1623. #> 10 0004         Team Ice Climbers       0.385 5-8-0            0.495      1852. #> 11 0005         Team Dr. Mario          0.385 5-8-0            0.368      1698. #> 12 0013         Team Ness               0.231 3-10-0           0.26       1553. #> 13 0012         Team Mewtwo             0.308 4-9-0            0.396      1708. #> 14 0001         Team Pikachu            0.231 3-10-0           0.151      1459. #> # ℹ 4 more variables: points_against <dbl>, avg_points_for <dbl>, #> #   avg_points_against <dbl>, faab_balance <dbl> # }  # \\donttest{ try({ # try only shown here because sometimes CRAN checks are weird   jml_conn <- ff_connect(platform = \"sleeper\", league_id = \"522458773317046272\", season = 2020)   ff_standings(jml_conn) }) # end try #> # A tibble: 12 × 12 #>    franchise_id franchise_name    h2h_wins h2h_losses h2h_ties h2h_winpct #>           <int> <chr>                <int>      <int>    <int>      <dbl> #>  1            1 Fake News                8          5        0     0.615  #>  2            2 KingGabe                 1         12        0     0.0769 #>  3            3 solarpool                8          5        0     0.615  #>  4            4 The FANTom Menace        8          5        0     0.615  #>  5            5 Barbarians               6          7        0     0.462  #>  6            6 sox05syd                 8          5        0     0.615  #>  7            7 Flipadelphia05          10          3        0     0.769  #>  8            8 Hocka Flocka             7          6        0     0.538  #>  9            9 ZPMiller97               4          9        0     0.308  #> 10           10 JMLarkin                 1         12        0     0.0769 #> 11           11 Permian Panthers         8          5        0     0.615  #> 12           12 jaydk                    9          4        0     0.692  #> # ℹ 6 more variables: points_for <dbl>, points_against <dbl>, #> #   potential_points <dbl>, allplay_wins <dbl>, allplay_losses <dbl>, #> #   allplay_winpct <dbl> # }"},{"path":"https://ffscrapr.ffverse.com/reference/ff_starter_positions.html","id":null,"dir":"Reference","previous_headings":"","what":"Get Starting Lineup Settings — ff_starter_positions","title":"Get Starting Lineup Settings — ff_starter_positions","text":"function returns tidy dataframe positional lineup rules.","code":""},{"path":"https://ffscrapr.ffverse.com/reference/ff_starter_positions.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get Starting Lineup Settings — ff_starter_positions","text":"","code":"ff_starter_positions(conn, ...)  # S3 method for espn_conn ff_starter_positions(conn, ...)  # S3 method for flea_conn ff_starter_positions(conn, ...)  # S3 method for mfl_conn ff_starter_positions(conn, ...)  # S3 method for sleeper_conn ff_starter_positions(conn, ...)  # S3 method for template_conn ff_starter_positions(conn, ...)"},{"path":"https://ffscrapr.ffverse.com/reference/ff_starter_positions.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get Starting Lineup Settings — ff_starter_positions","text":"conn list object created ff_connect() ... arguments (currently unused)","code":""},{"path":"https://ffscrapr.ffverse.com/reference/ff_starter_positions.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get Starting Lineup Settings — ff_starter_positions","text":"tidy dataframe positional lineup rules, one row per position minimum maximum starters well total starter calculations.","code":""},{"path":"https://ffscrapr.ffverse.com/reference/ff_starter_positions.html","id":"methods-by-class-","dir":"Reference","previous_headings":"","what":"Methods (by class)","title":"Get Starting Lineup Settings — ff_starter_positions","text":"ff_starter_positions(espn_conn): ESPN: returns min/max starters main player position ff_starter_positions(flea_conn): Fleaflicker: returns minimum maximum starters player position. ff_starter_positions(mfl_conn): MFL: returns minimum maximum starters player position. ff_starter_positions(sleeper_conn): Sleeper: returns minimum maximum starters player position. ff_starter_positions(template_conn): Template: returns minimum maximum starters player position.","code":""},{"path":"https://ffscrapr.ffverse.com/reference/ff_starter_positions.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get Starting Lineup Settings — ff_starter_positions","text":"","code":"# \\donttest{ try({ # try only shown here because sometimes CRAN checks are weird   conn <- espn_connect(season = 2020, league_id = 1178049)   ff_starter_positions(conn) }) # end try #> # A tibble: 6 × 7 #>   pos     min   max offense_starters defense_starters kdst_starters #>   <chr> <int> <int>            <int>            <int>         <int> #> 1 QB        1     1                9                0             2 #> 2 RB        2     4                9                0             2 #> 3 WR        3     5                9                0             2 #> 4 TE        1     3                9                0             2 #> 5 DST       1     1                9                0             2 #> 6 K         1     1                9                0             2 #> # ℹ 1 more variable: total_starters <int> # }  # \\donttest{ try({ # try only shown here because sometimes CRAN checks are weird   conn <- fleaflicker_connect(season = 2020, league_id = 206154)   ff_starter_positions(conn) }) # end try #> # A tibble: 10 × 7 #>    pos     min   max offense_starters defense_starters kdst_starters #>    <chr> <int> <int>            <int>            <int>         <int> #>  1 CB        2     4                7                8             1 #>  2 EDR       0     4                7                8             1 #>  3 IL        0     4                7                8             1 #>  4 K         1     1                7                8             1 #>  5 LB        2     4                7                8             1 #>  6 QB        1     1                7                8             1 #>  7 RB        2     3                7                8             1 #>  8 S         2     4                7                8             1 #>  9 TE        1     2                7                8             1 #> 10 WR        2     3                7                8             1 #> # ℹ 1 more variable: total_starters <int> # }  # \\donttest{ try({ # try only shown here because sometimes CRAN checks are weird   dlfidp_conn <- mfl_connect(2020, league_id = 33158)   ff_starter_positions(conn = dlfidp_conn) }) # end try #> # A tibble: 9 × 7 #>   pos     min   max offense_starters defense_starters kdst_starters #>   <chr> <int> <int>            <dbl>            <dbl>         <int> #> 1 CB        2     4                8               10             0 #> 2 DE        2     4                8               10             0 #> 3 DT        1     3                8               10             0 #> 4 LB        2     4                8               10             0 #> 5 QB        1     1                8               10             0 #> 6 RB        1     6                8               10             0 #> 7 S         1     3                8               10             0 #> 8 TE        0     5                8               10             0 #> 9 WR        1     6                8               10             0 #> # ℹ 1 more variable: total_starters <int> # }  # \\donttest{ try({ # try only shown here because sometimes CRAN checks are weird   jml_conn <- sleeper_connect(league_id = \"652718526494253056\", season = 2021)   ff_starter_positions(jml_conn) }) # end try #> # A tibble: 4 × 6 #>   pos     min   max offense_starters defense_starters total_starters #>   <chr> <int> <int>            <int>            <int>          <int> #> 1 QB        1     1                9                0              9 #> 2 RB        2     5                9                0              9 #> 3 TE        1     4                9                0              9 #> 4 WR        2     5                9                0              9 # }  # \\donttest{ template_conn <- ff_template(roster_type = \"idp\") ff_starter_positions(template_conn) #> # A tibble: 9 × 7 #>   pos     min   max offense_starters defense_starters kdst_starters #>   <chr> <dbl> <dbl>            <dbl>            <dbl>         <dbl> #> 1 QB        1     2               10               10             0 #> 2 RB        2     5               10               10             0 #> 3 WR        3     6               10               10             0 #> 4 TE        1     4               10               10             0 #> 5 DT        1     3               10               10             0 #> 6 DE        2     4               10               10             0 #> 7 LB        2     4               10               10             0 #> 8 CB        2     4               10               10             0 #> 9 S         1     3               10               10             0 #> # ℹ 1 more variable: total_starters <dbl> # }"},{"path":"https://ffscrapr.ffverse.com/reference/ff_starters.html","id":null,"dir":"Reference","previous_headings":"","what":"Get Starting Lineups — ff_starters","title":"Get Starting Lineups — ff_starters","text":"function returns tidy dataframe one row every starter (bench) every week scoring, available.","code":""},{"path":"https://ffscrapr.ffverse.com/reference/ff_starters.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get Starting Lineups — ff_starters","text":"","code":"ff_starters(conn, ...)  # S3 method for espn_conn ff_starters(conn, weeks = 1:17, ...)  # S3 method for flea_conn ff_starters(conn, week = 1:17, ...)  # S3 method for mfl_conn ff_starters(conn, week = 1:17, season = NULL, ...)  # S3 method for sleeper_conn ff_starters(conn, week = 1:17, ...)"},{"path":"https://ffscrapr.ffverse.com/reference/ff_starters.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get Starting Lineups — ff_starters","text":"conn list object created ff_connect() ... arguments (currently unused) weeks weeks calculate, number numeric vector week numeric one YTD (year--date) AVG (average date) season season interest - generally recent 2-3 seasons available","code":""},{"path":"https://ffscrapr.ffverse.com/reference/ff_starters.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get Starting Lineups — ff_starters","text":"tidy dataframe every player every week, including flag whether started ","code":""},{"path":"https://ffscrapr.ffverse.com/reference/ff_starters.html","id":"methods-by-class-","dir":"Reference","previous_headings":"","what":"Methods (by class)","title":"Get Starting Lineups — ff_starters","text":"ff_starters(espn_conn): ESPN: returns started well scored. ff_starters(flea_conn): Fleaflicker: returns started well scored. ff_starters(mfl_conn): MFL: returns player fantasy scores week (actual stats) ff_starters(sleeper_conn): Sleeper: returns \"\" started, without scoring/stats data. returns season specified initial connection object.","code":""},{"path":"https://ffscrapr.ffverse.com/reference/ff_starters.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get Starting Lineups — ff_starters","text":"","code":"# \\donttest{ try({ # try only shown here because sometimes CRAN checks are weird   conn <- espn_connect(season = 2020, league_id = 1178049)   ff_starters(conn, weeks = 1:3) }) # end try #> # A tibble: 714 × 12 #>     week franchise_id franchise_name    franchise_score lineup_slot player_score #>    <int>        <int> <chr>                       <dbl> <chr>              <dbl> #>  1     1            1 Rushin' Collusion             118 QB                  27.5 #>  2     1            1 Rushin' Collusion             118 RB                   9.2 #>  3     1            1 Rushin' Collusion             118 RB                   6.7 #>  4     1            1 Rushin' Collusion             118 WR                  13.1 #>  5     1            1 Rushin' Collusion             118 WR                   8.6 #>  6     1            1 Rushin' Collusion             118 WR                  12.6 #>  7     1            1 Rushin' Collusion             118 TE                  16.6 #>  8     1            1 Rushin' Collusion             118 DST                  0   #>  9     1            1 Rushin' Collusion             118 K                    9   #> 10     1            1 Rushin' Collusion             118 BE                   4.8 #> # ℹ 704 more rows #> # ℹ 6 more variables: projected_score <dbl>, player_id <int>, #> #   player_name <chr>, pos <chr>, team <chr>, eligible_lineup_slots <list> # }  # \\donttest{ try({ # try only shown here because sometimes CRAN checks are weird   conn <- fleaflicker_connect(season = 2020, league_id = 206154)   ff_starters(conn) }) # end try #> # A tibble: 11,826 × 15 #>     week game_id  group franchise franchise_id franchise_name     starter_status #>    <int> <chr>    <chr> <chr>            <int> <chr>              <chr>          #>  1     1 46301545 START home           1371776 Winter Hill Black… QB             #>  2     1 46301545 START home           1371776 Winter Hill Black… RB             #>  3     1 46301545 START home           1371776 Winter Hill Black… RB             #>  4     1 46301545 START home           1371776 Winter Hill Black… WR             #>  5     1 46301545 START home           1371776 Winter Hill Black… WR             #>  6     1 46301545 START home           1371776 Winter Hill Black… RB/WR/TE       #>  7     1 46301545 START home           1371776 Winter Hill Black… TE             #>  8     1 46301545 START home           1371776 Winter Hill Black… K              #>  9     1 46301545 START home           1371776 Winter Hill Black… DB             #> 10     1 46301545 START home           1371776 Winter Hill Black… DB             #> # ℹ 11,816 more rows #> # ℹ 8 more variables: player_id <int>, player_name <chr>, pos <chr>, #> #   team <chr>, injury_type <chr>, injury_desc <chr>, injury_severity <chr>, #> #   player_score <dbl> # }  # \\donttest{ try({ # try only shown here because sometimes CRAN checks are weird   dlf_conn <- mfl_connect(2020, league_id = 37920)   ff_starters(conn = dlf_conn) }) # end try #> # A tibble: 6,371 × 11 #>    franchise_id franchise_name          season  week starter_status should_start #>    <chr>        <chr>                    <dbl> <int> <chr>                 <dbl> #>  1 0013         Advance Reptilian Sola…   2020     1 starter                   1 #>  2 0013         Advance Reptilian Sola…   2020     1 starter                   1 #>  3 0013         Advance Reptilian Sola…   2020     1 starter                   1 #>  4 0013         Advance Reptilian Sola…   2020     1 starter                   1 #>  5 0013         Advance Reptilian Sola…   2020     1 starter                   1 #>  6 0013         Advance Reptilian Sola…   2020     1 starter                   1 #>  7 0013         Advance Reptilian Sola…   2020     1 starter                   1 #>  8 0013         Advance Reptilian Sola…   2020     1 starter                   1 #>  9 0013         Advance Reptilian Sola…   2020     1 starter                   1 #> 10 0013         Advance Reptilian Sola…   2020     1 nonstarter                0 #> # ℹ 6,361 more rows #> # ℹ 5 more variables: player_score <dbl>, player_id <chr>, player_name <chr>, #> #   pos <chr>, team <chr> # }  # \\donttest{ try({ # try only shown here because sometimes CRAN checks are weird   jml_conn <- sleeper_connect(league_id = \"522458773317046272\", season = 2020)   ff_starters(jml_conn, week = 3) }) # end try #> # A tibble: 344 × 8 #>    franchise_id franchise_name  week starter_status player_id player_name  pos   #>           <int> <chr>          <dbl> <chr>          <chr>     <chr>        <chr> #>  1            1 Fake News          3 nonstarter     7082      Dalton Keene TE    #>  2            1 Fake News          3 nonstarter     6826      Cole Kmet    TE    #>  3            1 Fake News          3 nonstarter     6804      Jordan Love  QB    #>  4            1 Fake News          3 nonstarter     676       LeSean McCoy RB    #>  5            1 Fake News          3 nonstarter     6149      Darius Slay… WR    #>  6            1 Fake News          3 nonstarter     6068      Devine Ozig… RB    #>  7            1 Fake News          3 nonstarter     6001      Drew Sample  TE    #>  8            1 Fake News          3 nonstarter     5965      Miles Boykin WR    #>  9            1 Fake News          3 nonstarter     5068      Kerryon Joh… RB    #> 10            1 Fake News          3 nonstarter     5022      Dallas Goed… TE    #> # ℹ 334 more rows #> # ℹ 1 more variable: team <chr> # }"},{"path":"https://ffscrapr.ffverse.com/reference/ff_template.html","id":null,"dir":"Reference","previous_headings":"","what":"Default conn objects — ff_template","title":"Default conn objects — ff_template","text":"function creates connection league templates, can used instead real conn object following functions: ff_scoring(), ff_scoringhistory(), ff_starterpositions().","code":""},{"path":"https://ffscrapr.ffverse.com/reference/ff_template.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Default conn objects — ff_template","text":"","code":"ff_template(   scoring_type = c(\"ppr\", \"half_ppr\", \"zero_ppr\", \"sfb11\"),   roster_type = c(\"1qb\", \"superflex\", \"sfb11\", \"idp\") )"},{"path":"https://ffscrapr.ffverse.com/reference/ff_template.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Default conn objects — ff_template","text":"scoring_type One c(\"default\", \"ppr\", \"half_ppr\", \"zero_ppr\", \"te_prem\", \"sfb11\") roster_type One c(\"1qb\", \"superflex\",\"sfb11\", \"idp\")","code":""},{"path":"https://ffscrapr.ffverse.com/reference/ff_template.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Default conn objects — ff_template","text":"connection object can used ff_scoring(), ff_scoringhistory(), ff_starterpositions()","code":""},{"path":"https://ffscrapr.ffverse.com/reference/ff_template.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Default conn objects — ff_template","text":"Scoring types defined : ppr: 6 pt passing/rushing/receiving touchdowns, 0.1 rushing/receiving yards, 1 point per reception, -2 fumbles/interceptions half_ppr: ppr 0.5 points per reception zero_ppr: ppr 0 points per reception te_prem: ppr TEs get 1.5 points per reception sfb11: SFB11 scoring defined https://scottfishbowl.com Roster settings defined : 1qb:  Starts 1 QB, 2 RB, 3 WR, 1 TE, 2 FLEX superflex: Starts 1 QB, 2 RB, 3 WR, 1 TE, 2 FLEX, 1 SUPERFLEX sfb11: Starts 1 QB, 2 RB, 3 WR, 1 TE, 3 FLEX, 1 SUPERFLEX (flex positions can also start kicker) idp: Starts 1QB also starts 3 DL, 3 LB, 3 DB, two IDP FLEX","code":""},{"path":"https://ffscrapr.ffverse.com/reference/ff_transactions.html","id":null,"dir":"Reference","previous_headings":"","what":"Get League Transactions — ff_transactions","title":"Get League Transactions — ff_transactions","text":"function returns tidy dataframe transactions - generally one row per player per transaction per team. trade represented twice, per team.","code":""},{"path":"https://ffscrapr.ffverse.com/reference/ff_transactions.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get League Transactions — ff_transactions","text":"","code":"ff_transactions(conn, ...)  # S3 method for espn_conn ff_transactions(conn, limit = 1000, ...)  # S3 method for flea_conn ff_transactions(conn, franchise_id = NULL, ...)  # S3 method for mfl_conn ff_transactions(conn, transaction_type = \"*\", ...)  # S3 method for sleeper_conn ff_transactions(conn, week = 1:17, ...)"},{"path":"https://ffscrapr.ffverse.com/reference/ff_transactions.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get League Transactions — ff_transactions","text":"conn list object created ff_connect() ... additional args methods limit number recent transactions return franchise_id fleaflicker returns transactions grouped franchise id, pass list filter transaction_type parameter return transactions specified type. Types : WAIVER, BBID_WAIVER, FREE_AGENT, TRADE, IR, TAXI, AUCTION_INIT, AUCTION_BID, AUCTION_WON, * . Can also pass comma-separated string.  Defaults *. Note types listed actually cleaned processed ffscrapr - need make custom api request mfl_getendpoint() receive things. week week filter transactions - 1 returns offseason transactions. Default 1:17 returns transactions.","code":""},{"path":"https://ffscrapr.ffverse.com/reference/ff_transactions.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get League Transactions — ff_transactions","text":"tidy dataframe transaction data","code":""},{"path":"https://ffscrapr.ffverse.com/reference/ff_transactions.html","id":"methods-by-class-","dir":"Reference","previous_headings":"","what":"Methods (by class)","title":"Get League Transactions — ff_transactions","text":"ff_transactions(espn_conn): ESPN: returns adds, drops, trades. Requires private/auth-cookie. ff_transactions(flea_conn): Fleaflicker: returns transactions, including free agents, waivers, trades. ff_transactions(mfl_conn): MFL: returns transactions, including auction, free agents, IR, TS, waivers, trades. ff_transactions(sleeper_conn): Sleeper: returns transactions, including free agents, waivers, trades.","code":""},{"path":"https://ffscrapr.ffverse.com/reference/ff_transactions.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get League Transactions — ff_transactions","text":"","code":"if (FALSE) { # Marked as don't run because this endpoint requires private authentication  conn <- espn_connect(   season = 2020,   league_id = 1178049,   swid = Sys.getenv(\"TAN_SWID\"),   espn_s2 = Sys.getenv(\"TAN_ESPN_S2\") ) ff_transactions(conn) }  # \\donttest{ try({ # try only shown here because sometimes CRAN checks are weird   conn <- fleaflicker_connect(season = 2020, league_id = 312861)   ff_transactions(conn) }) # end try #> # A tibble: 494 × 12 #>    timestamp           type      type_desc franchise_id franchise_name player_id #>    <dttm>              <chr>     <chr>            <int> <chr>          <glue>    #>  1 2022-04-30 02:20:15 free_age… dropped        1582423 The Verblande… 12934     #>  2 2022-04-30 02:18:46 free_age… dropped        1582423 The Verblande… 12906     #>  3 2022-04-30 02:18:33 free_age… dropped        1582423 The Verblande… 7378      #>  4 2022-04-30 02:18:24 free_age… dropped        1582423 The Verblande… 6660      #>  5 2022-01-01 11:00:00 free_age… dropped        1581720 brosene's Team 5479      #>  6 2022-01-01 11:00:00 waiver    added          1581720 brosene's Team 11245     #>  7 2021-12-30 11:00:00 free_age… dropped        1581720 brosene's Team 12223     #>  8 2021-12-30 11:00:00 free_age… dropped        1581720 brosene's Team 10449     #>  9 2021-12-30 11:00:00 waiver    added          1581720 brosene's Team 11300     #> 10 2021-12-30 11:00:00 waiver    added          1581720 brosene's Team 16404     #> # ℹ 484 more rows #> # ℹ 6 more variables: player_name <glue>, pos <chr>, team <chr>, #> #   trade_partner_id <int>, trade_partner_name <chr>, trade_id <int> # }  # \\donttest{ try({ # try only shown here because sometimes CRAN checks are weird   dlf_conn <- mfl_connect(2019, league_id = 37920)   ff_transactions(dlf_conn) }) # end try #> # A tibble: 1,146 × 12 #>    timestamp           type      type_desc franchise_id franchise_name player_id #>    <dttm>              <chr>     <chr>     <chr>        <chr>          <chr>     #>  1 2019-12-19 11:56:49 FREE_AGE… added     0003         Electric Spid… 13868     #>  2 2019-12-19 11:56:49 FREE_AGE… dropped   0003         Electric Spid… 13387     #>  3 2019-12-19 03:03:13 FREE_AGE… added     0019         Advance Repti… 12857     #>  4 2019-12-19 03:03:13 FREE_AGE… dropped   0019         Advance Repti… 11186     #>  5 2019-12-19 03:02:26 FREE_AGE… added     0019         Advance Repti… 13868     #>  6 2019-12-19 03:02:26 FREE_AGE… dropped   0019         Advance Repti… 14305     #>  7 2019-12-15 17:28:15 FREE_AGE… added     0003         Electric Spid… 12197     #>  8 2019-12-15 17:27:28 FREE_AGE… dropped   0003         Electric Spid… 12623     #>  9 2019-12-15 17:27:00 FREE_AGE… added     0003         Electric Spid… 13387     #> 10 2019-12-15 17:26:27 IR        deactiva… 0003         Electric Spid… 14138     #> # ℹ 1,136 more rows #> # ℹ 6 more variables: player_name <chr>, pos <chr>, team <chr>, #> #   bbid_spent <dbl>, trade_partner <chr>, comments <chr> # } # \\donttest{ try({ # try only shown here because sometimes CRAN checks are weird   jml_conn <- ff_connect(platform = \"sleeper\", league_id = \"522458773317046272\", season = 2020)   ff_transactions(jml_conn, week = 1:2) }) # end try #> # A tibble: 661 × 13 #>    timestamp           type      type_desc franchise_id franchise_name player_id #>    <dttm>              <chr>     <chr>     <chr>        <chr>          <chr>     #>  1 2020-09-23 08:04:23 waiver_c… added     5            Barbarians     5162      #>  2 2020-09-23 08:04:23 waiver_c… dropped   5            Barbarians     6074      #>  3 2020-09-23 08:04:23 waiver_c… added     3            solarpool      4054      #>  4 2020-09-23 08:04:23 waiver_f… added     3            solarpool      2431      #>  5 2020-09-23 08:04:23 waiver_f… added     4            The FANTom Me… 5001      #>  6 2020-09-23 08:04:23 waiver_f… dropped   4            The FANTom Me… 4994      #>  7 2020-09-23 08:04:23 waiver_c… added     4            The FANTom Me… 2431      #>  8 2020-09-23 08:04:23 waiver_c… dropped   4            The FANTom Me… 4994      #>  9 2020-09-23 08:04:23 waiver_f… added     6            sox05syd       6001      #> 10 2020-09-23 08:04:23 waiver_f… dropped   6            sox05syd       827       #> # ℹ 651 more rows #> # ℹ 7 more variables: player_name <chr>, pos <chr>, team <chr>, #> #   bbid_amount <int>, trade_partner <chr>, waiver_priority <int>, #> #   comment <chr> # }"},{"path":"https://ffscrapr.ffverse.com/reference/ff_userleagues.html","id":null,"dir":"Reference","previous_headings":"","what":"Get User Leagues — ff_userleagues","title":"Get User Leagues — ff_userleagues","text":"function returns tidy dataframe one row every league user . requries authentication cookies MFL usage.","code":""},{"path":"https://ffscrapr.ffverse.com/reference/ff_userleagues.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get User Leagues — ff_userleagues","text":"","code":"ff_userleagues(conn, ...)  # S3 method for espn_conn ff_userleagues(conn = NULL, ...)  # S3 method for flea_conn ff_userleagues(conn = NULL, user_email = NULL, season = NULL, ...)  # S3 method for mfl_conn ff_userleagues(conn, season = NULL, ...)  # S3 method for sleeper_conn ff_userleagues(conn = NULL, user_name = NULL, season = NULL, ...)"},{"path":"https://ffscrapr.ffverse.com/reference/ff_userleagues.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get User Leagues — ff_userleagues","text":"conn connection object created ff_connect() ... arguments may passed methods (method consistency) user_email username look - defaults user created conn available season season look leagues user_name username look - defaults user created conn available","code":""},{"path":"https://ffscrapr.ffverse.com/reference/ff_userleagues.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get User Leagues — ff_userleagues","text":"tidy dataframe one row every league user ","code":""},{"path":"https://ffscrapr.ffverse.com/reference/ff_userleagues.html","id":"methods-by-class-","dir":"Reference","previous_headings":"","what":"Methods (by class)","title":"Get User Leagues — ff_userleagues","text":"ff_userleagues(espn_conn): ESPN: support lookup user leagues email user ID time. ff_userleagues(flea_conn): flea: returns listing leagues given user_email ff_userleagues(mfl_conn): MFL: username/password, return list user leagues. ff_userleagues(sleeper_conn): Sleeper: returns listing leagues given user_id user_name","code":""},{"path":[]},{"path":"https://ffscrapr.ffverse.com/reference/ffscrapr-package.html","id":null,"dir":"Reference","previous_headings":"","what":"ffscrapr: API Client for Fantasy Football League Platforms — ffscrapr-package","title":"ffscrapr: API Client for Fantasy Football League Platforms — ffscrapr-package","text":"Helps access various Fantasy Football APIs handling authentication rate-limiting, forming appropriate calls, returning tidy dataframes can easily connected data sources.","code":""},{"path":[]},{"path":"https://ffscrapr.ffverse.com/reference/ffscrapr-package.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"ffscrapr: API Client for Fantasy Football League Platforms — ffscrapr-package","text":"Maintainer: Tan Ho tan@tanho.ca contributors: Tony ElHabr anthonyelhabr@gmail.com [contributor] Joe Sydlowski syd235@gmail.com [contributor]","code":""},{"path":"https://ffscrapr.ffverse.com/reference/fleaflicker_connect.html","id":null,"dir":"Reference","previous_headings":"","what":"Connect to Fleaflicker League — fleaflicker_connect","title":"Connect to Fleaflicker League — fleaflicker_connect","text":"function creates connection object stores parameters user ID available.","code":""},{"path":"https://ffscrapr.ffverse.com/reference/fleaflicker_connect.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Connect to Fleaflicker League — fleaflicker_connect","text":"","code":"fleaflicker_connect(   season = NULL,   league_id = NULL,   user_email = NULL,   user_agent = NULL,   rate_limit = TRUE,   rate_limit_number = NULL,   rate_limit_seconds = NULL,   ... )"},{"path":"https://ffscrapr.ffverse.com/reference/fleaflicker_connect.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Connect to Fleaflicker League — fleaflicker_connect","text":"season Season access Fleaflicker - missing, guess based system date (current year March later, otherwise previous year) league_id League ID user_email Optional - attempts get user's user ID email user_agent User agent self-identify (optional) rate_limit TRUE default - turn rate limiting FALSE rate_limit_number number calls per rate_limit_seconds, suggested 1000 calls per 60 seconds rate_limit_seconds number seconds denominator rate_limit ... arguments (methods, R compat)","code":""},{"path":"https://ffscrapr.ffverse.com/reference/fleaflicker_connect.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Connect to Fleaflicker League — fleaflicker_connect","text":"list stores Fleaflicker connection objects","code":""},{"path":"https://ffscrapr.ffverse.com/reference/fleaflicker_getendpoint.html","id":null,"dir":"Reference","previous_headings":"","what":"GET any Fleaflicker endpoint — fleaflicker_getendpoint","title":"GET any Fleaflicker endpoint — fleaflicker_getendpoint","text":"endpoint names HTTP parameters (.e. argument names) CASE SENSITIVE passed exactly displayed Fleaflicker API reference page.","code":""},{"path":"https://ffscrapr.ffverse.com/reference/fleaflicker_getendpoint.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"GET any Fleaflicker endpoint — fleaflicker_getendpoint","text":"","code":"fleaflicker_getendpoint(endpoint, ...)"},{"path":"https://ffscrapr.ffverse.com/reference/fleaflicker_getendpoint.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"GET any Fleaflicker endpoint — fleaflicker_getendpoint","text":"endpoint string defining endpoint return API ... Arguments passed \"argumentname = argument\" HTTP query parameter","code":""},{"path":"https://ffscrapr.ffverse.com/reference/fleaflicker_getendpoint.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"GET any Fleaflicker endpoint — fleaflicker_getendpoint","text":"list object containing query, response, parsed content.","code":""},{"path":"https://ffscrapr.ffverse.com/reference/fleaflicker_getendpoint.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"GET any Fleaflicker endpoint — fleaflicker_getendpoint","text":"Check vignette details example usage.","code":""},{"path":[]},{"path":"https://ffscrapr.ffverse.com/reference/fleaflicker_players.html","id":null,"dir":"Reference","previous_headings":"","what":"Fleaflicker players library — fleaflicker_players","title":"Fleaflicker players library — fleaflicker_players","text":"cached table Fleaflicker NFL players. store memory session! (via memoise zzz.R)","code":""},{"path":"https://ffscrapr.ffverse.com/reference/fleaflicker_players.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Fleaflicker players library — fleaflicker_players","text":"","code":"fleaflicker_players(conn, page_limit = NULL)"},{"path":"https://ffscrapr.ffverse.com/reference/fleaflicker_players.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Fleaflicker players library — fleaflicker_players","text":"conn conn object created ff_connect() page_limit number limiting number players return, NULL (default) returns ","code":""},{"path":"https://ffscrapr.ffverse.com/reference/fleaflicker_players.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Fleaflicker players library — fleaflicker_players","text":"dataframe containing ~7000+ players Fleaflicker database","code":""},{"path":"https://ffscrapr.ffverse.com/reference/fleaflicker_players.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Fleaflicker players library — fleaflicker_players","text":"","code":"# \\donttest{ try({ # try only shown here because sometimes CRAN checks are weird   conn <- fleaflicker_connect(2020, 312861)   player_list <- fleaflicker_players(conn, page_limit = 2) }) # end try # }"},{"path":"https://ffscrapr.ffverse.com/reference/fleaflicker_userleagues.html","id":null,"dir":"Reference","previous_headings":"","what":"Fleaflicker - Get User Leagues — fleaflicker_userleagues","title":"Fleaflicker - Get User Leagues — fleaflicker_userleagues","text":"function returns leagues specific user . variant can used without first creating connection object.","code":""},{"path":"https://ffscrapr.ffverse.com/reference/fleaflicker_userleagues.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Fleaflicker - Get User Leagues — fleaflicker_userleagues","text":"","code":"fleaflicker_userleagues(user_email, season = NULL)"},{"path":"https://ffscrapr.ffverse.com/reference/fleaflicker_userleagues.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Fleaflicker - Get User Leagues — fleaflicker_userleagues","text":"user_email username look season season return leagues - defaults current year based heuristics","code":""},{"path":"https://ffscrapr.ffverse.com/reference/fleaflicker_userleagues.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Fleaflicker - Get User Leagues — fleaflicker_userleagues","text":"dataframe leagues specified user","code":""},{"path":[]},{"path":"https://ffscrapr.ffverse.com/reference/mfl_allrules.html","id":null,"dir":"Reference","previous_headings":"","what":"MFL rules library - memoised via zzz.R — mfl_allrules","title":"MFL rules library - memoised via zzz.R — mfl_allrules","text":"MFL rules library - memoised via zzz.R","code":""},{"path":"https://ffscrapr.ffverse.com/reference/mfl_allrules.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"MFL rules library - memoised via zzz.R — mfl_allrules","text":"","code":"mfl_allrules(conn)"},{"path":"https://ffscrapr.ffverse.com/reference/mfl_connect.html","id":null,"dir":"Reference","previous_headings":"","what":"Connect to MFL League — mfl_connect","title":"Connect to MFL League — mfl_connect","text":"function creates connection object stores parameters gets login-cookie available","code":""},{"path":"https://ffscrapr.ffverse.com/reference/mfl_connect.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Connect to MFL League — mfl_connect","text":"","code":"mfl_connect(   season = NULL,   league_id = NULL,   APIKEY = NULL,   user_name = NULL,   password = NULL,   user_agent = NULL,   rate_limit = TRUE,   rate_limit_number = NULL,   rate_limit_seconds = NULL,   ... )"},{"path":"https://ffscrapr.ffverse.com/reference/mfl_connect.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Connect to MFL League — mfl_connect","text":"season Season access MFL - missing, guess based system date (current year March later, otherwise previous year) league_id league_id Numeric ID parameter league, typically found URL APIKEY APIKEY - optional - allows access private leagues. Key unique league accessible Developer's API page (currently assuming one league time) user_name MFL user_name - optional - supplied conjunction password, attempt retrieve authentication token password MFL password - optional - supplied conjunction user_name, attempt retrieve authentication token user_agent string representing user agent used identify calls - may find improved rate_limits verified token rate_limit TRUE default, pass FALSE turn rate limiting rate_limit_number number calls per rate_limit_seconds, suggested 60 calls per 60 seconds rate_limit_seconds number seconds denominator rate_limit ... silently swallows unused arguments","code":""},{"path":"https://ffscrapr.ffverse.com/reference/mfl_connect.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Connect to MFL League — mfl_connect","text":"connection object used ff_* functions","code":""},{"path":"https://ffscrapr.ffverse.com/reference/mfl_connect.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Connect to MFL League — mfl_connect","text":"","code":"# \\donttest{ mfl_connect(season = 2020, league_id = 54040) #> <MFL connection 2020_54040> #> List of 5 #>  $ platform   : chr \"MFL\" #>  $ season     : num 2020 #>  $ league_id  : chr \"54040\" #>  $ APIKEY     : NULL #>  $ auth_cookie: NULL #>  - attr(*, \"class\")= chr \"mfl_conn\" mfl_connect(season = 2019, league_id = 54040, rate_limit = FALSE) #> <MFL connection 2019_54040> #> List of 5 #>  $ platform   : chr \"MFL\" #>  $ season     : num 2019 #>  $ league_id  : chr \"54040\" #>  $ APIKEY     : NULL #>  $ auth_cookie: NULL #>  - attr(*, \"class\")= chr \"mfl_conn\" # }"},{"path":"https://ffscrapr.ffverse.com/reference/mfl_getendpoint.html","id":null,"dir":"Reference","previous_headings":"","what":"GET any MFL endpoint — mfl_getendpoint","title":"GET any MFL endpoint — mfl_getendpoint","text":"Create GET request MFL export endpoint.","code":""},{"path":"https://ffscrapr.ffverse.com/reference/mfl_getendpoint.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"GET any MFL endpoint — mfl_getendpoint","text":"","code":"mfl_getendpoint(conn, endpoint, ...)"},{"path":"https://ffscrapr.ffverse.com/reference/mfl_getendpoint.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"GET any MFL endpoint — mfl_getendpoint","text":"conn list object created mfl_connect() endpoint string defining endpoint return API ... Arguments passed \"argumentname = argument\" HTTP query parameter","code":""},{"path":"https://ffscrapr.ffverse.com/reference/mfl_getendpoint.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"GET any MFL endpoint — mfl_getendpoint","text":"list object containing query, response, parsed content.","code":""},{"path":"https://ffscrapr.ffverse.com/reference/mfl_getendpoint.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"GET any MFL endpoint — mfl_getendpoint","text":"function read connection object automatically pass rate-limiting, league ID (L), authentication cookie, /API key (APIKEY) configured connection object. endpoint names HTTP parameters (.e. argument names) CASE SENSITIVE passed exactly displayed MFL API reference page. Check vignette details example usage.","code":""},{"path":[]},{"path":"https://ffscrapr.ffverse.com/reference/mfl_players.html","id":null,"dir":"Reference","previous_headings":"","what":"MFL players library — mfl_players","title":"MFL players library — mfl_players","text":"cached table MFL players. store memory session! (via memoise zzz.R)","code":""},{"path":"https://ffscrapr.ffverse.com/reference/mfl_players.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"MFL players library — mfl_players","text":"","code":"mfl_players(conn = NULL)"},{"path":"https://ffscrapr.ffverse.com/reference/mfl_players.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"MFL players library — mfl_players","text":"conn optionally, pass conn object generated ff_connect receive league-specific custom players","code":""},{"path":"https://ffscrapr.ffverse.com/reference/mfl_players.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"MFL players library — mfl_players","text":"dataframe containing ~2000+ players MFL database","code":""},{"path":"https://ffscrapr.ffverse.com/reference/mfl_players.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"MFL players library — mfl_players","text":"","code":"# \\donttest{ try({ # try only shown here because sometimes CRAN checks are weird   player_list <- mfl_players()   dplyr::sample_n(player_list, 5) }) # end try #> # A tibble: 5 × 25 #>   player_id player_name        pos     age team  status draft_year draft_team #>   <chr>     <chr>              <chr> <dbl> <chr> <chr>       <int> <chr>      #> 1 14384     Reed, Malik        DE     27.6 FA    NA           2019 FA         #> 2 15093     Copeland, Marquise DT     26.8 FA    NA           2019 FA         #> 3 16295     Conner, Chamarri   S      23.7 KCC   NA           2023 KCC        #> 4 11265     Gholston, William  DT     32.6 TBB   NA           2013 TBB        #> 5 15955     Yeast, Russ        S      24.8 LAR   NA           2022 LAR        #> # ℹ 17 more variables: draft_round <chr>, draft_pick <chr>, #> #   stats_global_id <chr>, fleaflicker_id <chr>, stats_id <chr>, cbs_id <chr>, #> #   sportsdata_id <chr>, rotowire_id <chr>, rotoworld_id <chr>, espn_id <chr>, #> #   nfl_id <chr>, jersey <chr>, height <chr>, weight <chr>, college <chr>, #> #   twitter_username <chr>, birthdate <date> # }"},{"path":"https://ffscrapr.ffverse.com/reference/nflfastr_rosters.html","id":null,"dir":"Reference","previous_headings":"","what":"Import nflfastr roster data — nflfastr_rosters","title":"Import nflfastr roster data — nflfastr_rosters","text":"Deprecated favour nflreadr::load_rosters()","code":""},{"path":"https://ffscrapr.ffverse.com/reference/nflfastr_rosters.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Import nflfastr roster data — nflfastr_rosters","text":"","code":"nflfastr_rosters(...)"},{"path":"https://ffscrapr.ffverse.com/reference/nflfastr_rosters.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Import nflfastr roster data — nflfastr_rosters","text":"... deprecated","code":""},{"path":"https://ffscrapr.ffverse.com/reference/nflfastr_stat_mapping.html","id":null,"dir":"Reference","previous_headings":"","what":"Mappings for nflfastr to fantasy platform scoring — nflfastr_stat_mapping","title":"Mappings for nflfastr to fantasy platform scoring — nflfastr_stat_mapping","text":"small helper dataframe connecting nflfastr specific fantasy platform rules.","code":""},{"path":"https://ffscrapr.ffverse.com/reference/nflfastr_stat_mapping.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Mappings for nflfastr to fantasy platform scoring — nflfastr_stat_mapping","text":"","code":"nflfastr_stat_mapping"},{"path":"https://ffscrapr.ffverse.com/reference/nflfastr_stat_mapping.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Mappings for nflfastr to fantasy platform scoring — nflfastr_stat_mapping","text":"data frame ~85 rows 3 variables: nflfastr_event column name statistic nflfastr_weekly dataset platform specific platform mapping applies ff_event name statistic platform","code":""},{"path":"https://ffscrapr.ffverse.com/reference/nflfastr_weekly.html","id":null,"dir":"Reference","previous_headings":"","what":"Import latest nflfastr weekly stats — nflfastr_weekly","title":"Import latest nflfastr weekly stats — nflfastr_weekly","text":"Deprecated favour nflreadr::load_player_stats()","code":""},{"path":"https://ffscrapr.ffverse.com/reference/nflfastr_weekly.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Import latest nflfastr weekly stats — nflfastr_weekly","text":"","code":"nflfastr_weekly(...)"},{"path":"https://ffscrapr.ffverse.com/reference/nflfastr_weekly.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Import latest nflfastr weekly stats — nflfastr_weekly","text":"... deprecated","code":""},{"path":"https://ffscrapr.ffverse.com/reference/pipe.html","id":null,"dir":"Reference","previous_headings":"","what":"Pipe operator — %>%","title":"Pipe operator — %>%","text":"See magrittr::%>% details.","code":""},{"path":"https://ffscrapr.ffverse.com/reference/release_bullets.html","id":null,"dir":"Reference","previous_headings":"","what":"Release questions — release_bullets","title":"Release questions — release_bullets","text":"Release questions","code":""},{"path":"https://ffscrapr.ffverse.com/reference/release_bullets.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Release questions — release_bullets","text":"","code":"release_bullets()"},{"path":"https://ffscrapr.ffverse.com/reference/set_unescaped_cookies.html","id":null,"dir":"Reference","previous_headings":"","what":"Add unescaped cookies — set_unescaped_cookies","title":"Add unescaped cookies — set_unescaped_cookies","text":"Useful ESPN already URL escaped","code":""},{"path":"https://ffscrapr.ffverse.com/reference/set_unescaped_cookies.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Add unescaped cookies — set_unescaped_cookies","text":"","code":"set_unescaped_cookies(...)"},{"path":"https://ffscrapr.ffverse.com/reference/set_unescaped_cookies.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Add unescaped cookies — set_unescaped_cookies","text":"... named cookie values","code":""},{"path":[]},{"path":"https://ffscrapr.ffverse.com/reference/sitrep.html","id":null,"dir":"Reference","previous_headings":"","what":"ffverse sitrep — ffverse_sitrep","title":"ffverse sitrep — ffverse_sitrep","text":"See nflreadr::ffverse_sitrep details.","code":""},{"path":"https://ffscrapr.ffverse.com/reference/sleeper_connect.html","id":null,"dir":"Reference","previous_headings":"","what":"Connect to Sleeper League — sleeper_connect","title":"Connect to Sleeper League — sleeper_connect","text":"function creates connection object stores parameters user ID available.","code":""},{"path":"https://ffscrapr.ffverse.com/reference/sleeper_connect.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Connect to Sleeper League — sleeper_connect","text":"","code":"sleeper_connect(   season = NULL,   league_id = NULL,   user_name = NULL,   user_agent = NULL,   rate_limit = TRUE,   rate_limit_number = NULL,   rate_limit_seconds = NULL,   ... )"},{"path":"https://ffscrapr.ffverse.com/reference/sleeper_connect.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Connect to Sleeper League — sleeper_connect","text":"season Season access Sleeper - missing, guess based system date (current year March later, otherwise previous year) league_id League ID (currently assuming one league time) user_name Sleeper user_name - optional - attempts get user's user ID user_agent User agent self-identify (optional) rate_limit TRUE default - turn rate limiting FALSE rate_limit_number number calls per rate_limit_seconds, suggested 1000 calls per 60 seconds rate_limit_seconds number seconds denominator rate_limit ... arguments (methods)","code":""},{"path":"https://ffscrapr.ffverse.com/reference/sleeper_connect.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Connect to Sleeper League — sleeper_connect","text":"list stores Sleeper connection objects","code":""},{"path":"https://ffscrapr.ffverse.com/reference/sleeper_draft.html","id":null,"dir":"Reference","previous_headings":"","what":"Get Sleeper Draft — sleeper_draft","title":"Get Sleeper Draft — sleeper_draft","text":"function retrieves drafts sleeper's draft ID. better supports mock drafts.","code":""},{"path":"https://ffscrapr.ffverse.com/reference/sleeper_draft.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get Sleeper Draft — sleeper_draft","text":"","code":"sleeper_draft(draft_id)"},{"path":"https://ffscrapr.ffverse.com/reference/sleeper_draft.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get Sleeper Draft — sleeper_draft","text":"draft_id draft ID found URL e.g. \"https://sleeper.com/draft/nfl/draft_id\"","code":""},{"path":"https://ffscrapr.ffverse.com/reference/sleeper_draft.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get Sleeper Draft — sleeper_draft","text":"draft dataframe","code":""},{"path":"https://ffscrapr.ffverse.com/reference/sleeper_getendpoint.html","id":null,"dir":"Reference","previous_headings":"","what":"GET any Sleeper endpoint — sleeper_getendpoint","title":"GET any Sleeper endpoint — sleeper_getendpoint","text":"endpoint names HTTP parameters (.e. argument names) CASE SENSITIVE passed exactly displayed Sleeper API reference page.","code":""},{"path":"https://ffscrapr.ffverse.com/reference/sleeper_getendpoint.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"GET any Sleeper endpoint — sleeper_getendpoint","text":"","code":"sleeper_getendpoint(endpoint, ...)"},{"path":"https://ffscrapr.ffverse.com/reference/sleeper_getendpoint.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"GET any Sleeper endpoint — sleeper_getendpoint","text":"endpoint string defining endpoint return API ... Arguments passed \"argumentname = argument\" HTTP query parameter","code":""},{"path":"https://ffscrapr.ffverse.com/reference/sleeper_getendpoint.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"GET any Sleeper endpoint — sleeper_getendpoint","text":"list object containing query, response, parsed content.","code":""},{"path":"https://ffscrapr.ffverse.com/reference/sleeper_getendpoint.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"GET any Sleeper endpoint — sleeper_getendpoint","text":"Check vignette details example usage.","code":""},{"path":[]},{"path":"https://ffscrapr.ffverse.com/reference/sleeper_players.html","id":null,"dir":"Reference","previous_headings":"","what":"Sleeper players library — sleeper_players","title":"Sleeper players library — sleeper_players","text":"cached table Sleeper NFL players. store memory session! (via memoise zzz.R)","code":""},{"path":"https://ffscrapr.ffverse.com/reference/sleeper_players.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Sleeper players library — sleeper_players","text":"","code":"sleeper_players()"},{"path":"https://ffscrapr.ffverse.com/reference/sleeper_players.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Sleeper players library — sleeper_players","text":"dataframe containing ~7000+ players Sleeper database","code":""},{"path":"https://ffscrapr.ffverse.com/reference/sleeper_players.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Sleeper players library — sleeper_players","text":"","code":"# \\donttest{ try({ # try only shown here because sometimes CRAN checks are weird   x <- sleeper_players()   dplyr::sample_n(x, 5) }) # end try #> # A tibble: 5 × 41 #>   player_id player_name      pos     age team  status  active years_exp swish_id #>   <chr>     <chr>            <chr> <dbl> <chr> <chr>   <lgl>      <int> <chr>    #> 1 5282      Duplicate Player WR     NA   CHI   Inacti… FALSE          0 NA       #> 2 6036      Ryan Davis       WR     26.9 NA    Active  TRUE           3 NA       #> 3 1305      Patrick DiMarco  FB     34.9 NA    Injure… TRUE          11 NA       #> 4 6400      Ryan Bee         DE     28.3 ARI   Active  TRUE           3 NA       #> 5 6544      Aaron Adeoye     LB     30.5 NA    Active  TRUE           3 875479   #> # ℹ 32 more variables: espn_id <chr>, fantasy_data_id <chr>, #> #   pandascore_id <chr>, rotowire_id <chr>, sportradar_id <chr>, #> #   yahoo_id <chr>, oddsjam_id <chr>, dl_trading_id <chr>, rotoworld_id <chr>, #> #   stats_id <chr>, gsis_id <chr>, height <chr>, weight <int>, #> #   fantasy_positions <chr>, number <int>, depth_chart_order <int>, #> #   depth_chart_position <chr>, practice_description <chr>, birth_date <date>, #> #   birth_city <chr>, birth_state <chr>, birth_country <chr>, … # }"},{"path":"https://ffscrapr.ffverse.com/reference/sleeper_userleagues.html","id":null,"dir":"Reference","previous_headings":"","what":"Sleeper - Get User Leagues — sleeper_userleagues","title":"Sleeper - Get User Leagues — sleeper_userleagues","text":"function returns leagues specific user . variant can used without first creating connection object.","code":""},{"path":"https://ffscrapr.ffverse.com/reference/sleeper_userleagues.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Sleeper - Get User Leagues — sleeper_userleagues","text":"","code":"sleeper_userleagues(user_name, season = NULL)"},{"path":"https://ffscrapr.ffverse.com/reference/sleeper_userleagues.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Sleeper - Get User Leagues — sleeper_userleagues","text":"user_name username look season season return leagues - defaults current year based heuristics","code":""},{"path":"https://ffscrapr.ffverse.com/reference/sleeper_userleagues.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Sleeper - Get User Leagues — sleeper_userleagues","text":"dataframe leagues specified user","code":""},{"path":[]},{"path":"https://ffscrapr.ffverse.com/news/index.html","id":"ffscrapr-development-version","dir":"Changelog","previous_headings":"","what":"ffscrapr (development version)","title":"ffscrapr (development version)","text":"sleeper_draft() introduced retrieve Sleeper drafts ID - better supports mock draft retrieval also. (#395) (v1.4.8.01) ff_starters.espn_conn() now retrieves projected scores statSourceId robust (#397, thank @logan-888!) (v1.4.8.02) ff_startpositions.sleeper_conn() now properly handles leagues flex positions dedicated posititions (#400, thank @mcarman8!) (v1.4.8.03) ff_scoring.mfl_conn() now works better new dplyr versions (#402) (v1.4.8.04) ff_schedule.mfl_conn() bug fixed re: removing bad spreads (#403) (v1.4.8.05) ff_franchises(), ff_playerscores(), ff_rosters() fleaflicker methods now respect season connection object (v1.4.8.06) (#408, thank @RandalMorris!) ff_rosters() fleaflicker method now accepts week argument (v1.4.8.06) ff_starters() fleaflicker method expands show injury data box score keep NA data player slot. (v1.4.8.07) Silence whack tidyverse crap (v1.4.8.09) Deprecate nflfastr_weekly() nflfastr_roster() favour nflreadr (v1.4.8.10) Use rlang::ns_env rather superassign onLoad Refactor testing Bugfix sleeper ff_draft() using wrong pick number (v1.4.8.11) Bugfix espn ff_starterpositions() proper total starters (v1.4.8.12) (#415) Bugfix ff_scoringhistory handle new-format load_rosters() now returns row per player-team-season (v1.4.8.13) (thanks @john-b-edwards!) Bugfix espn ff_franchises() return coalesce name/nickname (v1.4.8.14) Bugfix espn ff_starters() return handle multi-week formats (v1.4.8.15) (#421) (h/t @tonyelhabr 🤠) Bugfix espn ff_starters() return less equal max week (v1.4.8.16) [BREAKING] mfl_players() sleeper_players() outputs now try return standardized column types (v1.4.8.17)","code":""},{"path":"https://ffscrapr.ffverse.com/news/index.html","id":"ffscrapr-148","dir":"Changelog","previous_headings":"","what":"ffscrapr 1.4.8","title":"ffscrapr 1.4.8","text":"CRAN release: 2023-02-12 emergency patch get back onto CRAN, packaging longstanding bugfixes also. need revisit testing policy future releases.","code":""},{"path":"https://ffscrapr.ffverse.com/news/index.html","id":"fixes-1-4-8","dir":"Changelog","previous_headings":"","what":"Fixes","title":"ffscrapr 1.4.8","text":"Fix ff_league.mfl_conn() bug created duplicate rows leagues email auction email draft. (resolves #349) Fix hardcoded league year ff_scoringhistory() default arguments, now uses nflreadr::most_recent_season() default upper bound.(resolves #347) Require nflreadr v1.2.0+ due data repository change. dp_values() now explicitly returns rather invisibly returns. Simplified GitHub repo GitHub Flow structure rather Git Flow structure ease maintenance. Re-export nflreadr::ffverse_sitrep() encourage usage bug reporting. Fix ff_transactions.mfl_conn() bug return auction bids, resolves #354 ff_league.espn_conn() now counts TQB evaluating qb_type qb_count, resolves #367 ff_starter_positions.mfl_conn() now splits RB+WR RB+WR+TE positions positional rows resummarises sleeper_connect() now warns use non-character league_id parameter - Sleeper league IDs long (18 characters) longdouble support inconsistent OS OS ff_standings.mfl_conn() changed adapt MFL API changes documented 2022 API release notes, resolves #366 ff_starters.sleeper_conn() bugfixed API change (last-scored-leg -> leg) ff_scoring() fixed dev purrr issues ff_transactions.flea_conn() bugfixed infinite loop problem, resolves #356 (thank @jdegregorio!)","code":""},{"path":"https://ffscrapr.ffverse.com/news/index.html","id":"ffscrapr-147","dir":"Changelog","previous_headings":"","what":"ffscrapr 1.4.7","title":"ffscrapr 1.4.7","text":"CRAN release: 2021-11-10 main goal v1.4.7 patch minor bugs pre-emptively correct issues related upstream dependency tidyr.","code":""},{"path":"https://ffscrapr.ffverse.com/news/index.html","id":"changes-1-4-7","dir":"Changelog","previous_headings":"","what":"Changes","title":"ffscrapr 1.4.7","text":"Fix ff_scoringhistory.flea_conn() kicking bug. Fix ff_schedule.mfl_conn() NA bug. Remove lubridate dep Update .espn_stat_map() add threshold-based scoring fix missing defensive scoring setting Update ff_scoringhistory.espn_conn() add threshold calcs. (thank , @scottfrechette!) Fix espn_potentialpoints() move regular flex ahead superflex ff_scoring() MFL gets tweaks support changes tidyr (thanks, @DavisVaughan!)","code":""},{"path":"https://ffscrapr.ffverse.com/news/index.html","id":"thanks-1-4-7","dir":"Changelog","previous_headings":"","what":"Thanks","title":"ffscrapr 1.4.7","text":"Grateful : @davisderodes, @DavisVaughan, @draftydesert277, @scottfrechette, @TheMathNinja contributions release - feedback, issues, PRs!","code":""},{"path":"https://ffscrapr.ffverse.com/news/index.html","id":"ffscrapr-146","dir":"Changelog","previous_headings":"","what":"ffscrapr 1.4.6","title":"ffscrapr 1.4.6","text":"CRAN release: 2021-09-02 main goal v1.4.6 patch minor bugs, introduce unified dependency nflreadr, add support kicker scoring.","code":""},{"path":"https://ffscrapr.ffverse.com/news/index.html","id":"new-features-1-4-6","dir":"Changelog","previous_headings":"","what":"New features","title":"ffscrapr 1.4.6","text":"ff_template() adds template connection ff_starter_positions(), ff_scoring(), ff_scoringhistory() easily pull common scoring emplates. Add kicker stat mappings ff_scoringhistory() support ~ kicker scorings (MFL’s may weird.)","code":""},{"path":"https://ffscrapr.ffverse.com/news/index.html","id":"minor-changes-1-4-6","dir":"Changelog","previous_headings":"","what":"Minor changes","title":"ffscrapr 1.4.6","text":"ff_league() MFL now returns league type (“dynasty”, “keeper”, “redraft”) field set. ff_league() MFL now returns draft type (e.g. “email draft”, “live auction”) field set. ff_league() MFL now returns draft player pool (e.g. “Rookie”, “Veteran”, “”) field set. (three changes fix #311, thanks @maat7043!) ff_schedule() ESPN now credits bye team win instead causing error. espn_getendpoint() longer returns error seasons prior 2018. (Thanks, @JoeSydlowski!) nflfastr_weekly() nflfastr_roster() now use nflreadr package functions back-end Added names name database, c/o @scasanova via #320 - thank , Santiago! ff_starters() ESPN now also tries return projected score week - thank , @scottfrechette! Resolves #323. ff_schedule() Sleeper longer broken - resolves #322. ff_schedule() MFL now returns NA result unplayed games becomes consistent platforms. ff_scoringhistory() MFL now parses decimal ranges correctly Refactor ff_scoringhistory() memoisable pieces (.nflfastr_offense_long, .nflfastr_kicker_long, .nflfastr_roster) Update http error messages user readability. Minimum R version bumped 3.6.0 - nflreadr uses RDS versions require minimum R3.6.","code":""},{"path":"https://ffscrapr.ffverse.com/news/index.html","id":"thanks-1-4-6","dir":"Changelog","previous_headings":"","what":"Thanks","title":"ffscrapr 1.4.6","text":"Immensely grateful : Joe Sydlowski, Matt Spencer, Santiago Casanova, Scott Frechette, others raised issues contributed code towards release!","code":""},{"path":"https://ffscrapr.ffverse.com/news/index.html","id":"ffscrapr-145","dir":"Changelog","previous_headings":"","what":"ffscrapr 1.4.5","title":"ffscrapr 1.4.5","text":"CRAN release: 2021-07-25 main goal v1.4.5 comply CRAN somehow testing examples.","code":""},{"path":"https://ffscrapr.ffverse.com/news/index.html","id":"minor-changes-1-4-5","dir":"Changelog","previous_headings":"","what":"Minor changes","title":"ffscrapr 1.4.5","text":"ff_league() ESPN now works non-ppr leagues. Include try() examples apparently \\donttest doesn’t anything anymore 😡 (fixes #308)","code":""},{"path":"https://ffscrapr.ffverse.com/news/index.html","id":"ffscrapr-144","dir":"Changelog","previous_headings":"","what":"ffscrapr 1.4.4","title":"ffscrapr 1.4.4","text":"CRAN release: 2021-07-20 main goal v1.4.4 patch minor bugs add minor extensions HTML cleaning function. v1.4.4 also served different github organization website domain.","code":""},{"path":"https://ffscrapr.ffverse.com/news/index.html","id":"minor-changes-1-4-4","dir":"Changelog","previous_headings":"","what":"Minor changes","title":"ffscrapr 1.4.4","text":"mfl_getendpoint() similar get_endpoint functions improved print method tells whether request successful. Added errorhandling ESPN methods ff_starters(), ff_transactions(), ff_rosters(), espn_potentialpoints(), ff_draft(). Fixes #297, thanks report @jpiburn! Added message warn memoise turned , onAttach. ff_transactions() now correctly handles leagues using waiver priority, fixes #299 - thanks report @BarkovMVP! ff_league() Sleeper now identifies best ball leagues, fixes #300 ff_scoring() MFL now points_type column either “” “” - helps delineate fantasy points awarded meeting thresholds/bonuses points awarded per-stat, fixes #301 ff_scoringhistory() MFL applies new ff_scoring() points_type column calculate scoring history. result sensible results leagues bonus scoring! Fixes #301. Add mismatch names (Michael -> Mike Vick, Chris Wells -> Beanie Wells) Add dp_clean_html() clean html names (cough MFL cough) ff_starter_positions() now handles “range” inside total_starters column MFL, resolves #304 Cutover ffverse.com domain github organization","code":""},{"path":"https://ffscrapr.ffverse.com/news/index.html","id":"ffscrapr-143","dir":"Changelog","previous_headings":"","what":"ffscrapr 1.4.3","title":"ffscrapr 1.4.3","text":"CRAN release: 2021-06-12 main goal v1.4.3 patch minor bugs.","code":""},{"path":"https://ffscrapr.ffverse.com/news/index.html","id":"minor-changes-1-4-3","dir":"Changelog","previous_headings":"","what":"Minor changes","title":"ffscrapr 1.4.3","text":"ff_league() now column returns platform’s season - useful running ff_league batch. Thank @joeflan contribution! (Fixes #287) Added helper script dev/ switching test cache versions. Added helper script dev/ rebuilding test cache. ff_schedule() Sleeper now extend playoff weeks. (Fixes #289) ff_draft() Sleeper now auction_amount column auction draft. (Fixes #291) dp_cleannames() now can flip names originally presented LastName, FirstName order First Last, also custom name database convert common alternate names unified one. nflfastr_stat_mapping dp_name_mapping namespaced within package, can used internally externally little robustly. Rebuilt test cache ffscrapr-tests.","code":""},{"path":"https://ffscrapr.ffverse.com/news/index.html","id":"ffscrapr-142","dir":"Changelog","previous_headings":"","what":"ffscrapr 1.4.2","title":"ffscrapr 1.4.2","text":"CRAN release: 2021-05-10 main goal v1.4.2 patch minor bugs.","code":""},{"path":"https://ffscrapr.ffverse.com/news/index.html","id":"minor-changes-1-4-2","dir":"Changelog","previous_headings":"","what":"Minor changes","title":"ffscrapr 1.4.2","text":"espn_rosters now week argument return specific week data. (Fixes #276, thanks @scottfrechette!) ff_scoringhistory now tries return platform-specific player ID, available. (Fixes #275) Roxygen configured use markdown (roxygen2md package) - hopefully fixes lifecycle badge issues? sleeper_players() - gsis_id gets str_squish applied resolve stowaway whitespaces. mfl_players() - add any_of handling columns handle column name changes. sleeper_transactions now handles offseason transactions correctly","code":""},{"path":"https://ffscrapr.ffverse.com/news/index.html","id":"ffscrapr-141","dir":"Changelog","previous_headings":"","what":"ffscrapr 1.4.1","title":"ffscrapr 1.4.1","text":"CRAN release: 2021-04-18 main goal v1.4.1 patch issues raised CRAN checks also correct bugs new experimental ff_scoringhistory ff_starter_positions functions released v1.4.0.","code":""},{"path":"https://ffscrapr.ffverse.com/news/index.html","id":"new-features-1-4-1","dir":"Changelog","previous_headings":"","what":"New features","title":"ffscrapr 1.4.1","text":"nflfastr_stat_mapping dataframe maps nflfastr columns fantasy scoring rules, now exported end-user usage. primarily used inside ff_scoringhistory().","code":""},{"path":"https://ffscrapr.ffverse.com/news/index.html","id":"minor-changes-1-4-1","dir":"Changelog","previous_headings":"","what":"Minor changes","title":"ffscrapr 1.4.1","text":"Added release_questions help remind maintain test infrastructure mfl_starter_positions now correctly calculates offensive starters (first via “iop_starters” defined otherwise subtracting idp starters) well kdst_starters (Resolves #264) Redirected nflfastr download functions new nflverse/ repository locations. (Resolves #268) .ffscrapr_env relocated child base environment child empty environment (Resolves #269) ff_scoringhistory refactored adds better support MFL’s fumbles firstdowns. (Resolves #265)","code":""},{"path":"https://ffscrapr.ffverse.com/news/index.html","id":"ffscrapr-140","dir":"Changelog","previous_headings":"","what":"ffscrapr 1.4.0","title":"ffscrapr 1.4.0","text":"CRAN release: 2021-04-13 main goal v1.4.0 add preliminary support connecting ffscrapr nflfastR weekly data, clean bugs v1.3.0. Huge thanks goes Joe Sydlowski contributions scoring history (everything else DynastyProcess!)","code":""},{"path":"https://ffscrapr.ffverse.com/news/index.html","id":"new-features-1-4-0","dir":"Changelog","previous_headings":"","what":"New Features","title":"ffscrapr 1.4.0","text":"nflfastr_weekly() imports weekly offensive statistics nflfastR’s data repository. nflfastr_rosters() imports team rosters nflfastR’s roster repository. ff_scoringhistory() connects league’s scoring settings nflfastr data (c/o functions ), allows reconstruct historical scoring league! ff_starter_positions() describes starter rules player/position, including min max starters position accounting flex spots. useful calculating things like value replacement!","code":""},{"path":"https://ffscrapr.ffverse.com/news/index.html","id":"breaking-changes-1-4-0","dir":"Changelog","previous_headings":"","what":"Breaking Changes","title":"ffscrapr 1.4.0","text":"ff_scoring ESPN loses “override_pos” value 16 D/ST specific rules ff_scoring rules ESPN Sleeper expanded one line per rule one line per position per rule","code":""},{"path":"https://ffscrapr.ffverse.com/news/index.html","id":"minor-changes-1-4-0","dir":"Changelog","previous_headings":"","what":"Minor Changes","title":"ffscrapr 1.4.0","text":"Force mfl_playerscores use season + league specific players call possible (#239) Reduce minimum rows flea_rosters test 200, fixes API check issue (#242) Switching memoise backend cachem package, fixes CRAN check issue digest longer imported memoise. Cachem also apparently performant! (#244) sleeper_transactions now correctly handles multiple dropped players one transaction. (#246). mfl_transactions - adds numeric string parsing fix bug auction bid amount mfl_draft now calculates age timestamp also adds overall column. (#259, #260)","code":""},{"path":"https://ffscrapr.ffverse.com/news/index.html","id":"ffscrapr-130","dir":"Changelog","previous_headings":"","what":"ffscrapr 1.3.0","title":"ffscrapr 1.3.0","text":"CRAN release: 2021-03-07 main goal ffscrapr 1.3.0 add support ESPN platform. also includes several bug fixes, code quality improvements, major refactor tests reduce overall package size. huge thank-goes Tony ElHabr contributions package ESPN methods.","code":""},{"path":"https://ffscrapr.ffverse.com/news/index.html","id":"breaking-changes-1-3-0","dir":"Changelog","previous_headings":"","what":"Breaking Changes","title":"ffscrapr 1.3.0","text":"custom_players arguments deprecated MFL - now return default.","code":""},{"path":"https://ffscrapr.ffverse.com/news/index.html","id":"espn-details-1-3-0","dir":"Changelog","previous_headings":"","what":"ESPN Details","title":"ffscrapr 1.3.0","text":"ESPN tricky undocumented API. Private leagues accessible use SWID/ESPN_S2 authentication arguments, lot like API keys - see ESPN authentication vignette. Unsupported functions: ff_draftpicks() - apply ESPN primarily support draft pick trades. ff_userleagues() - ESPN support looking user’s leagues, even authenticated Username password features - ESPN used way authenticate via username/password, recently made difficult. area can revisited /Python package manages , time accessible SWID/ESPN_S2 keys.","code":""},{"path":"https://ffscrapr.ffverse.com/news/index.html","id":"new-functions-1-3-0","dir":"Changelog","previous_headings":"","what":"New Functions","title":"ffscrapr 1.3.0","text":"dp_cleannames() utility function cleaning player names removes common suffixes, periods, apostrophes. espn_potentialpoints() calculates optimal lineup week.","code":""},{"path":"https://ffscrapr.ffverse.com/news/index.html","id":"minor-patches-1-3-0","dir":"Changelog","previous_headings":"","what":"Minor patches","title":"ffscrapr 1.3.0","text":"Converted GET requests use httr::RETRY instead - adds robustness server-side issues. suggested Maelle Salmon’s blog post reinventing wheel. Added type conversions renaming snake_case consistency mfl_rosters mfl_playerscores Fixed bug MFL’s ff_playerscores() function correctly pulls older names. (Resolves #196) Refactored tests move test cache files separate/non-package location (https://github.com/ffverse/ffscrapr-tests) - included CRAN’s package sizing Fixed bugs MFL’s ff_starters() function - bad default arg, bad players call. (Fixes #202) Resolve MFL’s playerscores handle vectorized request (Fixes #206) Resolve bugs related .fn_choose_season tests (Fixes #217, #219) Resolved bug MFL’s ff_rosters() adding week parameter (Fixes #215) Coerced ff_transactions() bid_amount numeric (Fixes #210) Removed bye franchises ff_starters() (Fixes #212)","code":""},{"path":"https://ffscrapr.ffverse.com/news/index.html","id":"ffscrapr-122","dir":"Changelog","previous_headings":"","what":"ffscrapr 1.2.2","title":"ffscrapr 1.2.2","text":"CRAN release: 2021-02-08 Minor patches dp_import functions address issues discovered CRAN checks. Also adds minor helper function, dp_cleannames(), utility function cleaning player names removes common suffixes, periods, apostrophes. Messed export , whoops. Fixing next release.","code":""},{"path":"https://ffscrapr.ffverse.com/news/index.html","id":"minor-patches-1-2-2","dir":"Changelog","previous_headings":"","what":"Minor patches","title":"ffscrapr 1.2.2","text":"Refactored dp_values() dp_playerids() functions use httr backend compat httptest, preventing CRAN errors. Added inst-level redactor httptest.","code":""},{"path":"https://ffscrapr.ffverse.com/news/index.html","id":"ffscrapr-121","dir":"Changelog","previous_headings":"","what":"ffscrapr 1.2.1","title":"ffscrapr 1.2.1","text":"CRAN release: 2020-12-16","code":""},{"path":"https://ffscrapr.ffverse.com/news/index.html","id":"minor-patches-1-2-1","dir":"Changelog","previous_headings":"","what":"Minor patches","title":"ffscrapr 1.2.1","text":"Caching vignette outputs tests/testthat making vignette-rebuilding less internet reliant Changing league_id output sleeper_userleagues character column (cran -longdouble support)","code":""},{"path":"https://ffscrapr.ffverse.com/news/index.html","id":"ffscrapr-120","dir":"Changelog","previous_headings":"","what":"ffscrapr 1.2.0","title":"ffscrapr 1.2.0","text":"CRAN release: 2020-11-27 main goal ffscrapr 1.2.0 add full set methods Fleaflicker. release also adds improved caching options, including writing filesystem persistent caching (see vignette!), one hotfix sleeper_getendpoint.","code":""},{"path":"https://ffscrapr.ffverse.com/news/index.html","id":"breaking-changes-1-2-0","dir":"Changelog","previous_headings":"","what":"BREAKING CHANGES","title":"ffscrapr 1.2.0","text":"sleeper_getendpoint() now behaves like getendpoint functions - first argument endpoint args passed query parameters.","code":""},{"path":"https://ffscrapr.ffverse.com/news/index.html","id":"other-tweaks-to-existing-platformsmethods-1-2-0","dir":"Changelog","previous_headings":"","what":"Other tweaks to existing platforms/methods","title":"ffscrapr 1.2.0","text":"Small copyedits existing vignettes. Added filesystem cache capabilities vignette detailing use .","code":""},{"path":"https://ffscrapr.ffverse.com/news/index.html","id":"fleaflicker-notes-1-2-0","dir":"Changelog","previous_headings":"","what":"Fleaflicker notes","title":"ffscrapr 1.2.0","text":"functions now Fleaflicker methods! notes isn’t : fleaflicker_players() requires connection/leagueID default - acts little oddly game days right now. ff_playerscores() - Fleaflicker’s API returns season level data easily, week-level readily available yet without workarounds. Everything else seems okay.","code":""},{"path":"https://ffscrapr.ffverse.com/news/index.html","id":"ffscrapr-110","dir":"Changelog","previous_headings":"","what":"ffscrapr 1.1.0","title":"ffscrapr 1.1.0","text":"CRAN release: 2020-11-16 main goal ffscrapr 1.1.0 add full set methods Sleeper. Also adds two new generics: ff_userleagues() ff_starters().","code":""},{"path":"https://ffscrapr.ffverse.com/news/index.html","id":"new-generic-functions-1-1-0","dir":"Changelog","previous_headings":"","what":"New generic functions","title":"ffscrapr 1.1.0","text":"list new functions available top level (ie platforms) ff_userleagues() returns list user leagues. deployed slightly differently MFL Sleeper - MFL requires authentication access user’s leagues, Sleeper doesn’t authentication can look user like. ff_starters() returns list players started/-started week. MFL return actual score player week calculate whether optimal, Sleeper just returns player .","code":""},{"path":"https://ffscrapr.ffverse.com/news/index.html","id":"sleeper-notes-1-1-0","dir":"Changelog","previous_headings":"","what":"Sleeper notes","title":"ffscrapr 1.1.0","text":"Almost functions now Sleeper methods - implemented hopes relatively familiar manner MFL. Outlining specifics isn’t : sleeper_userleagues() wrapper ff_userleagues() makes easier look user leagues without first creating connection object. ff_playerscores() available Sleeper Sleeper removed player stats endpoint - generate warning (rather error). Thinking creating functions calculate scoring based nflfastr. sleeper_getendpoint() little simple MFL’s equivalent - just pass string url (minus api.sleeper.app/v1) pass chunks code, function automatically paste together “/”. Added generic method ff_userleagues() - Sleeper league IDs annoying MFL handle, intuitive way look user’s league_ids username first. MFL parallel feature even used different purposes. Added two vignettes, showing “Getting Started” well one custom API calls","code":""},{"path":"https://ffscrapr.ffverse.com/news/index.html","id":"mfl-changes-1-1-0","dir":"Changelog","previous_headings":"","what":"MFL changes","title":"ffscrapr 1.1.0","text":"Added method ff_userleagues() Added handling offensive_points defensive_points ff_standings() (#69, nice.) Added ff_starters() requested #76 (thanks, Mike!) Added httr::handle_reset() call fix login-caching bug. Polished vignettes little.","code":""},{"path":"https://ffscrapr.ffverse.com/news/index.html","id":"other-release-tweaks-in-1-1-0","dir":"Changelog","previous_headings":"","what":"Other release tweaks in 1.1.0","title":"ffscrapr 1.1.0","text":"Now uses {checkmate} testing. Silently swallowing unused args mfl_connect sleeper_connect. Uses describeIn instead rdname method documentation. Wrap documentation examples donttest - ratelimiting running 5 seconds pretty challenging!","code":""},{"path":"https://ffscrapr.ffverse.com/news/index.html","id":"ffscrapr-100","dir":"Changelog","previous_headings":"","what":"ffscrapr 1.0.0","title":"ffscrapr 1.0.0","text":"CRAN release: 2020-08-17 first (major) version ffscrapr intended build full set functions first API platform: MFL. Future versions add platforms via methods mapped functions. Functions include: ff_connect (sibling mfl_connect) establish connection parameters ratelimiting mfl_getendpoint low-level function making GET requests MFL ff_draft gets draft results ff_draftpicks gets current future draft picks yet selected ff_franchises gets franchise-level identifiers divisions ff_league gets league-level summaries rules, players, franchises ff_playerscores gets playerweek-level scores ff_rosters gets franchise-level rosters complete naming ff_schedule gets weekly fantasy schedules ff_scoring gets scoring rules ff_standings gets league-level season summaries ff_transactions gets list transactions cleans data frame.","code":""}]
